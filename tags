!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/c9ebd839/
#	init.vim	/^nnoremap # 10@@$/;"	m
#	init.vim	/^nnoremap # <nop>$/;"	m
#all	.plugged/editorconfig-vim/tests/plugin/spec/editorconfig_spec.rb	/^    describe '#all' do$/;"	d
%.tar.gz	.plugged/delimitMate/Makefile	/^%.tar.gz: $(SOURCES)$/;"	t
%.vmb	.plugged/delimitMate/Makefile	/^%.vmb: $(SOURCES)$/;"	t
%.vmb.gz	.plugged/delimitMate/Makefile	/^%.vmb.gz: vimball$/;"	t
%.vmb.zip	.plugged/delimitMate/Makefile	/^%.vmb.zip: vimball$/;"	t
%.zip	.plugged/delimitMate/Makefile	/^%.zip: $(SOURCES)$/;"	t
*Backward incompatible changes*	.plugged/fzf/CHANGELOG.md	/^### *Backward incompatible changes*$/;"	S	section:CHANGELOG""0.9.4
0.10.0	.plugged/fzf/CHANGELOG.md	/^0.10.0$/;"	s	chapter:CHANGELOG
0.10.1	.plugged/fzf/CHANGELOG.md	/^0.10.1$/;"	s	chapter:CHANGELOG
0.10.2	.plugged/fzf/CHANGELOG.md	/^0.10.2$/;"	s	chapter:CHANGELOG
0.10.3	.plugged/fzf/CHANGELOG.md	/^0.10.3$/;"	s	chapter:CHANGELOG
0.10.4	.plugged/fzf/CHANGELOG.md	/^0.10.4$/;"	s	chapter:CHANGELOG
0.10.5	.plugged/fzf/CHANGELOG.md	/^0.10.5$/;"	s	chapter:CHANGELOG
0.10.6	.plugged/fzf/CHANGELOG.md	/^0.10.6$/;"	s	chapter:CHANGELOG
0.10.7	.plugged/fzf/CHANGELOG.md	/^0.10.7$/;"	s	chapter:CHANGELOG
0.10.8	.plugged/fzf/CHANGELOG.md	/^0.10.8$/;"	s	chapter:CHANGELOG
0.10.9	.plugged/fzf/CHANGELOG.md	/^0.10.9$/;"	s	chapter:CHANGELOG
0.11.0	.plugged/fzf/CHANGELOG.md	/^0.11.0$/;"	s	chapter:CHANGELOG
0.11.1	.plugged/fzf/CHANGELOG.md	/^0.11.1$/;"	s	chapter:CHANGELOG
0.11.2	.plugged/fzf/CHANGELOG.md	/^0.11.2$/;"	s	chapter:CHANGELOG
0.11.3	.plugged/fzf/CHANGELOG.md	/^0.11.3$/;"	s	chapter:CHANGELOG
0.11.4	.plugged/fzf/CHANGELOG.md	/^0.11.4$/;"	s	chapter:CHANGELOG
0.12.0	.plugged/fzf/CHANGELOG.md	/^0.12.0$/;"	s	chapter:CHANGELOG
0.12.1	.plugged/fzf/CHANGELOG.md	/^0.12.1$/;"	s	chapter:CHANGELOG
0.12.2	.plugged/fzf/CHANGELOG.md	/^0.12.2$/;"	s	chapter:CHANGELOG
0.13.0	.plugged/fzf/CHANGELOG.md	/^0.13.0$/;"	s	chapter:CHANGELOG
0.13.1	.plugged/fzf/CHANGELOG.md	/^0.13.1$/;"	s	chapter:CHANGELOG
0.13.2	.plugged/fzf/CHANGELOG.md	/^0.13.2$/;"	s	chapter:CHANGELOG
0.13.3	.plugged/fzf/CHANGELOG.md	/^0.13.3$/;"	s	chapter:CHANGELOG
0.13.4	.plugged/fzf/CHANGELOG.md	/^0.13.4$/;"	s	chapter:CHANGELOG
0.13.5	.plugged/fzf/CHANGELOG.md	/^0.13.5$/;"	s	chapter:CHANGELOG
0.15.0	.plugged/fzf/CHANGELOG.md	/^0.15.0$/;"	s	chapter:CHANGELOG
0.15.1	.plugged/fzf/CHANGELOG.md	/^0.15.1$/;"	s	chapter:CHANGELOG
0.15.2	.plugged/fzf/CHANGELOG.md	/^0.15.2$/;"	s	chapter:CHANGELOG
0.15.3	.plugged/fzf/CHANGELOG.md	/^0.15.3$/;"	s	chapter:CHANGELOG
0.15.4	.plugged/fzf/CHANGELOG.md	/^0.15.4$/;"	s	chapter:CHANGELOG
0.15.5	.plugged/fzf/CHANGELOG.md	/^0.15.5$/;"	s	chapter:CHANGELOG
0.15.6	.plugged/fzf/CHANGELOG.md	/^0.15.6$/;"	s	chapter:CHANGELOG
0.15.7	.plugged/fzf/CHANGELOG.md	/^0.15.7$/;"	s	chapter:CHANGELOG
0.15.8	.plugged/fzf/CHANGELOG.md	/^0.15.8$/;"	s	chapter:CHANGELOG
0.15.9	.plugged/fzf/CHANGELOG.md	/^0.15.9$/;"	s	chapter:CHANGELOG
0.16.0	.plugged/fzf/CHANGELOG.md	/^0.16.0$/;"	s	chapter:CHANGELOG
0.16.1	.plugged/fzf/CHANGELOG.md	/^0.16.1$/;"	s	chapter:CHANGELOG
0.16.10	.plugged/fzf/CHANGELOG.md	/^0.16.10$/;"	s	chapter:CHANGELOG
0.16.11	.plugged/fzf/CHANGELOG.md	/^0.16.11$/;"	s	chapter:CHANGELOG
0.16.2	.plugged/fzf/CHANGELOG.md	/^0.16.2$/;"	s	chapter:CHANGELOG
0.16.3	.plugged/fzf/CHANGELOG.md	/^0.16.3$/;"	s	chapter:CHANGELOG
0.16.4	.plugged/fzf/CHANGELOG.md	/^0.16.4$/;"	s	chapter:CHANGELOG
0.16.5	.plugged/fzf/CHANGELOG.md	/^0.16.5$/;"	s	chapter:CHANGELOG
0.16.6	.plugged/fzf/CHANGELOG.md	/^0.16.6$/;"	s	chapter:CHANGELOG
0.16.7	.plugged/fzf/CHANGELOG.md	/^0.16.7$/;"	s	chapter:CHANGELOG
0.16.8	.plugged/fzf/CHANGELOG.md	/^0.16.8$/;"	s	chapter:CHANGELOG
0.16.9	.plugged/fzf/CHANGELOG.md	/^0.16.9$/;"	s	chapter:CHANGELOG
0.17.0	.plugged/fzf/CHANGELOG.md	/^0.17.0$/;"	s	chapter:CHANGELOG
0.17.0-2	.plugged/fzf/CHANGELOG.md	/^0.17.0-2$/;"	s	chapter:CHANGELOG
0.17.1	.plugged/fzf/CHANGELOG.md	/^0.17.1$/;"	s	chapter:CHANGELOG
0.17.3	.plugged/fzf/CHANGELOG.md	/^0.17.3$/;"	s	chapter:CHANGELOG
0.17.4	.plugged/fzf/CHANGELOG.md	/^0.17.4$/;"	s	chapter:CHANGELOG
0.17.5	.plugged/fzf/CHANGELOG.md	/^0.17.5$/;"	s	chapter:CHANGELOG
0.18.0	.plugged/fzf/CHANGELOG.md	/^0.18.0$/;"	s	chapter:CHANGELOG
0.19.0	.plugged/fzf/CHANGELOG.md	/^0.19.0$/;"	s	chapter:CHANGELOG
0.20.0	.plugged/fzf/CHANGELOG.md	/^0.20.0$/;"	s	chapter:CHANGELOG
0.21.1	.plugged/fzf/CHANGELOG.md	/^0.21.1$/;"	s	chapter:CHANGELOG
0.22.0	.plugged/fzf/CHANGELOG.md	/^0.22.0$/;"	s	chapter:CHANGELOG
0.23.0	.plugged/fzf/CHANGELOG.md	/^0.23.0$/;"	s	chapter:CHANGELOG
0.23.1	.plugged/fzf/CHANGELOG.md	/^0.23.1$/;"	s	chapter:CHANGELOG
0.24.0	.plugged/fzf/CHANGELOG.md	/^0.24.0$/;"	s	chapter:CHANGELOG
0.24.1	.plugged/fzf/CHANGELOG.md	/^0.24.1$/;"	s	chapter:CHANGELOG
0.24.2	.plugged/fzf/CHANGELOG.md	/^0.24.2$/;"	s	chapter:CHANGELOG
0.24.3	.plugged/fzf/CHANGELOG.md	/^0.24.3$/;"	s	chapter:CHANGELOG
0.24.4	.plugged/fzf/CHANGELOG.md	/^0.24.4$/;"	s	chapter:CHANGELOG
0.25.0	.plugged/fzf/CHANGELOG.md	/^0.25.0$/;"	s	chapter:CHANGELOG
0.25.1	.plugged/fzf/CHANGELOG.md	/^0.25.1$/;"	s	chapter:CHANGELOG
0.26.0	.plugged/fzf/CHANGELOG.md	/^0.26.0$/;"	s	chapter:CHANGELOG
0.27.0	.plugged/fzf/CHANGELOG.md	/^0.27.0$/;"	s	chapter:CHANGELOG
0.27.1	.plugged/fzf/CHANGELOG.md	/^0.27.1$/;"	s	chapter:CHANGELOG
0.27.2	.plugged/fzf/CHANGELOG.md	/^0.27.2$/;"	s	chapter:CHANGELOG
0.27.3	.plugged/fzf/CHANGELOG.md	/^0.27.3$/;"	s	chapter:CHANGELOG
0.28.0	.plugged/fzf/CHANGELOG.md	/^0.28.0$/;"	s	chapter:CHANGELOG
0.29.0	.plugged/fzf/CHANGELOG.md	/^0.29.0$/;"	s	chapter:CHANGELOG
0.30.0	.plugged/fzf/CHANGELOG.md	/^0.30.0$/;"	s	chapter:CHANGELOG
0.31.0	.plugged/fzf/CHANGELOG.md	/^0.31.0$/;"	s	chapter:CHANGELOG
0.32.0	.plugged/fzf/CHANGELOG.md	/^0.32.0$/;"	s	chapter:CHANGELOG
0.32.1	.plugged/fzf/CHANGELOG.md	/^0.32.1$/;"	s	chapter:CHANGELOG
0.33.0	.plugged/fzf/CHANGELOG.md	/^0.33.0$/;"	s	chapter:CHANGELOG
0.34.0	.plugged/fzf/CHANGELOG.md	/^0.34.0$/;"	s	chapter:CHANGELOG
0.35.0	.plugged/fzf/CHANGELOG.md	/^0.35.0$/;"	s	chapter:CHANGELOG
0.35.1	.plugged/fzf/CHANGELOG.md	/^0.35.1$/;"	s	chapter:CHANGELOG
0.36.0	.plugged/fzf/CHANGELOG.md	/^0.36.0$/;"	s	chapter:CHANGELOG
0.37.0	.plugged/fzf/CHANGELOG.md	/^0.37.0$/;"	s	chapter:CHANGELOG
0.38.0	.plugged/fzf/CHANGELOG.md	/^0.38.0$/;"	s	chapter:CHANGELOG
0.9.10	.plugged/fzf/CHANGELOG.md	/^0.9.10$/;"	s	chapter:CHANGELOG
0.9.11	.plugged/fzf/CHANGELOG.md	/^0.9.11$/;"	s	chapter:CHANGELOG
0.9.12	.plugged/fzf/CHANGELOG.md	/^0.9.12$/;"	s	chapter:CHANGELOG
0.9.13	.plugged/fzf/CHANGELOG.md	/^0.9.13$/;"	s	chapter:CHANGELOG
0.9.3	.plugged/fzf/CHANGELOG.md	/^0.9.3$/;"	s	chapter:CHANGELOG
0.9.4	.plugged/fzf/CHANGELOG.md	/^0.9.4$/;"	s	chapter:CHANGELOG
0.9.5	.plugged/fzf/CHANGELOG.md	/^0.9.5$/;"	s	chapter:CHANGELOG
0.9.6	.plugged/fzf/CHANGELOG.md	/^0.9.6$/;"	s	chapter:CHANGELOG
0.9.7	.plugged/fzf/CHANGELOG.md	/^0.9.7$/;"	s	chapter:CHANGELOG
0.9.8	.plugged/fzf/CHANGELOG.md	/^0.9.8$/;"	s	chapter:CHANGELOG
0.9.9	.plugged/fzf/CHANGELOG.md	/^0.9.9$/;"	s	chapter:CHANGELOG
1. Update the list of processes by pressing CTRL-R	.plugged/fzf/README.md	/^#### 1. Update the list of processes by pressing CTRL-R$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
2. Switch between sources by pressing CTRL-D or CTRL-F	.plugged/fzf/README.md	/^#### 2. Switch between sources by pressing CTRL-D or CTRL-F$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
3-space indentation	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^3-space indentation$/;"	S	section:Space-based indentation
3. Interactive ripgrep integration	.plugged/fzf/README.md	/^#### 3. Interactive ripgrep integration$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
3.0.0	.plugged/nerdtree/CHANGELOG.md	/^#### 3.0.0$/;"	t	chapter:NERDTree Change Log
3.0.1	.plugged/nerdtree/CHANGELOG.md	/^#### 3.0.1$/;"	t	chapter:NERDTree Change Log
3.1.0	.plugged/nerdtree/CHANGELOG.md	/^#### 3.1.0$/;"	t	chapter:NERDTree Change Log
3.1.1	.plugged/nerdtree/CHANGELOG.md	/^#### 3.1.1$/;"	t	chapter:NERDTree Change Log
4-space indentation with tab width of 8	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^4-space indentation with tab width of 8$/;"	S	section:Space-based indentation
4.0.0	.plugged/nerdtree/CHANGELOG.md	/^#### 4.0.0$/;"	t	chapter:NERDTree Change Log
4.1.0	.plugged/nerdtree/CHANGELOG.md	/^#### 4.1.0$/;"	t	chapter:NERDTree Change Log
4.2.0	.plugged/nerdtree/CHANGELOG.md	/^#### 4.2.0$/;"	t	chapter:NERDTree Change Log
5.0.0	.plugged/nerdtree/CHANGELOG.md	/^#### 5.0.0$/;"	t	chapter:NERDTree Change Log
5.1	.plugged/nerdtree/CHANGELOG.md	/^#### 5.1$/;"	t	chapter:NERDTree Change Log
5.2	.plugged/nerdtree/CHANGELOG.md	/^#### 5.2$/;"	t	chapter:NERDTree Change Log
5.3	.plugged/nerdtree/CHANGELOG.md	/^#### 5.3$/;"	t	chapter:NERDTree Change Log
6.0	.plugged/nerdtree/CHANGELOG.md	/^#### 6.0$/;"	t	chapter:NERDTree Change Log
6.1	.plugged/nerdtree/CHANGELOG.md	/^#### 6.1$/;"	t	chapter:NERDTree Change Log
6.10	.plugged/nerdtree/CHANGELOG.md	/^#### 6.10$/;"	t	chapter:NERDTree Change Log
6.2	.plugged/nerdtree/CHANGELOG.md	/^#### 6.2$/;"	t	chapter:NERDTree Change Log
6.3	.plugged/nerdtree/CHANGELOG.md	/^#### 6.3$/;"	t	chapter:NERDTree Change Log
6.4	.plugged/nerdtree/CHANGELOG.md	/^#### 6.4$/;"	t	chapter:NERDTree Change Log
6.5	.plugged/nerdtree/CHANGELOG.md	/^#### 6.5$/;"	t	chapter:NERDTree Change Log
6.6	.plugged/nerdtree/CHANGELOG.md	/^#### 6.6$/;"	t	chapter:NERDTree Change Log
6.7	.plugged/nerdtree/CHANGELOG.md	/^#### 6.7$/;"	t	chapter:NERDTree Change Log
6.8	.plugged/nerdtree/CHANGELOG.md	/^#### 6.8$/;"	t	chapter:NERDTree Change Log
6.9	.plugged/nerdtree/CHANGELOG.md	/^#### 6.9$/;"	t	chapter:NERDTree Change Log
<2-LeftMouse>	.plugged/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<2-LeftMouse>	.plugged/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <2-LeftMouse>$/;"	m
<BS>	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^  snoremap <BS>     a<BS>$/;"	m
<C-G>S	.plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>g	.plugged/delimitMate/plugin/delimitMate.vim	/^    imap <silent> <buffer> <C-G>g <Plug>delimitMateJumpMany$/;"	m
<C-G>s	.plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-S>	.plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-f>	init.vim	/^inoremap <C-f> <right>$/;"	m
<C-h>	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^  snoremap <C-h>    a<BS>$/;"	m
<C-j>	init.vim	/^inoremap <C-j> <CR><C-o><S-o>$/;"	m
<C-j>	init.vim	/^inoremap <C-j> <nop>$/;"	m
<C-j>	init.vim	/^nnoremap <C-j> <nop>$/;"	m
<C-k>	init.vim	/^imap <C-k>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<C-k>	init.vim	/^inoremap <C-k> <nop>$/;"	m
<C-k>	init.vim	/^nnoremap <C-k> <nop>$/;"	m
<C-k>	init.vim	/^smap <C-k>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<C-k>	init.vim	/^xmap <C-k>     <Plug>(neosnippet_expand_target)$/;"	m
<C-q>	init.vim	/^nnoremap <C-q> :q<cr>$/;"	m
<C-w>t	init.vim	/^nnoremap <C-w>t :NERDTreeToggle <CR>$/;"	m
<CR>	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^  snoremap <CR>     a<BS>$/;"	m
<Del>	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^  snoremap <Del>    a<BS>$/;"	m
<F2>	init.vim	/^inoremap <F2> <Esc>:wa<cr>$/;"	m
<F2>	init.vim	/^nnoremap <F2> :wa<cr>$/;"	m
<F8>	init.vim	/^nmap <F8> :TagbarToggle<cr>$/;"	m
<LeftRelease>	.plugged/tagbar/autoload/tagbar.vim	/^    inoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<LeftRelease>	.plugged/tagbar/autoload/tagbar.vim	/^    nnoremap <script> <silent> <buffer> <LeftRelease>$/;"	m
<Plug>(-fzf-complete-finish)	.plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l$/;"	m
<Plug>(-fzf-complete-finish)	.plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <silent> <Plug>(-fzf-complete-finish) a$/;"	m
<Plug>(-fzf-complete-trigger)	.plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(fzf-insert)	.plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-normal)	.plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug>(neosnippet_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_expand)$/;"	m
<Plug>(neosnippet_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^nmap <Plug>(neosnippet_expand)         g<C-h><Plug>(neosnippet_expand)$/;"	m
<Plug>(neosnippet_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_expand)$/;"	m
<Plug>(neosnippet_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^xmap <Plug>(neosnippet_expand)         <C-g><Plug>(neosnippet_expand)$/;"	m
<Plug>(neosnippet_expand_or_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_expand_or_jump)$/;"	m
<Plug>(neosnippet_expand_or_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^nmap <Plug>(neosnippet_expand_or_jump) g<C-h><Plug>(neosnippet_expand_or_jump)$/;"	m
<Plug>(neosnippet_expand_or_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_expand_or_jump)$/;"	m
<Plug>(neosnippet_expand_or_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^xmap <Plug>(neosnippet_expand_or_jump) <C-g><Plug>(neosnippet_expand_or_jump)$/;"	m
<Plug>(neosnippet_expand_target)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^xnoremap <silent> <Plug>(neosnippet_expand_target)$/;"	m
<Plug>(neosnippet_get_selected_text)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^xnoremap <silent> <Plug>(neosnippet_get_selected_text)$/;"	m
<Plug>(neosnippet_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_jump)$/;"	m
<Plug>(neosnippet_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^nmap <Plug>(neosnippet_jump)           g<C-h><Plug>(neosnippet_jump)$/;"	m
<Plug>(neosnippet_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_jump)$/;"	m
<Plug>(neosnippet_jump)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^xmap <Plug>(neosnippet_jump)           <C-g><Plug>(neosnippet_jump)$/;"	m
<Plug>(neosnippet_jump_or_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^inoremap <silent><expr> <Plug>(neosnippet_jump_or_expand)$/;"	m
<Plug>(neosnippet_jump_or_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^nmap <Plug>(neosnippet_jump_or_expand) g<C-h><Plug>(neosnippet_jump_or_expand)$/;"	m
<Plug>(neosnippet_jump_or_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^snoremap <silent><expr> <Plug>(neosnippet_jump_or_expand)$/;"	m
<Plug>(neosnippet_jump_or_expand)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^xmap <Plug>(neosnippet_jump_or_expand) <C-g><Plug>(neosnippet_jump_or_expand)$/;"	m
<Plug>(neosnippet_register_oneshot_snippet)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^xnoremap <silent> <Plug>(neosnippet_register_oneshot_snippet)$/;"	m
<Plug>(neosnippet_start_unite_snippet)	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^inoremap <expr><silent> <Plug>(neosnippet_start_unite_snippet)$/;"	m
<Plug>CSurround	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>ChangeCommentary	.plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>Commentary	.plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>Commentary	.plugged/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==#/;"	m
<Plug>Commentary	.plugged/vim-commentary/plugin/commentary.vim	/^xnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>CommentaryLine	.plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>CommentaryUndo	.plugged/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Comme/;"	m
<Plug>Csurround	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	.plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	.plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SurroundRepeat	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>VSurround	.plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VgSurround	.plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>YSsurround	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	.plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<Plug>delimitMateBS	.plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <silent> <Plug>delimitMateBS <C-R>=delimitMate#BS()<CR>$/;"	m
<Plug>delimitMateCR	.plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><silent> <Plug>delimitMateCR <SID>TriggerAbb()."\\<C-R>=delimitMate#ExpandRetur/;"	m
<Plug>delimitMateJumpMany	.plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><buffer> <Plug>delimitMateJumpMany <SID>TriggerAbb()."\\<C-R>=delimitMate#JumpM/;"	m
<Plug>delimitMateS-BS	.plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <silent> <expr> <Plug>delimitMateS-BS delimitMate#WithinEmptyPair() ? "\\<Del>" : "\\/;"	m
<Plug>delimitMateS-Tab	.plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><silent> <Plug>delimitMateS-Tab <SID>TriggerAbb()."\\<C-R>=delimitMate#JumpAny(/;"	m
<Plug>delimitMateSpace	.plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><silent> <Plug>delimitMateSpace <SID>TriggerAbb()."\\<C-R>=delimitMate#ExpandSp/;"	m
<TAB>	init.vim	/^smap <expr><TAB> neosnippet#expandable_or_jumpable() ?$/;"	m
<c-h>	init.vim	/^nnoremap <c-h> :<nop>$/;"	m
<c-h>	init.vim	/^nnoremap <c-h> :HopChar2<cr>$/;"	m
<c-j>	init.vim	/^nnoremap <silent> <c-j> :MYFZF<cr>$/;"	m
<c-k>	init.vim	/^nnoremap <silent> <c-k> :Buffers<cr>$/;"	m
<c-n>	init.vim	/^nnoremap <silent> <c-n> :BLines<cr>$/;"	m
<cr>	autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)	.plugged/fzf/README.md	/^<img src="https:\/\/raw.githubusercontent.com\/junegunn\/i\/master\/fzf.png" height="170" alt="f/;"	c
<leader>,	init.vim	/^nnoremap <leader>, A,<ESC>^$/;"	m
<leader>;	init.vim	/^nnoremap <leader>; A;<ESC>^$/;"	m
<leader>O	init.vim	/^nnoremap <leader>O O<Esc>$/;"	m
<leader>a	init.vim	/^vmap <leader>a "ay<CR>$/;"	m
<leader>d	init.vim	/^nnoremap <leader>d yyp$/;"	m
<leader>f	init.vim	/^nnoremap <leader>f  :NERDTreeFind <CR>$/;"	m
<leader>gc	init.vim	/^nnoremap <leader>gc :cclose<cr>$/;"	m
<leader>go	init.vim	/^nnoremap <leader>go :copen<cr>$/;"	m
<leader>h	init.vim	/^nnoremap <leader>h 5b$/;"	m
<leader>h	init.vim	/^nnoremap <leader>h <Nop>$/;"	m
<leader>i	init.vim	/^nnoremap <leader>i i<Space><Esc>i$/;"	m
<leader>j	init.vim	/^nnoremap <leader>j 5j$/;"	m
<leader>k	init.vim	/^nnoremap <leader>k 5k$/;"	m
<leader>l	init.vim	/^nnoremap <leader>l 5w$/;"	m
<leader>l	init.vim	/^nnoremap <leader>l <Nop>$/;"	m
<leader>no	init.vim	/^nnoremap <leader>no :noh<Cr>$/;"	m
<leader>nt	init.vim	/^nnoremap <leader>nt :NERDTree <CR>$/;"	m
<leader>o	init.vim	/^nnoremap <leader>o o<Esc>$/;"	m
<leader>v	init.vim	/^nnoremap <leader>v "ap$/;"	m
<plug>(-fzf-/)	.plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	.plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	.plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	.plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	.plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	.plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	.plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	.plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	.plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	.plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	.plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	.plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	.plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	.plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	.plugged/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(plug-preview)	autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
ALWAYS	.plugged/vim-snippets/pythonx/javascript_snippets.py	/^ALWAYS = 'always'$/;"	v
AUTHOR	.plugged/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
Add	.plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	struct:fzf.ChunkCache
Added `--ansi` option (#150)	.plugged/fzf/CHANGELOG.md	/^#### Added `--ansi` option (#150)$/;"	t	subsection:CHANGELOG""0.9.5""New features
Added `--expect` option (#163)	.plugged/fzf/CHANGELOG.md	/^#### Added `--expect` option (#163)$/;"	t	subsection:CHANGELOG""0.9.6""New features
Added `--tac` option to reverse the order of the input.	.plugged/fzf/CHANGELOG.md	/^#### Added `--tac` option to reverse the order of the input.$/;"	t	subsection:CHANGELOG""0.9.4""New features
Advanced configuration	.plugged/vim-transparent/README.md	/^### Advanced configuration$/;"	S	section:Screenshots""Configuration
Advanced customization	.plugged/fzf.vim/README.md	/^### Advanced customization$/;"	S	section:fzf :heart: vim""Customization
Advanced fzf examples	.plugged/fzf/ADVANCED.md	/^Advanced fzf examples$/;"	c
Advanced topics	.plugged/fzf/README.md	/^Advanced topics$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Airline theme	.plugged/gruvbox/README.md	/^### Airline theme$/;"	S	section:Screenshots
Algo	.plugged/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo	typeref:typename:func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)
Alt	.plugged/fzf/src/tui/tui.go	/^	Alt$/;"	c	package:tui
AltBS	.plugged/fzf/src/tui/tui.go	/^	AltBS$/;"	c	package:tui
AltDown	.plugged/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltKey	.plugged/fzf/src/tui/tui.go	/^func AltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
AltLeft	.plugged/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	.plugged/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltSDown	.plugged/fzf/src/tui/tui.go	/^	AltSDown$/;"	c	package:tui
AltSLeft	.plugged/fzf/src/tui/tui.go	/^	AltSLeft$/;"	c	package:tui
AltSRight	.plugged/fzf/src/tui/tui.go	/^	AltSRight$/;"	c	package:tui
AltSUp	.plugged/fzf/src/tui/tui.go	/^	AltSUp$/;"	c	package:tui
AltUp	.plugged/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
Alternatives	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Alternatives$/;"	c
Analysis	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Analysis$/;"	c
Ansi	.plugged/fzf/src/options.go	/^	Ansi         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
As Vim plugin	.plugged/fzf/README.md	/^### As Vim plugin$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
AsEvent	.plugged/fzf/src/tui/tui.go	/^func (t EventType) AsEvent() Event {$/;"	f	type:tui.EventType	typeref:typename:Event
AsString	.plugged/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	struct:fzf.Item	typeref:typename:string
AsString	.plugged/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
AsUint16	.plugged/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util	typeref:typename:uint16
AtomicBool	.plugged/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attention	.plugged/gruvbox/README.md	/^Attention$/;"	s
Attr	.plugged/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	.plugged/fzf/src/tui/tcell.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	.plugged/fzf/src/tui/tui.go	/^	Attr  Attr$/;"	m	struct:tui.ColorAttr	typeref:typename:Attr
Attr	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f	struct:tui.ColorPair	typeref:typename:Attr
AttrClear	.plugged/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 9)$/;"	c	package:tui
AttrClear	.plugged/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	.plugged/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	.plugged/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrUndefined	.plugged/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
AttrUndefined	.plugged/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
Automatic test setup	.plugged/delimitMate/test/README.md	/^# Automatic test setup$/;"	c
BASE	.plugged/fzf/test/test_go.rb	/^BASE = File.expand_path('..', __dir__)$/;"	C
BASE_PATH	.plugged/editorconfig-vim/tests/plugin/spec/editorconfig_spec.rb	/^BASE_PATH = File.expand_path('..\/plugin_tests\/test_files\/', __FILE__)$/;"	C
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYLOONG64)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYRISCV64)$/;"	m
BINARY	.plugged/fzf/Makefile	/^	BINARY := $(BINARYS390)$/;"	m
BINARY32	.plugged/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	.plugged/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	.plugged/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	.plugged/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	.plugged/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	.plugged/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYLOONG64	.plugged/fzf/Makefile	/^BINARYLOONG64  := fzf-$(GOOS)_loong64$/;"	m
BINARYPPC64LE	.plugged/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BINARYRISCV64	.plugged/fzf/Makefile	/^BINARYRISCV64  := fzf-$(GOOS)_riscv64$/;"	m
BINARYS390	.plugged/fzf/Makefile	/^BINARYS390     := fzf-$(GOOS)_s390x$/;"	m
BSpace	.plugged/fzf/src/tui/tui.go	/^	BSpace$/;"	c	package:tui
BTab	.plugged/fzf/src/tui/tui.go	/^	BTab$/;"	c	package:tui
BUILD_FLAGS	.plugged/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -t/;"	m
BUILD_INVERTED_INDEX	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BackwardEOF	.plugged/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c	package:tui
BenchmarkExtractColor	.plugged/fzf/src/ansi_test.go	/^func BenchmarkExtractColor(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence	.plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence_Regex	.plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence_Regex(b *testing.B) {$/;"	f	package:fzf
Bg	.plugged/fzf/src/tui/tui.go	/^	Bg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Bg	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
Black	.plugged/fzf/src/options.go	/^	Black        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Blink	.plugged/fzf/src/tui/dummy.go	/^	Blink         = Attr(1 << 4)$/;"	c	package:tui
Blink	.plugged/fzf/src/tui/tcell.go	/^	Blink              = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	.plugged/fzf/src/tui/dummy.go	/^	Blink2        = Attr(1 << 5)$/;"	c	package:tui
Bold	.plugged/fzf/src/options.go	/^	Bold         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bold	.plugged/fzf/src/tui/dummy.go	/^	Bold          = Attr(1)$/;"	c	package:tui
Bold	.plugged/fzf/src/tui/tcell.go	/^	Bold          Attr = Attr(tcell.AttrBold)$/;"	c	package:tui	typeref:type:Attr
Bookmark	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
Border	.plugged/fzf/src/tui/tui.go	/^	Border       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderBold	.plugged/fzf/src/tui/tui.go	/^	BorderBold$/;"	c	package:tui
BorderBottom	.plugged/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c	package:tui
BorderCharacter	.plugged/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t	package:tui	typeref:typename:int
BorderDouble	.plugged/fzf/src/tui/tui.go	/^	BorderDouble$/;"	c	package:tui
BorderHorizontal	.plugged/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderLabel	.plugged/fzf/src/options.go	/^	BorderLabel  labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
BorderLabel	.plugged/fzf/src/tui/tui.go	/^	BorderLabel  ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderLeft	.plugged/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c	package:tui
BorderNone	.plugged/fzf/src/tui/tui.go	/^	BorderNone BorderShape = iota$/;"	c	package:tui	typeref:type:BorderShape
BorderRight	.plugged/fzf/src/tui/tui.go	/^	BorderRight$/;"	c	package:tui
BorderRounded	.plugged/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c	package:tui
BorderShape	.plugged/fzf/src/options.go	/^	BorderShape  tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
BorderShape	.plugged/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t	package:tui	typeref:typename:int
BorderSharp	.plugged/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c	package:tui
BorderStyle	.plugged/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	s	package:tui
BorderTop	.plugged/fzf/src/tui/tui.go	/^	BorderTop$/;"	c	package:tui
BorderVertical	.plugged/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c	package:tui
Branches	.plugged/fzf/ADVANCED.md	/^### Branches$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Bug fixes	.plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.11
Bug fixes	.plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.12
Bug fixes	.plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.13
Bug fixes	.plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.5
Bug fixes	.plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.6
Bug fixes	.plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.7
Bug fixes	.plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.8
Bugs and Feature Requests	.plugged/editorconfig-vim/README.md	/^## Bugs and Feature Requests$/;"	s	chapter:EditorConfig Vim Plugin
Build instructions	.plugged/fzf/BUILD.md	/^Build instructions$/;"	s	chapter:Building fzf
BuildPattern	.plugged/fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf	typeref:typename:*Pattern
Building fzf	.plugged/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	.plugged/fzf/README.md	/^Building fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
ByOrder	.plugged/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf	typeref:typename:[]Offset
ByRelevance	.plugged/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf	typeref:typename:[]Result
ByRelevanceTac	.plugged/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf	typeref:typename:[]Result
Byte	.plugged/fzf/src/tui/tui.go	/^func (t EventType) Byte() byte {$/;"	f	type:tui.EventType	typeref:typename:byte
Bytes	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	struct:util.Chars	typeref:typename:[]byte
CFill	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
CFill	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
CFill	.plugged/fzf/src/tui/tui.go	/^	CFill(fg Color, bg Color, attr Attr, text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
CHANGELOG	.plugged/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
COMPREPLY=	.plugged/fzf/shell/completion.bash	/^    COMPREPLY=()$/;"	f
COMPREPLY=	.plugged/fzf/shell/completion.bash	/^  COMPREPLY=()$/;"	f
CPrint	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.LightWindow
CPrint	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.TcellWindow
CPrint	.plugged/fzf/src/tui/tui.go	/^	CPrint(color ColorPair, text string)$/;"	n	interface:tui.Window
CSCOPE_ARGS	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CTEST_CUSTOM_TESTS_IGNORE	.plugged/editorconfig-vim/tests/core/CTestCustom.cmake	/^    set(CTEST_CUSTOM_TESTS_IGNORE ${CTEST_CUSTOM_TESTS_IGNORE} g_utf_8_char)$/;"	v
CTEST_CUSTOM_TESTS_IGNORE	.plugged/editorconfig-vim/tests/core/CTestCustom.cmake	/^    set(CTEST_CUSTOM_TESTS_IGNORE ${CTEST_CUSTOM_TESTS_IGNORE} min_supported_value_length)$/;"	v
CTEST_CUSTOM_TESTS_IGNORE	.plugged/editorconfig-vim/tests/core/CTestCustom.cmake	/^    set(CTEST_CUSTOM_TESTS_IGNORE ${CTEST_CUSTOM_TESTS_IGNORE} utf_8_char)$/;"	v
CacheKey	.plugged/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
Can I have the same NERDTree on every tab automatically?	.plugged/nerdtree/README.markdown	/^### Can I have the same NERDTree on every tab automatically?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Can NERDTree access remote files via scp or ftp?	.plugged/nerdtree/README.markdown	/^### Can NERDTree access remote files via scp or ftp?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Case	.plugged/fzf/src/options.go	/^	Case         Case$/;"	m	struct:fzf.Options	typeref:typename:Case
Case	.plugged/fzf/src/options.go	/^type Case int$/;"	t	package:fzf	typeref:typename:int
CaseIgnore	.plugged/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	.plugged/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	.plugged/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf	typeref:type:Case
Change	.plugged/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Change Log	.plugged/gruvbox/CHANGELOG.md	/^# Change Log$/;"	c
Changed behavior on `--no-sort`	.plugged/fzf/CHANGELOG.md	/^#### Changed behavior on `--no-sort`$/;"	t	subsection:CHANGELOG""0.9.4""*Backward incompatible changes*
Changelogs update	.plugged/hop.nvim/CONTRIBUTING.md	/^## Changelogs update$/;"	s	chapter:Release process
Char	.plugged/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event	typeref:typename:rune
Chars	.plugged/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
Chat	.plugged/hop.nvim/README.md	/^# Chat$/;"	c
Checking for Final Newline	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/insert_final_newline.rst	/^Checking for Final Newline$/;"	s	chapter:Insert Final Newline Property
Chunk	.plugged/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	.plugged/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	.plugged/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
CleanUp	.plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	.plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f	struct:fzf.ChunkList
Clear	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()                             {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	struct:tui.LightRenderer
Clear	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	.plugged/fzf/src/tui/tui.go	/^	Clear()$/;"	n	interface:tui.Renderer
Clear	.plugged/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	type:util.Events
ClearAllBookmarks	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearBackground	.plugged/vim-transparent/plugin/background.vim	/^    command -bar -nargs=0 ClearBackground call background#clear_background()$/;"	c
ClearBookmarks	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
ClearOnExit	.plugged/fzf/src/options.go	/^	ClearOnExit  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Close	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()                             {}$/;"	f	unknown:tui.FullscreenRenderer
Close	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	struct:tui.LightRenderer
Close	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f	struct:tui.LightWindow
Close	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f	struct:tui.TcellWindow
Close	.plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Renderer
Close	.plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Window
Coding	.plugged/hop.nvim/CONTRIBUTING.md	/^## Coding$/;"	s	chapter:Conventions
ColBorder	.plugged/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColBorderLabel	.plugged/fzf/src/tui/tui.go	/^	ColBorderLabel          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrent	.plugged/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursor	.plugged/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursorEmpty	.plugged/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMatch	.plugged/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelected	.plugged/fzf/src/tui/tui.go	/^	ColCurrentSelected      ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelectedEmpty	.plugged/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursor	.plugged/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursorEmpty	.plugged/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColDisabled	.plugged/fzf/src/tui/tui.go	/^	ColDisabled             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeader	.plugged/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInfo	.plugged/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInput	.plugged/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMatch	.plugged/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColNormal	.plugged/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreview	.plugged/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewBorder	.plugged/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewLabel	.plugged/fzf/src/tui/tui.go	/^	ColPreviewLabel         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPrompt	.plugged/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColScrollbar	.plugged/fzf/src/tui/tui.go	/^	ColScrollbar            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelected	.plugged/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSeparator	.plugged/fzf/src/tui/tui.go	/^	ColSeparator            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSpinner	.plugged/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
Color	.plugged/fzf/src/tui/tui.go	/^	Color Color$/;"	m	struct:tui.ColorAttr	typeref:typename:Color
Color	.plugged/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui	typeref:typename:int32
Color themes	.plugged/fzf/ADVANCED.md	/^Color themes$/;"	s	chapter:Advanced fzf examples
ColorAttr	.plugged/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	s	package:tui
ColorPair	.plugged/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorTheme	.plugged/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
Colored	.plugged/fzf/src/tui/tui.go	/^	Colored      bool$/;"	m	struct:tui.ColorTheme	typeref:typename:bool
Colors	.plugged/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	struct:fzf.Item	typeref:typename:[]ansiOffset
Command-local options	.plugged/fzf.vim/README.md	/^### Command-local options$/;"	S	section:fzf :heart: vim""Customization
Commands	.plugged/fzf.vim/README.md	/^Commands$/;"	s	chapter:fzf :heart: vim
Commands	.plugged/indentLine/README.md	/^### Commands$/;"	S	section:indentLine""Customization
Commentary	.plugged/vim-commentary/plugin/commentary.vim	/^command! -range -bar -bang Commentary call s:go(<line1>,<line2>,<bang>0)$/;"	c
Commit atomicity	.plugged/hop.nvim/CONTRIBUTING.md	/^### Commit atomicity$/;"	S	section:Conventions""Git
Commit hashes	.plugged/fzf/ADVANCED.md	/^### Commit hashes$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Comparable	.plugged/fzf/src/tui/tui.go	/^func (e Event) Comparable() Event {$/;"	f	unknown:tui.Event	typeref:typename:Event
Completion functions	.plugged/fzf.vim/README.md	/^Completion functions$/;"	s	chapter:fzf :heart: vim
CompletionTest	.plugged/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
Configuration	.plugged/fzf/README-VIM.md	/^### Configuration$/;"	S	section:FZF Vim integration""`:FZF[!]`
Configuration	.plugged/neosnippet.vim/README.md	/^Configuration$/;"	s	chapter:Neosnippet
Configuration	.plugged/vim-transparent/README.md	/^## Configuration$/;"	s	chapter:Screenshots
Constrain	.plugged/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util	typeref:typename:int
Constrain32	.plugged/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util	typeref:typename:int32
Contents	.plugged/vim-snippets/README.md	/^Contents$/;"	s	chapter:snipMate & UltiSnip Snippets
Context	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Context$/;"	c
Contrast options	.plugged/gruvbox/README.md	/^Contrast options$/;"	s
Contributing	.plugged/hop.nvim/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.plugged/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	.plugged/vim-surround/README.markdown	/^## Contributing$/;"	s	chapter:surround.vim
Contributions	.plugged/gruvbox/README.md	/^Contributions$/;"	s
Contributors	.plugged/tagbar/README.md	/^## Contributors$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Conventions	.plugged/hop.nvim/CONTRIBUTING.md	/^# Conventions$/;"	c
CopyRunes	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune) {$/;"	f	struct:util.Chars
CountItems	.plugged/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf	typeref:typename:int
Create_New_Ipynb	init.vim	/^function Create_New_Ipynb()$/;"	f
Criteria	.plugged/fzf/src/options.go	/^	Criteria     []criterion$/;"	m	struct:fzf.Options	typeref:typename:[]criterion
CtrlA	.plugged/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAlt	.plugged/fzf/src/tui/tui.go	/^	CtrlAlt$/;"	c	package:tui
CtrlAltKey	.plugged/fzf/src/tui/tui.go	/^func CtrlAltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
CtrlB	.plugged/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlBackSlash	.plugged/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c	package:tui
CtrlC	.plugged/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlCaret	.plugged/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c	package:tui
CtrlD	.plugged/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlE	.plugged/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	.plugged/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	.plugged/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	.plugged/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	.plugged/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	.plugged/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	.plugged/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlM	.plugged/fzf/src/tui/tui.go	/^	CtrlM$/;"	c	package:tui
CtrlN	.plugged/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	.plugged/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	.plugged/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	.plugged/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	.plugged/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlRightBracket	.plugged/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c	package:tui
CtrlS	.plugged/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSlash	.plugged/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c	package:tui
CtrlSpace	.plugged/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	.plugged/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	.plugged/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	.plugged/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	.plugged/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	.plugged/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	.plugged/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	.plugged/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
Current	.plugged/fzf/src/tui/tui.go	/^	Current      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
CurrentMatch	.plugged/fzf/src/tui/tui.go	/^	CurrentMatch ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Cursor	.plugged/fzf/src/tui/tui.go	/^	Cursor       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Custom completion	.plugged/fzf.vim/README.md	/^Custom completion$/;"	s	chapter:fzf :heart: vim
Custom fuzzy completion	.plugged/fzf/README.md	/^### Custom fuzzy completion$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Custom statusline	.plugged/fzf.vim/README.md	/^### Custom statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Customization	.plugged/fzf.vim/README.md	/^Customization$/;"	s	chapter:fzf :heart: vim
Customization	.plugged/indentLine/README.md	/^## Customization$/;"	s	chapter:indentLine
Cycle	.plugged/fzf/src/options.go	/^	Cycle        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
D	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^filter global:D($file = $debug) {$/;"	f
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DB_FILE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	.plugged/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo	typeref:typename:bool
DEFAULT_TIMEOUT	.plugged/fzf/test/test_go.rb	/^DEFAULT_TIMEOUT = 10$/;"	C
DESCRIPTION	.plugged/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf-tmux
DESCRIPTION	.plugged/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
DESTDIR	.plugged/delimitMate/Makefile	/^DESTDIR  =  $(HOME)\/.vim$/;"	m
DIR	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^$global:DIR = $PSScriptRoot$/;"	v
DOC	.plugged/delimitMate/Makefile	/^DOC      =  $(wildcard doc\/*.txt)$/;"	m
Dark mode	.plugged/gruvbox/README.md	/^### Dark mode$/;"	S	section:Palette
Dark mode	.plugged/gruvbox/README.md	/^### Dark mode$/;"	S	section:Screenshots
Dark256	.plugged/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DarkBg	.plugged/fzf/src/tui/tui.go	/^	DarkBg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Default16	.plugged/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DefaultBorderShape	.plugged/fzf/src/tui/dummy.go	/^var DefaultBorderShape BorderShape = BorderRounded$/;"	v	package:tui	typeref:typename:BorderShape
DefaultBorderShape	.plugged/fzf/src/tui/tcell.go	/^var DefaultBorderShape BorderShape = BorderSharp$/;"	v	package:tui	typeref:typename:BorderShape
Del	.plugged/fzf/src/tui/tui.go	/^	Del$/;"	c	package:tui
DelimitMateOff	.plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOff call s:setup(0)$/;"	c
DelimitMateOn	.plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOn call s:setup(1)$/;"	c
DelimitMateReload	.plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateReload call s:setup(1)$/;"	c
DelimitMateSwitch	.plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateSwitch call s:setup(2)$/;"	c
DelimitMateTest	.plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateTest call s:test()$/;"	c
Delimiter	.plugged/fzf/src/options.go	/^	Delimiter    Delimiter$/;"	m	struct:fzf.Options	typeref:typename:Delimiter
Delimiter	.plugged/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	.plugged/fzf/README.md	/^### Demo$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Dependencies	.plugged/fzf.vim/README.md	/^### Dependencies$/;"	S	section:fzf :heart: vim""Installation
Dependencies	.plugged/tagbar/README.md	/^## Dependencies$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Dim	.plugged/fzf/src/tui/dummy.go	/^	Dim           = Attr(1 << 1)$/;"	c	package:tui
Dim	.plugged/fzf/src/tui/tcell.go	/^	Dim                = Attr(tcell.AttrDim)$/;"	c	package:tui
Disable for a specific filetype	.plugged/editorconfig-vim/README.md	/^### Disable for a specific filetype$/;"	S	section:EditorConfig Vim Plugin""Selected Options
Disable rules	.plugged/editorconfig-vim/README.md	/^### Disable rules$/;"	S	section:EditorConfig Vim Plugin""Selected Options
Disabled	.plugged/fzf/src/tui/tui.go	/^	Disabled     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Disclaimer and why this document	.plugged/hop.nvim/CONTRIBUTING.md	/^# Disclaimer and why this document$/;"	c
Documentation	.plugged/gruvbox/README.md	/^Documentation$/;"	s
DoneParseArgs	.plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Double	.plugged/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
DoubleClick	.plugged/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
Down	.plugged/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Down	.plugged/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DrawHBorder	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) DrawHBorder() {$/;"	f	struct:tui.LightWindow
DrawHBorder	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) DrawHBorder() {$/;"	f	struct:tui.TcellWindow
DrawHBorder	.plugged/fzf/src/tui/tui.go	/^	DrawHBorder()$/;"	n	interface:tui.Window
DurWithin	.plugged/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util	typeref:typename:time.Duration
Dynamic reloading of the list	.plugged/fzf/ADVANCED.md	/^Dynamic reloading of the list$/;"	s	chapter:Advanced fzf examples
EDITORCONFIG_CMD	.plugged/editorconfig-vim/tests/core/CMakeLists.txt	/^    set(EDITORCONFIG_CMD "${CMAKE_SOURCE_DIR}\/editorconfig")$/;"	v
EDITORCONFIG_CMD	.plugged/editorconfig-vim/tests/core/CMakeLists.txt	/^    set(EDITORCONFIG_CMD "${CMAKE_SOURCE_DIR}\/editorconfig.bat")$/;"	v
EDITORCONFIG_CMD	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^    set(EDITORCONFIG_CMD "editorconfig" CACHE STRING "editorconfig command.")$/;"	v
EDITORCONFIG_CMD_IS_TARGET	.plugged/editorconfig-vim/tests/core/CMakeLists.txt	/^set(EDITORCONFIG_CMD_IS_TARGET FALSE)$/;"	v
EDITORCONFIG_CMD_IS_TARGET	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^    set(EDITORCONFIG_CMD_IS_TARGET OFF CACHE BOOL$/;"	v
ENVIRONMENT	.plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
EOF	.plugged/editorconfig-vim/tests/core/editorconfig	/^helpstr=$(cat<<'EOF'$/;"	h
EOF	.plugged/fzf/install	/^  cat << EOF$/;"	h
EOF	.plugged/fzf/install	/^  cat > "$src" << EOF$/;"	h
EOF	.plugged/fzf/install	/^  fish << EOF$/;"	h
EOF	.plugged/fzf/uninstall	/^  cat << EOF$/;"	h
EOT	.plugged/editorconfig-vim/tests/travis-test.sh	/^    cat <<EOT$/;"	h
ESC	.plugged/fzf/src/tui/tui.go	/^	ESC$/;"	c	package:tui
EXIT	.plugged/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED	.plugged/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
EditBookmarks	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 EditBookmarks call g:NERDTreeBookmark.Edit()$/;"	c
EditorConfig Vim Plugin	.plugged/editorconfig-vim/README.md	/^# EditorConfig Vim Plugin$/;"	c
EditorConfigDisable	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^command! EditorConfigDisable call s:EditorConfigEnable(0)$/;"	c
EditorConfigEnable	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^command! EditorConfigEnable call s:EditorConfigEnable(1)$/;"	c
EditorConfigReload	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^command! EditorConfigReload call s:UseConfigFiles() " Reload EditorConfig files$/;"	c
Ellipsis	.plugged/fzf/src/options.go	/^	Ellipsis     string$/;"	m	struct:fzf.Options	typeref:typename:string
EmptyMerger	.plugged/fzf/src/merger.go	/^var EmptyMerger = NewMerger(nil, [][]Result{}, false, false)$/;"	v	package:fzf
EmptyTheme	.plugged/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Enabled	.plugged/fzf/src/terminal.go	/^func (s resumableState) Enabled() bool {$/;"	f	type:fzf.resumableState	typeref:typename:bool
Enclose	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
Enclose	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
Enclose	.plugged/fzf/src/tui/tui.go	/^	Enclose(y int, x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
End	.plugged/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result	typeref:typename:int
End	.plugged/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
Environment variables	.plugged/fzf/README.md	/^### Environment variables$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Environment variables / Aliases	.plugged/fzf/README.md	/^### Environment variables \/ Aliases$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
EqualMatch	.plugged/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo	typeref:typename:(Result, *[]int)
Erase	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	struct:tui.LightWindow
Erase	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	struct:tui.TcellWindow
Erase	.plugged/fzf/src/tui/tui.go	/^	Erase()$/;"	n	interface:tui.Window
Event	.plugged/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	.plugged/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	.plugged/fzf/src/tui/tui.go	/^type EventType int$/;"	t	package:tui	typeref:typename:int
EventType	.plugged/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util	typeref:typename:int
Events	.plugged/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t	package:util	typeref:typename:map[EventType]interface{}
EvtHeader	.plugged/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtQuit	.plugged/fzf/src/constants.go	/^	EvtQuit$/;"	c	package:fzf
EvtReadFin	.plugged/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	.plugged/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	.plugged/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
EvtReadNew	.plugged/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util	typeref:typename:EventType
EvtReady	.plugged/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	.plugged/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	.plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	.plugged/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	.plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	.plugged/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	.plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExactMatchNaive	.plugged/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo	typeref:typename:(Result, *[]int)
Example: Advanced ripgrep integration	.plugged/fzf.vim/README.md	/^#### Example: Advanced ripgrep integration$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: Customizing `Files` command	.plugged/fzf.vim/README.md	/^#### Example: Customizing `Files` command$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `Rg` command with preview window	.plugged/fzf.vim/README.md	/^#### Example: `Rg` command with preview window$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `git grep` wrapper	.plugged/fzf.vim/README.md	/^#### Example: `git grep` wrapper$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Examples	.plugged/fzf/README-VIM.md	/^#### Examples$/;"	t	subsection:FZF Vim integration""`:FZF[!]`""Configuration
Examples	.plugged/fzf/README.md	/^Examples$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Excluded patterns	.plugged/editorconfig-vim/README.md	/^### Excluded patterns$/;"	S	section:EditorConfig Vim Plugin""Selected Options
ExecCommand	.plugged/fzf/src/util/util_unix.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommand	.plugged/fzf/src/util/util_windows.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	.plugged/fzf/src/util/util_unix.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	.plugged/fzf/src/util/util_windows.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
Executing external programs	.plugged/fzf/README.md	/^### Executing external programs$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Exit0	.plugged/fzf/src/options.go	/^	Exit0        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Expect	.plugged/fzf/src/options.go	/^	Expect       map[tui.Event]string$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event]string
Explanation of `g:fzf_colors`	.plugged/fzf/README-VIM.md	/^##### Explanation of `g:fzf_colors`$/;"	T	subsubsection:FZF Vim integration""`:FZF[!]`""Configuration""Examples
Extended	.plugged/fzf/src/options.go	/^	Extended     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
F1	.plugged/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	.plugged/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	.plugged/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	.plugged/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	.plugged/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	.plugged/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	.plugged/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	.plugged/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	.plugged/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	.plugged/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	.plugged/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	.plugged/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAQ	.plugged/vim-commentary/README.markdown	/^## FAQ$/;"	s	chapter:commentary.vim
FAQ	.plugged/vim-surround/README.markdown	/^## FAQ$/;"	s	chapter:surround.vim
FIELD	.plugged/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FILE	.plugged/fzf/test/test_go.rb	/^FILE = File.expand_path(__FILE__)$/;"	C
FILENAME	.plugged/delimitMate/Makefile	/^FILENAME =  $(NAME)-$(VERSION)$/;"	m
FILESIZE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	.plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^	set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZF	.plugged/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF	.plugged/fzf/test/test_go.rb	/^FZF = "FZF_DEFAULT_OPTS=--no-scrollbar FZF_DEFAULT_COMMAND= #{BASE}\/bin\/fzf"$/;"	C
FZF Vim integration	.plugged/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
Features	.plugged/gruvbox/README.md	/^Features$/;"	s
Features	.plugged/hop.nvim/README.md	/^# Features$/;"	c
Fg	.plugged/fzf/src/tui/tui.go	/^	Fg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Fg	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
FileWord	.plugged/fzf/src/options.go	/^	FileWord     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Filename	.plugged/neosnippet.vim/autoload/neosnippet/init.vim	/^    function! Filename(...) abort$/;"	f
Files and directories	.plugged/fzf/README.md	/^### Files and directories$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Files listed in `git status`	.plugged/fzf/ADVANCED.md	/^### Files listed in `git status`$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Fill	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
Fill	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
Fill	.plugged/fzf/src/tui/tui.go	/^	Fill(text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
FillContinue	.plugged/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui	typeref:type:FillReturn
FillNextLine	.plugged/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	.plugged/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui	typeref:typename:int
FillSuspend	.plugged/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	.plugged/fzf/src/options.go	/^	Filter       *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Find-Vim	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^function global:Find-Vim$/;"	f
Finding Trailing Whitespace	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Finding Trailing Whitespace$/;"	s	chapter:Trim Trailing Whitespace Property
FinishFill	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	struct:tui.LightWindow
FinishFill	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	struct:tui.TcellWindow
FinishFill	.plugged/fzf/src/tui/tui.go	/^	FinishFill()$/;"	n	interface:tui.Window
Fish shell	.plugged/fzf/README.md	/^#### Fish shell$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Fixes and improvements	.plugged/fzf/CHANGELOG.md	/^### Fixes and improvements$/;"	S	section:CHANGELOG""0.10.2
Focus	.plugged/fzf/src/tui/tui.go	/^	Focus$/;"	c	package:tui
Font patching	.plugged/indentLine/README.md	/^### Font patching$/;"	S	section:indentLine""Customization
Force	.plugged/fzf/src/terminal.go	/^func (s *resumableState) Force(flag bool) {$/;"	f	type:fzf.resumableState
Frequently Asked Questions	.plugged/nerdtree/README.markdown	/^## Frequently Asked Questions$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
FullscreenRenderer	.plugged/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
Future ideas and examples	.plugged/vim-snippets/README.md	/^Future ideas and examples$/;"	s	chapter:snipMate & UltiSnip Snippets
Future work	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Future work$/;"	c
Fuzzy	.plugged/fzf/src/options.go	/^	Fuzzy        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fuzzy completion for bash and zsh	.plugged/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
FuzzyAlgo	.plugged/fzf/src/options.go	/^	FuzzyAlgo    algo.Algo$/;"	m	struct:fzf.Options	typeref:typename:algo.Algo
FuzzyMatchV1	.plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo	typeref:typename:(Result, *[]int)
FuzzyMatchV2	.plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo	typeref:typename:(Result, *[]int)
GO	.plugged/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	.plugged/fzf/Makefile	/^GOOS           ?= $(word 1, $(subst \/, " ", $(word 4, $(shell go version))))$/;"	m
GTAGS_EXE	.plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^	set GTAGS_EXE=%~2$/;"	v
Generating fzf color theme from Vim color schemes	.plugged/fzf/ADVANCED.md	/^### Generating fzf color theme from Vim color schemes$/;"	S	section:Advanced fzf examples""Color themes
Get	.plugged/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Get	.plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Get	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	struct:util.Chars	typeref:typename:rune
GetChar	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
GetChar	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	.plugged/fzf/src/tui/tui.go	/^	GetChar() Event$/;"	n	interface:tui.Renderer	typeref:typename:Event
Getting Started	.plugged/nerdtree/README.markdown	/^## Getting Started$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Getting help	.plugged/vim-snippets/README.md	/^Getting help$/;"	s	chapter:snipMate & UltiSnip Snippets
Getting started	.plugged/hop.nvim/README.md	/^# Getting started$/;"	c
Git	.plugged/hop.nvim/CONTRIBUTING.md	/^## Git$/;"	s	chapter:Conventions
Git message	.plugged/hop.nvim/CONTRIBUTING.md	/^### Git message$/;"	S	section:Conventions""Git
Git tag	.plugged/hop.nvim/CONTRIBUTING.md	/^## Git tag$/;"	s	chapter:Release process
Global options	.plugged/fzf.vim/README.md	/^### Global options$/;"	S	section:fzf :heart: vim""Customization
Global options supported by `fzf#wrap`	.plugged/fzf/README-VIM.md	/^### Global options supported by `fzf#wrap`$/;"	S	section:FZF Vim integration""`fzf#wrap`
GruvboxHlsHideCursor	.plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsHideCursor()$/;"	f
GruvboxHlsShowCursor	.plugged/gruvbox/colors/gruvbox.vim	/^function! GruvboxHlsShowCursor()$/;"	f
Gutentags	.plugged/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	.plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	.plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	.plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	.plugged/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
Gutter	.plugged/fzf/src/tui/tui.go	/^	Gutter       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HasBg	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
HasFullscreenRenderer	.plugged/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasFullscreenRenderer	.plugged/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasRight	.plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasRight() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
HasTop	.plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasTop() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
Header	.plugged/fzf/src/options.go	/^	Header       []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Header	.plugged/fzf/src/tui/tui.go	/^	Header       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderFirst	.plugged/fzf/src/options.go	/^	HeaderFirst  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HeaderLines	.plugged/fzf/src/options.go	/^	HeaderLines  int$/;"	m	struct:fzf.Options	typeref:typename:int
Height	.plugged/fzf/src/options.go	/^	Height       heightSpec$/;"	m	struct:fzf.Options	typeref:typename:heightSpec
Height	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Height	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Height	.plugged/fzf/src/tui/tui.go	/^	Height() int$/;"	n	interface:tui.Window	typeref:typename:int
HexToColor	.plugged/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui	typeref:typename:Color
Hide statusline	.plugged/fzf.vim/README.md	/^### Hide statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Hide statusline	.plugged/fzf/README-VIM.md	/^### Hide statusline$/;"	S	section:FZF Vim integration""Tips
Historical notes	.plugged/vim-snippets/README.md	/^Historical notes$/;"	s	chapter:snipMate & UltiSnip Snippets
History	.plugged/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	.plugged/fzf/src/options.go	/^	History      *History$/;"	m	struct:fzf.Options	typeref:typename:*History
Home	.plugged/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
Hop hint modes refined: an extensible model	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Hop hint modes refined: an extensible model$/;"	c
HopAnywhere	.plugged/hop.nvim/plugin/hop.vim	/^command! HopAnywhere              lua require'hop'.hint_anywhere()$/;"	c
HopAnywhereAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopAnywhereAC            lua require'hop'.hint_anywhere({ direction = require'hop.hint'/;"	c
HopAnywhereBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopAnywhereBC            lua require'hop'.hint_anywhere({ direction = require'hop.hint'/;"	c
HopAnywhereCurrentLine	.plugged/hop.nvim/plugin/hop.vim	/^command! HopAnywhereCurrentLine   lua require'hop'.hint_anywhere({ current_line_only = true })$/;"	c
HopAnywhereCurrentLineAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopAnywhereCurrentLineAC lua require'hop'.hint_anywhere({ direction = require'hop.hint'/;"	c
HopAnywhereCurrentLineBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopAnywhereCurrentLineBC lua require'hop'.hint_anywhere({ direction = require'hop.hint'/;"	c
HopAnywhereMW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopAnywhereMW            lua require'hop'.hint_anywhere({ multi_windows = true })$/;"	c
HopChar1	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar1              lua require'hop'.hint_char1()$/;"	c
HopChar1AC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar1AC            lua require'hop'.hint_char1({ direction = require'hop.hint'.HintD/;"	c
HopChar1BC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar1BC            lua require'hop'.hint_char1({ direction = require'hop.hint'.HintD/;"	c
HopChar1CurrentLine	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar1CurrentLine   lua require'hop'.hint_char1({ current_line_only = true })$/;"	c
HopChar1CurrentLineAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar1CurrentLineAC lua require'hop'.hint_char1({ direction = require'hop.hint'.HintD/;"	c
HopChar1CurrentLineBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar1CurrentLineBC lua require'hop'.hint_char1({ direction = require'hop.hint'.HintD/;"	c
HopChar1MW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar1MW            lua require'hop'.hint_char1({ multi_windows = true })$/;"	c
HopChar2	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar2              lua require'hop'.hint_char2()$/;"	c
HopChar2AC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar2AC            lua require'hop'.hint_char2({ direction = require'hop.hint'.HintD/;"	c
HopChar2BC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar2BC            lua require'hop'.hint_char2({ direction = require'hop.hint'.HintD/;"	c
HopChar2CurrentLine	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar2CurrentLine   lua require'hop'.hint_char2({ current_line_only = true })$/;"	c
HopChar2CurrentLineAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar2CurrentLineAC lua require'hop'.hint_char2({ direction = require'hop.hint'.HintD/;"	c
HopChar2CurrentLineBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar2CurrentLineBC lua require'hop'.hint_char2({ direction = require'hop.hint'.HintD/;"	c
HopChar2MW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopChar2MW            lua require'hop'.hint_char2({ multi_windows = true })$/;"	c
HopLine	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLine   lua require'hop'.hint_lines()$/;"	c
HopLineAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLineAC lua require'hop'.hint_lines({ direction = require'hop.hint'.HintDirection.AFT/;"	c
HopLineBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLineBC lua require'hop'.hint_lines({ direction = require'hop.hint'.HintDirection.BEF/;"	c
HopLineMW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLineMW lua require'hop'.hint_lines({ multi_windows = true })$/;"	c
HopLineStart	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLineStart   lua require'hop'.hint_lines_skip_whitespace()$/;"	c
HopLineStartAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLineStartAC lua require'hop'.hint_lines_skip_whitespace({ direction = require'hop.hi/;"	c
HopLineStartBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLineStartBC lua require'hop'.hint_lines_skip_whitespace({ direction = require'hop.hi/;"	c
HopLineStartMW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopLineStartMW lua require'hop'.hint_lines_skip_whitespace({ multi_windows = true })$/;"	c
HopPattern	.plugged/hop.nvim/plugin/hop.vim	/^command! HopPattern              lua require'hop'.hint_patterns()$/;"	c
HopPatternAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopPatternAC            lua require'hop'.hint_patterns({ direction = require'hop.hint'./;"	c
HopPatternBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopPatternBC            lua require'hop'.hint_patterns({ direction = require'hop.hint'./;"	c
HopPatternCurrentLine	.plugged/hop.nvim/plugin/hop.vim	/^command! HopPatternCurrentLine   lua require'hop'.hint_patterns({ current_line_only = true })$/;"	c
HopPatternCurrentLineAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopPatternCurrentLineAC lua require'hop'.hint_patterns({ direction = require'hop.hint'./;"	c
HopPatternCurrentLineBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopPatternCurrentLineBC lua require'hop'.hint_patterns({ direction = require'hop.hint'./;"	c
HopPatternMW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopPatternMW            lua require'hop'.hint_patterns({ multi_windows = true })$/;"	c
HopVertical	.plugged/hop.nvim/plugin/hop.vim	/^command! HopVertical   lua require'hop'.hint_vertical()$/;"	c
HopVerticalAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopVerticalAC lua require'hop'.hint_vertical({ direction = require'hop.hint'.HintDirect/;"	c
HopVerticalBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopVerticalBC lua require'hop'.hint_vertical({ direction = require'hop.hint'.HintDirect/;"	c
HopVerticalMW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopVerticalMW lua require'hop'.hint_vertical({ multi_windows = true })$/;"	c
HopWord	.plugged/hop.nvim/plugin/hop.vim	/^command! HopWord              lua require'hop'.hint_words()$/;"	c
HopWordAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopWordAC            lua require'hop'.hint_words({ direction = require'hop.hint'.HintDi/;"	c
HopWordBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopWordBC            lua require'hop'.hint_words({ direction = require'hop.hint'.HintDi/;"	c
HopWordCurrentLine	.plugged/hop.nvim/plugin/hop.vim	/^command! HopWordCurrentLine   lua require'hop'.hint_words({ current_line_only = true })$/;"	c
HopWordCurrentLineAC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopWordCurrentLineAC lua require'hop'.hint_words({ direction = require'hop.hint'.HintDi/;"	c
HopWordCurrentLineBC	.plugged/hop.nvim/plugin/hop.vim	/^command! HopWordCurrentLineBC lua require'hop'.hint_words({ direction = require'hop.hint'.HintDi/;"	c
HopWordMW	.plugged/hop.nvim/plugin/hop.vim	/^command! HopWordMW            lua require'hop'.hint_words({ multi_windows = true })$/;"	c
Host names	.plugged/fzf/README.md	/^### Host names$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
How can I change the default arrows?	.plugged/nerdtree/README.markdown	/^### How can I change the default arrows?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I close Vim or a tab automatically when NERDTree is the last window?	.plugged/nerdtree/README.markdown	/^### How can I close Vim or a tab automatically when NERDTree is the last window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I map a specific key or shortcut to open NERDTree?	.plugged/nerdtree/README.markdown	/^### How can I map a specific key or shortcut to open NERDTree?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I prevent other buffers replacing NERDTree in its window?	.plugged/nerdtree/README.markdown	/^### How can I prevent other buffers replacing NERDTree in its window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How do I open NERDTree automatically when Vim starts?	.plugged/nerdtree/README.markdown	/^### How do I open NERDTree automatically when Vim starts?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How to make a change	.plugged/hop.nvim/CONTRIBUTING.md	/^# How to make a change$/;"	c
How?	.plugged/vim-gutentags/README.md	/^## How?$/;"	s	chapter:Gutentags
Hscroll	.plugged/fzf/src/options.go	/^	Hscroll      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HscrollOff	.plugged/fzf/src/options.go	/^	HscrollOff   int$/;"	m	struct:fzf.Options	typeref:typename:int
Hygiene	.plugged/hop.nvim/CONTRIBUTING.md	/^### Hygiene$/;"	S	section:Conventions""Git
I16	.plugged/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab	typeref:typename:[]int16
I32	.plugged/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab	typeref:typename:[]int32
INDEX_WHOLE_PROJECT	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Images	.plugged/vim-transparent/README.md	/^### Images$/;"	S	section:Screenshots""Configuration
Important note about versioning	.plugged/hop.nvim/README.md	/^### Important note about versioning$/;"	S	section:Getting started""Installation
Improvements	.plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.10
Improvements	.plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.3
Improvements	.plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.4
Improvements	.plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.5
IndentLinesDisable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesDisable call s:IndentLinesDisable()$/;"	c
IndentLinesDisable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesDisable let b:indentLine_enabled = 0 | call s:IndentLinesDisable()$/;"	c
IndentLinesEnable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesEnable call s:IndentLinesEnable()$/;"	c
IndentLinesEnable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar IndentLinesEnable let b:indentLine_enabled = 1 | call s:IndentLinesEnable()$/;"	c
IndentLinesReset	.plugged/indentLine/after/plugin/indentLine.vim	/^command! -nargs=? IndentLinesReset call s:ResetWidth(<f-args>)$/;"	c
IndentLinesToggle	.plugged/indentLine/after/plugin/indentLine.vim	/^command! -bar IndentLinesToggle call s:IndentLinesToggle()$/;"	c
Index	.plugged/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	struct:fzf.Item	typeref:typename:int32
Index	.plugged/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	struct:fzf.Result	typeref:typename:int32
Index	.plugged/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars	typeref:typename:int32
Info	.plugged/fzf/src/tui/tui.go	/^	Info         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InfoSep	.plugged/fzf/src/options.go	/^	InfoSep      string$/;"	m	struct:fzf.Options	typeref:typename:string
InfoStyle	.plugged/fzf/src/options.go	/^	InfoStyle    infoStyle$/;"	m	struct:fzf.Options	typeref:typename:infoStyle
Init	.plugged/fzf/src/algo/algo.go	/^func Init(scheme string) bool {$/;"	f	package:algo	typeref:typename:bool
Init	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init()                              {}$/;"	f	unknown:tui.FullscreenRenderer
Init	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() {$/;"	f	struct:tui.LightRenderer
Init	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() {$/;"	f	unknown:tui.FullscreenRenderer
Init	.plugged/fzf/src/tui/tui.go	/^	Init()$/;"	n	interface:tui.Renderer
Input	.plugged/fzf/src/terminal.go	/^func (t *Terminal) Input() (bool, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []rune)
Input	.plugged/fzf/src/tui/tui.go	/^	Input        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Insert	.plugged/fzf/src/tui/tui.go	/^	Insert$/;"	c	package:tui
Insert Final Newline Property	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/insert_final_newline.rst	/^Insert Final Newline Property$/;"	c
Install as Vim8 plugin	.plugged/editorconfig-vim/README.md	/^### Install as Vim8 plugin$/;"	S	section:EditorConfig Vim Plugin""Installation
Install with [Vundle][]	.plugged/editorconfig-vim/README.md	/^### Install with [Vundle][]$/;"	S	section:EditorConfig Vim Plugin""Installation
Install with [pathogen][]	.plugged/editorconfig-vim/README.md	/^### Install with [pathogen][]$/;"	S	section:EditorConfig Vim Plugin""Installation
Install with [vim-plug][]	.plugged/editorconfig-vim/README.md	/^### Install with [vim-plug][]$/;"	S	section:EditorConfig Vim Plugin""Installation
Install with the archive	.plugged/editorconfig-vim/README.md	/^### Install with the archive$/;"	S	section:EditorConfig Vim Plugin""Installation
Installation	.plugged/editorconfig-vim/README.md	/^## Installation$/;"	s	chapter:EditorConfig Vim Plugin
Installation	.plugged/fzf.vim/README.md	/^Installation$/;"	s	chapter:fzf :heart: vim
Installation	.plugged/fzf/README-VIM.md	/^Installation$/;"	s	chapter:FZF Vim integration
Installation	.plugged/fzf/README.md	/^Installation$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Installation	.plugged/hop.nvim/README.md	/^## Installation$/;"	s	chapter:Getting started
Installation	.plugged/indentLine/README.md	/^## Installation$/;"	s	chapter:indentLine
Installation	.plugged/neosnippet.vim/README.md	/^Installation$/;"	s	chapter:Neosnippet
Installation	.plugged/nerdtree/README.markdown	/^## Installation$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Installation	.plugged/tagbar/README.md	/^## Installation$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Installation	.plugged/vim-commentary/README.markdown	/^## Installation$/;"	s	chapter:commentary.vim
Installation	.plugged/vim-snippets/README.md	/^Installation$/;"	s	chapter:snipMate & UltiSnip Snippets
Installation	.plugged/vim-surround/README.markdown	/^## Installation$/;"	s	chapter:surround.vim
Installation	.plugged/vim-transparent/README.md	/^## Installation$/;"	s	chapter:Screenshots
Int	.plugged/fzf/src/tui/tui.go	/^func (t EventType) Int() int {$/;"	f	type:tui.EventType	typeref:typename:int
Introduction	.plugged/fzf/ADVANCED.md	/^Introduction$/;"	s	chapter:Advanced fzf examples
Introduction	.plugged/nerdtree/README.markdown	/^## Introduction$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Invalid	.plugged/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsBytes	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	struct:util.Chars	typeref:typename:bool
IsDefault	.plugged/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f	type:tui.Color	typeref:typename:bool
IsEmpty	.plugged/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	struct:fzf.Pattern	typeref:typename:bool
IsFull	.plugged/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
IsLightRendererSupported	.plugged/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLightRendererSupported	.plugged/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsTty	.plugged/fzf/src/util/util.go	/^func IsTty() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	.plugged/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	.plugged/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
Italic	.plugged/fzf/src/tui/dummy.go	/^	Italic        = Attr(1 << 2)$/;"	c	package:tui
Italic	.plugged/fzf/src/tui/tcell.go	/^	Italic             = Attr(tcell.AttrItalic)$/;"	c	package:tui
Item	.plugged/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	.plugged/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf	typeref:typename:func(*Item, []byte) bool
JumpLabels	.plugged/fzf/src/options.go	/^	JumpLabels   string$/;"	m	struct:fzf.Options	typeref:typename:string
K	init.vim	/^nnoremap K <nop>$/;"	m
K	init.vim	/^nnoremap K k<S-j>$/;"	m
KEY/EVENT	.plugged/fzf/man/man1/fzf.1	/^.SH KEY\/EVENT BINDINGS$/;"	s	title:fzf
KeepRight	.plugged/fzf/src/options.go	/^	KeepRight    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Key	.plugged/fzf/src/tui/tui.go	/^func Key(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
Key bindings for command-line	.plugged/fzf/README.md	/^Key bindings for command-line$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Key bindings for git objects	.plugged/fzf/ADVANCED.md	/^Key bindings for git objects$/;"	s	chapter:Advanced fzf examples
Keybindings	.plugged/hop.nvim/README.md	/^# Keybindings$/;"	c
Keymap	.plugged/fzf/src/options.go	/^	Keymap       map[tui.Event][]*action$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event][]*action
KillCommand	.plugged/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
KillCommand	.plugged/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
L	.plugged/editorconfig-vim/tests/core/tests/meta/CMakeLists.txt	/^set(L "[ \\t\\n\\r]+")$/;"	v
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
LAYOUT	.plugged/fzf/man/man1/fzf-tmux.1	/^.SH LAYOUT OPTIONS$/;"	s	title:fzf-tmux
LIB	.plugged/delimitMate/Makefile	/^LIB      =  $(wildcard autoload\/*.vim)$/;"	m
LICENSE	.plugged/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LOG_FILE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Language maintainers	.plugged/vim-snippets/README.md	/^Language maintainers$/;"	s	chapter:Versions / dialects / ..
Latin1 Character Set	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^Latin1 Character Set$/;"	s	chapter:Tests for Newlines
Latin1 Character Set with Unicode	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^Latin1 Character Set with Unicode$/;"	s	chapter:Tests for Newlines
Layout	.plugged/fzf/README.md	/^### Layout$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Layout	.plugged/fzf/src/options.go	/^	Layout       layoutType$/;"	m	struct:fzf.Options	typeref:typename:layoutType
Leading Spaces	.plugged/indentLine/README.md	/^### Leading Spaces$/;"	S	section:indentLine""Screenshots
LeadingSpaceDisable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceDisable call s:LeadingSpaceDisable()$/;"	c
LeadingSpaceDisable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceDisable let b:indentLine_leadingSpaceEnabled = 0 | call s:LeadingS/;"	c
LeadingSpaceEnable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceEnable call s:LeadingSpaceEnable()$/;"	c
LeadingSpaceEnable	.plugged/indentLine/after/plugin/indentLine.vim	/^    command! -bar LeadingSpaceEnable let b:indentLine_leadingSpaceEnabled = 1 | call s:LeadingSp/;"	c
LeadingSpaceToggle	.plugged/indentLine/after/plugin/indentLine.vim	/^command! LeadingSpaceToggle call s:LeadingSpaceToggle()$/;"	c
LeadingWhitespaces	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Left	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Left	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Left	.plugged/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Left	.plugged/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
Left	.plugged/fzf/src/tui/tui.go	/^	Left() int$/;"	n	interface:tui.Window	typeref:typename:int
LeftClick	.plugged/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	.plugged/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	type:fzf.ByOrder	typeref:typename:int
Len	.plugged/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	type:fzf.ByRelevance	typeref:typename:int
Len	.plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:int
Len	.plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	type:fzf.byTimeOrder	typeref:typename:int
Length	.plugged/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	struct:fzf.Merger	typeref:typename:int
Length	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	struct:util.Chars	typeref:typename:int
Less	.plugged/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	type:fzf.ByOrder	typeref:typename:bool
Less	.plugged/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevance	typeref:typename:bool
Less	.plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:bool
Less	.plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	type:fzf.byTimeOrder	typeref:typename:bool
License	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/README.rst	/^License$/;"	s	chapter:Tests for EditorConfig Plugins
License	.plugged/fzf.vim/README.md	/^License$/;"	s	chapter:fzf :heart: vim
License	.plugged/fzf/BUILD.md	/^License$/;"	s	chapter:Building fzf
License	.plugged/gruvbox/README.md	/^License$/;"	s
License	.plugged/indentLine/README.md	/^## License$/;"	s	chapter:indentLine
License	.plugged/tagbar/README.md	/^## License$/;"	s	chapter:Tagbar: a class outline viewer for Vim
License	.plugged/vim-commentary/README.markdown	/^## License$/;"	s	chapter:commentary.vim
License	.plugged/vim-snippets/README.md	/^License$/;"	s	chapter:Versions / dialects / ..
License	.plugged/vim-surround/README.markdown	/^## License$/;"	s	chapter:surround.vim
Light mode	.plugged/gruvbox/README.md	/^### Light mode$/;"	S	section:Palette
Light mode	.plugged/gruvbox/README.md	/^### Light mode$/;"	S	section:Screenshots
Light256	.plugged/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
LightRenderer	.plugged/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	.plugged/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
ListenPort	.plugged/fzf/src/options.go	/^	ListenPort   int$/;"	m	struct:fzf.Options	typeref:typename:int
Load	.plugged/fzf/src/tui/tui.go	/^	Load$/;"	c	package:tui
Log tailing	.plugged/fzf/ADVANCED.md	/^Log tailing$/;"	s	chapter:Advanced fzf examples
Lookup	.plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Loop	.plugged/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	struct:fzf.Matcher
Loop	.plugged/fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f	struct:fzf.Terminal
LoopParseArgs	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
M.TrieBacktrackFilling:add_trie_key	.plugged/hop.nvim/lua/hop/perm.lua	/^function M.TrieBacktrackFilling:add_trie_key(trie, p, key)$/;"	f
M.TrieBacktrackFilling:lookup_seq_trie	.plugged/hop.nvim/lua/hop/perm.lua	/^function M.TrieBacktrackFilling:lookup_seq_trie(trie, p)$/;"	f
M.TrieBacktrackFilling:next_perm	.plugged/hop.nvim/lua/hop/perm.lua	/^function M.TrieBacktrackFilling:next_perm(keys, trie, p)$/;"	f
M.TrieBacktrackFilling:permutations	.plugged/hop.nvim/lua/hop/perm.lua	/^function M.TrieBacktrackFilling:permutations(keys, n)$/;"	f
M.TrieBacktrackFilling:trie_to_perms	.plugged/hop.nvim/lua/hop/perm.lua	/^function M.TrieBacktrackFilling:trie_to_perms(trie, perm)$/;"	f
M.by_line_start	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.by_line_start()$/;"	f
M.check	.plugged/hop.nvim/lua/hop/health.lua	/^function M.check()$/;"	f
M.clip_window_context	.plugged/hop.nvim/lua/hop/window.lua	/^function M.clip_window_context(context, direction)$/;"	f
M.create_autocmd	.plugged/hop.nvim/lua/hop/highlight.lua	/^function M.create_autocmd()$/;"	f
M.create_hints	.plugged/hop.nvim/lua/hop/hint.lua	/^function M.create_hints(jump_targets, indirect_jump_targets, opts)$/;"	f
M.get_input_pattern	.plugged/hop.nvim/lua/hop/init.lua	/^function M.get_input_pattern(prompt, maxchar, opts)$/;"	f
M.get_lines_context	.plugged/hop.nvim/lua/hop/window.lua	/^function M.get_lines_context(buf_handle, context)$/;"	f
M.get_window_context	.plugged/hop.nvim/lua/hop/window.lua	/^function M.get_window_context(multi_windows)$/;"	f
M.hint_anywhere	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_anywhere(opts)$/;"	f
M.hint_around_cursor	.plugged/hop.nvim/examples/hop-extension-hello-world/lua/hop-extension-hello-world/init.lua	/^function M.hint_around_cursor(opts)$/;"	f
M.hint_char1	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_char1(opts)$/;"	f
M.hint_char2	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_char2(opts)$/;"	f
M.hint_lines	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_lines(opts)$/;"	f
M.hint_lines_skip_whitespace	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_lines_skip_whitespace(opts)$/;"	f
M.hint_patterns	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_patterns(opts, pattern)$/;"	f
M.hint_vertical	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_vertical(opts)$/;"	f
M.hint_with	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_with(jump_target_gtr, opts)$/;"	f
M.hint_with_callback	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_with_callback(jump_target_gtr, opts, callback)$/;"	f
M.hint_words	.plugged/hop.nvim/lua/hop/init.lua	/^function M.hint_words(opts)$/;"	f
M.insert_highlights	.plugged/hop.nvim/lua/hop/highlight.lua	/^function M.insert_highlights()$/;"	f
M.jump_targets_by_scanning_lines	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.jump_targets_by_scanning_lines(regex)$/;"	f
M.jump_targets_for_current_line	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.jump_targets_for_current_line(regex)$/;"	f
M.manh_dist	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.manh_dist(a, b, x_bias)$/;"	f
M.move_cursor_to	.plugged/hop.nvim/lua/hop/init.lua	/^function M.move_cursor_to(w, line, column, hint_offset, direction)$/;"	f
M.permutations	.plugged/hop.nvim/lua/hop/perm.lua	/^function M.permutations(keys, n, opts)$/;"	f
M.quit	.plugged/hop.nvim/lua/hop/init.lua	/^function M.quit(hint_state)$/;"	f
M.reduce_hints	.plugged/hop.nvim/lua/hop/hint.lua	/^function M.reduce_hints(hints, key)$/;"	f
M.refine_hints	.plugged/hop.nvim/lua/hop/init.lua	/^function M.refine_hints(key, hint_state, callback, opts)$/;"	f
M.regex_by_anywhere	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.regex_by_anywhere()$/;"	f
M.regex_by_case_searching	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.regex_by_case_searching(pat, plain_search, opts)$/;"	f
M.regex_by_line_start_skip_whitespace	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.regex_by_line_start_skip_whitespace()$/;"	f
M.regex_by_searching	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.regex_by_searching(pat, plain_search)$/;"	f
M.regex_by_vertical	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.regex_by_vertical()$/;"	f
M.regex_by_word_start	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.regex_by_word_start()$/;"	f
M.register	.plugged/hop.nvim/examples/hop-extension-hello-world/lua/hop-extension-hello-world/init.lua	/^function M.register(opts)$/;"	f
M.set_hint_extmarks	.plugged/hop.nvim/lua/hop/hint.lua	/^function M.set_hint_extmarks(hl_ns, hints, opts)$/;"	f
M.set_hint_preview	.plugged/hop.nvim/lua/hop/hint.lua	/^function M.set_hint_preview(hl_ns, jump_targets)$/;"	f
M.setup	.plugged/hop.nvim/lua/hop/init.lua	/^function M.setup(opts)$/;"	f
M.sort_indirect_jump_targets	.plugged/hop.nvim/lua/hop/jump_target.lua	/^function M.sort_indirect_jump_targets(indirect_jump_targets, opts)$/;"	f
MAKEFILE	.plugged/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MYFZF	init.vim	/^command! MYFZF call fzf#run(fzf#wrap({'source': 'git ls-files'}))$/;"	c
MakeBorderStyle	.plugged/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
MakeSlab	.plugged/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util	typeref:typename:*Slab
MakeTransparentBorder	.plugged/fzf/src/tui/tui.go	/^func MakeTransparentBorder() BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
Manual test setup instructions	.plugged/delimitMate/test/README.md	/^# Manual test setup instructions$/;"	c
Mappings	.plugged/fzf.vim/README.md	/^Mappings$/;"	s	chapter:fzf :heart: vim
Margin	.plugged/fzf/src/options.go	/^	Margin       [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Marker	.plugged/fzf/src/options.go	/^	Marker       string$/;"	m	struct:fzf.Options	typeref:typename:string
Match	.plugged/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
Match	.plugged/fzf/src/tui/tui.go	/^	Match        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MatchItem	.plugged/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:(*Result, []Offset, *[]int)
MatchRequest	.plugged/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
Matcher	.plugged/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Max	.plugged/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Max16	.plugged/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util	typeref:typename:int16
Max32	.plugged/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MaxFitAndPad	.plugged/fzf/src/terminal.go	/^func (t *Terminal) MaxFitAndPad(opts *Options) (int, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int)
MaxX	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxX	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	.plugged/fzf/src/tui/tui.go	/^	MaxX() int$/;"	n	interface:tui.Renderer	typeref:typename:int
MaxY	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxY	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	.plugged/fzf/src/tui/tui.go	/^	MaxY() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Merge	.plugged/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	.plugged/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeAttr	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeNonDefault	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
Merger	.plugged/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
Min	.plugged/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Min32	.plugged/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MinHeight	.plugged/fzf/src/options.go	/^	MinHeight    int$/;"	m	struct:fzf.Options	typeref:typename:int
Minor improvements/fixes	.plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.0
Minor improvements/fixes	.plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.1
Mod	.plugged/fzf/src/tui/tui.go	/^	Mod    bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Motivation	.plugged/hop.nvim/README.md	/^# Motivation$/;"	c
Mouse	.plugged/fzf/src/options.go	/^	Mouse        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mouse	.plugged/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	.plugged/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event	typeref:typename:*MouseEvent
MouseEvent	.plugged/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
Move	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	struct:tui.LightWindow
Move	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	struct:tui.TcellWindow
Move	.plugged/fzf/src/tui/tui.go	/^	Move(y int, x int)$/;"	n	interface:tui.Window
MoveAndClear	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.LightWindow
MoveAndClear	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.TcellWindow
MoveAndClear	.plugged/fzf/src/tui/tui.go	/^	MoveAndClear(y int, x int)$/;"	n	interface:tui.Window
Multi	.plugged/fzf/src/options.go	/^	Multi        int$/;"	m	struct:fzf.Options	typeref:typename:int
NAME	.plugged/delimitMate/Makefile	/^NAME     =  delimitMate$/;"	m
NAME	.plugged/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf-tmux
NAME	.plugged/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
NERDTree	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	.plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree Change Log	.plugged/nerdtree/CHANGELOG.md	/^# NERDTree Change Log$/;"	c
NERDTree Plugins	.plugged/nerdtree/README.markdown	/^## NERDTree Plugins$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
NERDTreeAddKeyMap	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	.plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeClose	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	.plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	.plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeFind	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	.plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRefreshRoot	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeRefreshRoot call s:refreshRoot()$/;"	c
NERDTreeRender	.plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSystemCommand	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeToggle	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NERDTreeToggleVCS	.plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	.plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
NEVER	.plugged/vim-snippets/pythonx/javascript_snippets.py	/^NEVER = 'never'$/;"	v
NeedScrollbarRedraw	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool          { return false }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
NeedScrollbarRedraw	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NeedScrollbarRedraw() bool {$/;"	f	struct:tui.LightRenderer	typeref:typename:bool
NeedScrollbarRedraw	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
NeedScrollbarRedraw	.plugged/fzf/src/tui/tui.go	/^	NeedScrollbarRedraw() bool$/;"	n	interface:tui.Renderer	typeref:typename:bool
NeoSnippetClearMarkers	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^command! -bar NeoSnippetClearMarkers$/;"	c
NeoSnippetEdit	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^      \\ NeoSnippetEdit$/;"	c
NeoSnippetMakeCache	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^      \\ NeoSnippetMakeCache$/;"	c
NeoSnippetSource	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^      \\ NeoSnippetSource$/;"	c
Neosnippet	.plugged/neosnippet.vim/README.md	/^Neosnippet$/;"	c
NeosnippetSnippets_Goiferr	.plugged/neosnippet-snippets/neosnippets/go.vim	/^function! g:NeosnippetSnippets_Goiferr() abort$/;"	f
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.0
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.1
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.10
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.11
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.12
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.13
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.3
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.4
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.5
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.6
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.7
New features	.plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.9
NewAtomicBool	.plugged/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util	typeref:typename:*AtomicBool
NewChunkCache	.plugged/fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f	package:fzf	typeref:typename:ChunkCache
NewChunkList	.plugged/fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f	package:fzf	typeref:typename:*ChunkList
NewColorAttr	.plugged/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f	package:tui	typeref:typename:ColorAttr
NewColorPair	.plugged/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NewEventBox	.plugged/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util	typeref:typename:*EventBox
NewFullscreenRenderer	.plugged/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui	typeref:typename:Renderer
NewHistory	.plugged/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf	typeref:typename:(*History, error)
NewLightRenderer	.plugged/fzf/src/tui/light.go	/^func NewLightRenderer(theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit b/;"	f	package:tui	typeref:typename:Renderer
NewMatcher	.plugged/fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf	typeref:typename:*Matcher
NewMerger	.plugged/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
NewReader	.plugged/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, delimNil bool, wait bool) *Rea/;"	f	package:fzf	typeref:typename:*Reader
NewTerminal	.plugged/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f	package:fzf	typeref:typename:*Terminal
NewWindow	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, preview bool, border/;"	f	struct:tui.LightRenderer	typeref:typename:Window
NewWindow	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	.plugged/fzf/src/tui/tui.go	/^	NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Wind/;"	n	interface:tui.Renderer	typeref:typename:Window
Nightly users	.plugged/hop.nvim/README.md	/^### Nightly users$/;"	S	section:Getting started""Installation
No external editorconfig core library is required	.plugged/editorconfig-vim/README.md	/^### No external editorconfig core library is required$/;"	S	section:EditorConfig Vim Plugin""Installation
NoColorTheme	.plugged/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Normalize	.plugged/fzf/src/options.go	/^	Normalize    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
NormalizeRunes	.plugged/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo	typeref:typename:[]rune
Not Trimming Whitespace	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Not Trimming Whitespace$/;"	s	chapter:Trim Trailing Whitespace Property
Note: If the file structure display is wrong	.plugged/tagbar/README.md	/^## Note: If the file structure display is wrong$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Nth	.plugged/fzf/src/options.go	/^	Nth          []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
OPTIONS	.plugged/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
Offset	.plugged/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf	typeref:typename:[2]int32
Old Mac-style Newlines	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/end_of_line.rst	/^Old Mac-style Newlines$/;"	S	section:Tests for Newlines
Once	.plugged/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f	package:util	typeref:typename:func() bool
OpenBookmark	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
Options	.plugged/fzf/README.md	/^### Options$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Options	.plugged/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
Overall process	.plugged/hop.nvim/CONTRIBUTING.md	/^## Overall process$/;"	s	chapter:Release process
PATH	.plugged/neosnippet.vim/Makefile	/^PATH := .\/vim-themis\/bin:$(PATH)$/;"	m
PAUSE_BEFORE_EXIT	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
PERL	.plugged/delimitMate/Makefile	/^PERL     =  perl$/;"	m
PLUGIN	.plugged/delimitMate/Makefile	/^PLUGIN   =  $(wildcard plugin\/*.vim)$/;"	m
POST_PROCESS_CMD	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PS1	.plugged/fzf/test/test_go.rb	/^PS1= PROMPT_COMMAND= HISTFILE= HISTSIZE=100$/;"	C
Padding	.plugged/fzf/src/options.go	/^	Padding      [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Palette	.plugged/gruvbox/README.md	/^Palette$/;"	s
Params	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^type Params = Record<never, never>;$/;"	a
ParseArgs	.plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:ParseArgs$/;"	l
ParseArgs	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	.plugged/fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
ParseRange	.plugged/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf	typeref:typename:(Range, bool)
Part of the work that can be taken out of	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^## Part of the work that can be taken out of #123$/;"	s	chapter:Solution
PassMerger	.plugged/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
Patched font	.plugged/indentLine/README.md	/^### Patched font$/;"	S	section:indentLine""Screenshots
Pattern	.plugged/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
Pause	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)                         {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	struct:tui.LightRenderer
Pause	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Pause	.plugged/fzf/src/tui/tui.go	/^	Pause(clear bool)$/;"	n	interface:tui.Renderer
Peek	.plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	struct:util.EventBox	typeref:typename:bool
Performance	.plugged/fzf/README.md	/^### Performance$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PgDn	.plugged/fzf/src/tui/tui.go	/^	PgDn$/;"	c	package:tui
PgUp	.plugged/fzf/src/tui/tui.go	/^	PgUp$/;"	c	package:tui
Phony	.plugged/fzf/src/options.go	/^	Phony        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Pointer	.plugged/fzf/src/options.go	/^	Pointer      string$/;"	m	struct:fzf.Options	typeref:typename:string
Popup window support	.plugged/fzf/ADVANCED.md	/^#### Popup window support$/;"	t	subsection:Advanced fzf examples""Screen Layout""`fzf-tmux`
PrefixMatch	.plugged/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Prepend	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f	struct:util.Chars
Prerequisites	.plugged/fzf/BUILD.md	/^### Prerequisites$/;"	S	section:Building fzf""Build instructions
Preview	.plugged/fzf/src/options.go	/^	Preview      previewOpts$/;"	m	struct:fzf.Options	typeref:typename:previewOpts
Preview window	.plugged/fzf.vim/README.md	/^#### Preview window$/;"	t	subsection:fzf :heart: vim""Customization""Global options
Preview window	.plugged/fzf/README.md	/^### Preview window$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PreviewBg	.plugged/fzf/src/tui/tui.go	/^	PreviewBg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewFg	.plugged/fzf/src/tui/tui.go	/^	PreviewFg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewLabel	.plugged/fzf/src/options.go	/^	PreviewLabel labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
PreviewLabel	.plugged/fzf/src/tui/tui.go	/^	PreviewLabel ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Print	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	struct:tui.LightWindow
Print	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	struct:tui.TcellWindow
Print	.plugged/fzf/src/tui/tui.go	/^	Print(text string)$/;"	n	interface:tui.Window
PrintQuery	.plugged/fzf/src/options.go	/^	PrintQuery   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
PrintSep	.plugged/fzf/src/options.go	/^	PrintSep     string$/;"	m	struct:fzf.Options	typeref:typename:string
Printer	.plugged/fzf/src/options.go	/^	Printer      func(string)$/;"	m	struct:fzf.Options	typeref:typename:func(string)
Prior and on-going work	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Prior and on-going work$/;"	c
Process	.plugged/hop.nvim/CONTRIBUTING.md	/^## Process$/;"	s	chapter:How to make a change
Process IDs	.plugged/fzf/README.md	/^### Process IDs$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Prompt	.plugged/fzf/src/options.go	/^	Prompt       string$/;"	m	struct:fzf.Options	typeref:typename:string
Prompt	.plugged/fzf/src/tui/tui.go	/^	Prompt       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Pros	.plugged/fzf/README.md	/^Pros$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Protect	.plugged/fzf/src/protector/protector.go	/^func Protect() {$/;"	f	package:protector
Protect	.plugged/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f	package:protector
Push	.plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	struct:fzf.ChunkList	typeref:typename:bool
Pushing	.plugged/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s	chapter:Contributing
Query	.plugged/fzf/src/options.go	/^	Query        string$/;"	m	struct:fzf.Options	typeref:typename:string
Quickstart	.plugged/tagbar/README.md	/^## Quickstart$/;"	s	chapter:Tagbar: a class outline viewer for Vim
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
REVISION	.plugged/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	.plugged/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h -- $(SOURCES) 2> \/dev\/null)$/;"	m
ROOT_DIR	.plugged/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
Range	.plugged/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
Rationale	.plugged/fzf.vim/README.md	/^Rationale$/;"	s	chapter:fzf :heart: vim
Rationale	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Rationale$/;"	c
Read	.plugged/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
Read	.plugged/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
ReadBookmarks	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
ReadSource	.plugged/fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f	struct:fzf.Reader
ReadZero	.plugged/fzf/src/options.go	/^	ReadZero     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Reader	.plugged/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Redesign `HintMode`	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^## Redesign `HintMode`$/;"	s	chapter:Solution
Reduced initial memory footprint (#151)	.plugged/fzf/CHANGELOG.md	/^#### Reduced initial memory footprint (#151)$/;"	t	subsection:CHANGELOG""0.9.5""Improvements
Reducer example	.plugged/fzf.vim/README.md	/^### Reducer example$/;"	S	section:fzf :heart: vim""Custom completion
Refresh	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()                           {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	struct:tui.LightRenderer
Refresh	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	struct:tui.LightWindow
Refresh	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	struct:tui.TcellWindow
Refresh	.plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Renderer
Refresh	.plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Window
RefreshWindows	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	struct:tui.LightRenderer
RefreshWindows	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	.plugged/fzf/src/tui/tui.go	/^	RefreshWindows(windows []Window)$/;"	n	interface:tui.Renderer
Related Projects	.plugged/vim-gutentags/README.md	/^# Related Projects$/;"	c
Related projects	.plugged/fzf/README.md	/^Related projects$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Related repositories	.plugged/vim-snippets/README.md	/^Related repositories$/;"	s	chapter:snipMate & UltiSnip Snippets
Release process	.plugged/hop.nvim/CONTRIBUTING.md	/^# Release process$/;"	c
Reloading the candidate list	.plugged/fzf/README.md	/^### Reloading the candidate list$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Renderer	.plugged/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
RepeatToFill	.plugged/fzf/src/util/util.go	/^func RepeatToFill(str string, length int, limit int) string {$/;"	f	package:util	typeref:typename:string
Requirements	.plugged/indentLine/README.md	/^## Requirements$/;"	s	chapter:indentLine
Reset	.plugged/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	struct:fzf.Matcher
Resize	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f	unknown:tui.FullscreenRenderer
Resize	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resize(maxHeightFunc func(int) int) {$/;"	f	struct:tui.LightRenderer
Resize	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f	unknown:tui.FullscreenRenderer
Resize	.plugged/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
Resize	.plugged/fzf/src/tui/tui.go	/^	Resize(maxHeightFunc func(int) int)$/;"	n	interface:tui.Renderer
Respecting `.gitignore`	.plugged/fzf/README.md	/^#### Respecting `.gitignore`$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Result	.plugged/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	.plugged/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Resume	.plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool)                  {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f	struct:tui.LightRenderer
Resume	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f	unknown:tui.FullscreenRenderer
Resume	.plugged/fzf/src/tui/tui.go	/^	Resume(clear bool, sigcont bool)$/;"	n	interface:tui.Renderer
RevealBookmark	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Reverse	.plugged/fzf/src/tui/dummy.go	/^	Reverse       = Attr(1 << 6)$/;"	c	package:tui
Reverse	.plugged/fzf/src/tui/tcell.go	/^	Reverse            = Attr(tcell.AttrReverse)$/;"	c	package:tui
Rewrite the public interface to support already existing modes	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^## Rewrite the public interface to support already existing modes$/;"	s	chapter:Solution
Rg	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^command! -nargs=* -complete=file Rg :call s:Rg(<q-args>)$/;"	c
RgRoot	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^command! RgRoot :call s:RgShowRoot()$/;"	c
RgVisual	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! g:RgVisual() range$/;"	f
Right	.plugged/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	.plugged/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Ripgrep integration	.plugged/fzf/ADVANCED.md	/^Ripgrep integration$/;"	s	chapter:Advanced fzf examples
Run	.plugged/fzf/src/core.go	/^func Run(opts *Options, version string, revision string) {$/;"	f	package:fzf
Rune	.plugged/fzf/src/tui/tui.go	/^	Rune EventType = iota$/;"	c	package:tui	typeref:type:EventType
RunesToChars	.plugged/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util	typeref:typename:Chars
RunesWidth	.plugged/fzf/src/util/util.go	/^func RunesWidth(runes []rune, prefixWidth int, tabstop int, limit int) (int, int) {$/;"	f	package:util	typeref:typename:(int, int)
Running Tests	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/README.rst	/^Running Tests$/;"	s	chapter:Tests for EditorConfig Plugins
S	.plugged/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
S	.plugged/vim-surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
SDown	.plugged/fzf/src/tui/tui.go	/^	SDown$/;"	c	package:tui
SED	.plugged/delimitMate/Makefile	/^SED      =  $(shell command -v gsed || command -v sed)$/;"	m
SEE	.plugged/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SHELL	.plugged/fzf/Makefile	/^SHELL          := bash$/;"	m
SLeft	.plugged/fzf/src/tui/tui.go	/^	SLeft$/;"	c	package:tui
SOURCES	.plugged/delimitMate/Makefile	/^SOURCES  =  $(PLUGIN)$/;"	m
SOURCES	.plugged/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go) $(MAKEFILE)$/;"	m
SRight	.plugged/fzf/src/tui/tui.go	/^	SRight$/;"	c	package:tui
SUp	.plugged/fzf/src/tui/tui.go	/^	SUp$/;"	c	package:tui
SYNOPSIS	.plugged/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf-tmux
SYNOPSIS	.plugged/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
Scheme	.plugged/fzf/src/options.go	/^	Scheme       string$/;"	m	struct:fzf.Options	typeref:typename:string
Score	.plugged/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result	typeref:typename:int
Screen Layout	.plugged/fzf/ADVANCED.md	/^Screen Layout$/;"	s	chapter:Advanced fzf examples
Screenshots	.plugged/gruvbox/README.md	/^Screenshots$/;"	s
Screenshots	.plugged/indentLine/README.md	/^## Screenshots$/;"	s	chapter:indentLine
Screenshots	.plugged/tagbar/README.md	/^## Screenshots$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Screenshots	.plugged/vim-transparent/README.md	/^# Screenshots$/;"	c
ScrollOff	.plugged/fzf/src/options.go	/^	ScrollOff    int$/;"	m	struct:fzf.Options	typeref:typename:int
Scrollbar	.plugged/fzf/src/options.go	/^	Scrollbar    *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Scrollbar	.plugged/fzf/src/tui/tui.go	/^	Scrollbar    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Search	.plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Search syntax	.plugged/fzf/README.md	/^### Search syntax$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Select1	.plugged/fzf/src/options.go	/^	Select1      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Selected	.plugged/fzf/src/tui/tui.go	/^	Selected     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Selected Options	.plugged/editorconfig-vim/README.md	/^## Selected Options$/;"	s	chapter:EditorConfig Vim Plugin
Self promotion	.plugged/indentLine/README.md	/^## Self promotion$/;"	s	chapter:indentLine
Self-Promotion	.plugged/gruvbox/README.md	/^Self-Promotion$/;"	s
Self-Promotion	.plugged/vim-commentary/README.markdown	/^## Self-Promotion$/;"	s	chapter:commentary.vim
Self-Promotion	.plugged/vim-surround/README.markdown	/^## Self-Promotion$/;"	s	chapter:surround.vim
Separator	.plugged/fzf/src/options.go	/^	Separator    *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Separator	.plugged/fzf/src/tui/tui.go	/^	Separator    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Set	.plugged/fzf/src/terminal.go	/^func (s *resumableState) Set(flag bool) {$/;"	f	type:fzf.resumableState
Set	.plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Set	.plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f	struct:util.EventBox
SetNonblock	.plugged/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	.plugged/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetStdin	.plugged/fzf/src/util/util_unix.go	/^func SetStdin(file *os.File) {$/;"	f	package:util
SetStdin	.plugged/fzf/src/util/util_windows.go	/^func SetStdin(file *os.File) {$/;"	f	package:util
Settings	.plugged/fzf/README.md	/^### Settings$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Shell	.plugged/fzf/test/test_go.rb	/^class Shell$/;"	c
ShowUsage	.plugged/vim-gutentags/plat/unix/update_gtags.sh	/^ShowUsage() {$/;"	f
ShowUsage	.plugged/vim-gutentags/plat/unix/update_pyscopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	.plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	.plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Slab	.plugged/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
Snapshot	.plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f	struct:fzf.ChunkList	typeref:typename:([]*Chunk, int)
Snippet engines supporting vim-snippets	.plugged/vim-snippets/README.md	/^Snippet engines supporting vim-snippets$/;"	s	chapter:snipMate & UltiSnip Snippets
SnippetsIndent	.plugged/neosnippet.vim/indent/neosnippet.vim	/^function! SnippetsIndent() abort "{{{$/;"	f
Solution	.plugged/hop.nvim/rfcs/0001-hop-general-hint-modes.md	/^# Solution$/;"	c
Sort	.plugged/fzf/src/options.go	/^	Sort         int$/;"	m	struct:fzf.Options	typeref:typename:int
Source	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^export class Source extends BaseSource<Params> {$/;"	c
Source	.plugged/neosnippet.vim/rplugin/python3/denite/source/neosnippet.py	/^class Source(Base):$/;"	c
Source	.plugged/neosnippet.vim/rplugin/python3/deoplete/sources/neosnippet.py	/^class Source(Base):$/;"	c
Space-based indentation	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^Space-based indentation$/;"	s	chapter:Tests for Indentation Properties
Space-based indentation with no size specified	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^Space-based indentation with no size specified$/;"	S	section:Space-based indentation
Spinner	.plugged/fzf/src/tui/tui.go	/^	Spinner      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Start	.plugged/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result	typeref:typename:int
Start	.plugged/fzf/src/tui/tui.go	/^	Start$/;"	c	package:tui
Starting fzf in a popup window	.plugged/fzf/README-VIM.md	/^### Starting fzf in a popup window$/;"	S	section:FZF Vim integration""Tips
Status line of terminal buffer	.plugged/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s	chapter:fzf :heart: vim
StrikeThrough	.plugged/fzf/src/tui/dummy.go	/^	StrikeThrough = Attr(1 << 7)$/;"	c	package:tui
StrikeThrough	.plugged/fzf/src/tui/tcell.go	/^	StrikeThrough      = Attr(tcell.AttrStrikeThrough)$/;"	c	package:tui
String	.plugged/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	struct:fzf.term	typeref:typename:string
String	.plugged/fzf/src/terminal_test.go	/^func (item *Item) String() string {$/;"	f	unknown:fzf.Item	typeref:typename:string
String	.plugged/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	struct:fzf.Delimiter	typeref:typename:string
String	.plugged/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	struct:fzf.Token	typeref:typename:string
String	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	struct:util.Chars	typeref:typename:string
Style	.plugged/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color	typeref:typename:tcell.Color
SuffixMatch	.plugged/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Summary	.plugged/fzf/README-VIM.md	/^Summary$/;"	s	chapter:FZF Vim integration
Support and donation	.plugged/hop.nvim/CONTRIBUTING.md	/^# Support and donation$/;"	c
Support for additional filetypes	.plugged/tagbar/README.md	/^## Support for additional filetypes$/;"	s	chapter:Tagbar: a class outline viewer for Vim
Supported commands	.plugged/fzf/README.md	/^### Supported commands$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Supported properties	.plugged/editorconfig-vim/README.md	/^## Supported properties$/;"	s	chapter:EditorConfig Vim Plugin
Swap	.plugged/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	type:fzf.ByOrder
Swap	.plugged/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	type:fzf.ByRelevance
Swap	.plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	type:fzf.ByRelevanceTac
Swap	.plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	type:fzf.byTimeOrder
Switching between Ripgrep mode and fzf mode	.plugged/fzf/ADVANCED.md	/^### Switching between Ripgrep mode and fzf mode$/;"	S	section:Advanced fzf examples""Ripgrep integration
Switching to fzf-only search mode	.plugged/fzf/ADVANCED.md	/^### Switching to fzf-only search mode$/;"	S	section:Advanced fzf examples""Ripgrep integration
Sync	.plugged/fzf/src/options.go	/^	Sync         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Sync_Markdown_Ipybn	init.vim	/^function Sync_Markdown_Ipybn()$/;"	f
TAGS_FILE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TEMPLATE	.plugged/fzf/test/test_go.rb	/^TEMPLATE = DATA.read$/;"	C
TEMPNAME	.plugged/fzf/test/test_go.rb	/^  TEMPNAME = '\/tmp\/output'$/;"	C	class:TestBase
THEMIS_ARGS	.plugged/neosnippet.vim/Makefile	/^export THEMIS_ARGS := -e -s --headless$/;"	m
THEMIS_HOME	.plugged/neosnippet.vim/Makefile	/^export THEMIS_HOME := .\/vim-themis$/;"	m
THEMIS_VIM	.plugged/neosnippet.vim/Makefile	/^export THEMIS_VIM  := nvim$/;"	m
Tab	.plugged/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
Tab-based indentation	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation$/;"	s	chapter:Tests for Indentation Properties
Tab-based indentation with no size specified	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation with no size specified$/;"	S	section:Tab-based indentation
Tab-based indentation with size of 4	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation with size of 4$/;"	S	section:Tab-based indentation
Tab-based indentation with size of 4 and tab width of 8	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^Tab-based indentation with size of 4 and tab width of 8$/;"	S	section:Tab-based indentation
Table of Contents	.plugged/fzf/README.md	/^Table of Contents$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tabstop	.plugged/fzf/src/options.go	/^	Tabstop      int$/;"	m	struct:fzf.Options	typeref:typename:int
Tac	.plugged/fzf/src/options.go	/^	Tac          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Tagbar	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? Tagbar              call tagbar#ToggleWindow(<f-args>)$/;"	c
Tagbar: a class outline viewer for Vim	.plugged/tagbar/README.md	/^# Tagbar: a class outline viewer for Vim$/;"	c
TagbarAutoCmds	.plugged/tagbar/autoload/tagbar.vim	/^    augroup TagbarAutoCmds$/;"	a
TagbarBalloonExpr	.plugged/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarCleanupAutoCmds	.plugged/tagbar/autoload/tagbar.vim	/^    augroup TagbarCleanupAutoCmds$/;"	a
TagbarClose	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=* TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarForceUpdate	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarForceUpdate   call tagbar#ForceUpdate()$/;"	c
TagbarGetTypeConfig	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarJump	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJump   call tagbar#jump()$/;"	c
TagbarJumpNext	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpNext      call tagbar#jumpToNearbyTag(1)$/;"	c
TagbarJumpPrev	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpPrev      call tagbar#jumpToNearbyTag(-1)$/;"	c
TagbarOpen	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	.plugged/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarToggle        call tagbar#ToggleWindow(<f-args>)$/;"	c
TagbarTogglePause	.plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TcellWindow	.plugged/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
Terminal	.plugged/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
Test for Newline	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/insert_final_newline.rst	/^Test for Newline$/;"	S	section:Tests for Newline at end of File
Test for No Newline	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/insert_final_newline.rst	/^Test for No Newline$/;"	S	section:Tests for Newline at end of File
TestAdditiveExpect	.plugged/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAnsiCodeStringConversion	.plugged/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f	package:fzf
TestAsUint16	.plugged/fzf/src/util/util_test.go	/^func TestAsUint16(t *testing.T) {$/;"	f	package:util
TestAtomicBool	.plugged/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	.plugged/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	.plugged/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
TestBind	.plugged/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	.plugged/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	.plugged/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	.plugged/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	.plugged/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsToString	.plugged/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestChunkCache	.plugged/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	.plugged/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestChunkTiebreak	.plugged/fzf/src/result_test.go	/^func TestChunkTiebreak(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	.plugged/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	.plugged/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestConstrain	.plugged/fzf/src/util/util_test.go	/^func TestConstrain(t *testing.T) {$/;"	f	package:util
TestConstrain32	.plugged/fzf/src/util/util_test.go	/^func TestConstrain32(t *testing.T) {$/;"	f	package:util
TestDefaultCtrlNP	.plugged/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	.plugged/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	.plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegexCaret	.plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegexCaret(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	.plugged/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestDurWithIn	.plugged/fzf/src/util/util_test.go	/^func TestDurWithIn(t *testing.T) {$/;"	f	package:util
TestEmptyMerger	.plugged/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	.plugged/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEqual	.plugged/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	.plugged/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	.plugged/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	.plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	.plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExtractColor	.plugged/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestFish	.plugged/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c	mixin:include:TestShell
TestFuzzyMatch	.plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	.plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGetCharEventKey	.plugged/fzf/src/tui/tcell_test.go	/^func TestGetCharEventKey(t *testing.T) {$/;"	f	package:tui
TestGoFZF	.plugged/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestHexToColor	.plugged/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	.plugged/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestIrrelevantNth	.plugged/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLongString	.plugged/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestMaskActionContents	.plugged/fzf/src/options_test.go	/^func TestMaskActionContents(t *testing.T) {$/;"	f	package:fzf
TestMax	.plugged/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMax16	.plugged/fzf/src/util/util_test.go	/^func TestMax16(t *testing.T) {$/;"	f	package:util
TestMax32	.plugged/fzf/src/util/util_test.go	/^func TestMax32(t *testing.T) {$/;"	f	package:util
TestMergerSorted	.plugged/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	.plugged/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestMin	.plugged/fzf/src/util/util_test.go	/^func TestMin(t *testing.T) {$/;"	f	package:util
TestMin32	.plugged/fzf/src/util/util_test.go	/^func TestMin32(t *testing.T) {$/;"	f	package:util
TestNextAnsiEscapeSequence	.plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Modified	.plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Modified(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Random	.plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Random(t *testing.T) {$/;"	f	package:fzf
TestNormalize	.plugged/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOffsetSort	.plugged/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOnce	.plugged/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f	package:util
TestOrigTextAndTransformed	.plugged/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestParseAnsiCode	.plugged/fzf/src/ansi_test.go	/^func TestParseAnsiCode(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	.plugged/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	.plugged/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParsePlaceholder	.plugged/fzf/src/terminal_test.go	/^func TestParsePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestParseRange	.plugged/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseSingleActionList	.plugged/fzf/src/options_test.go	/^func TestParseSingleActionList(t *testing.T) {$/;"	f	package:fzf
TestParseSingleActionListError	.plugged/fzf/src/options_test.go	/^func TestParseSingleActionListError(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	.plugged/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	.plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	.plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPowershellCommands	.plugged/fzf/src/terminal_test.go	/^func TestPowershellCommands(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	.plugged/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreviewOpts	.plugged/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntry	.plugged/fzf/src/terminal_test.go	/^func TestQuoteEntry(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	.plugged/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	.plugged/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestRepeatToFill	.plugged/fzf/src/util/util_test.go	/^func TestRepeatToFill(t *testing.T) {$/;"	f	package:util
TestReplacePlaceholder	.plugged/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	.plugged/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestRunesWidth	.plugged/fzf/src/util/util_test.go	/^func TestRunesWidth(t *testing.T) {$/;"	f	package:util
TestShell	.plugged/fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSplitNth	.plugged/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	.plugged/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestSuffixMatch	.plugged/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestToCharsAscii	.plugged/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	.plugged/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	.plugged/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTransform	.plugged/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	.plugged/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	.plugged/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestTruncate	.plugged/fzf/src/util/util_test.go	/^func TestTruncate(t *testing.T) {$/;"	f	package:util
TestUnixCommands	.plugged/fzf/src/terminal_test.go	/^func TestUnixCommands(t *testing.T) {$/;"	f	package:fzf
TestValidateSign	.plugged/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f	package:fzf
TestWindowsCommands	.plugged/fzf/src/terminal_test.go	/^func TestWindowsCommands(t *testing.T) {$/;"	f	package:fzf
TestZsh	.plugged/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
Testing	.plugged/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing
Tests for EditorConfig Plugins	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/README.rst	/^Tests for EditorConfig Plugins$/;"	c
Tests for End of Line Property	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/end_of_line.rst	/^Tests for End of Line Property$/;"	c
Tests for Indentation Properties	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/indentation.rst	/^Tests for Indentation Properties$/;"	c
Tests for Newline at end of File	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/insert_final_newline.rst	/^Tests for Newline at end of File$/;"	s	chapter:Insert Final Newline Property
Tests for Newlines	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^Tests for Newlines$/;"	c
Tests for Newlines	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/end_of_line.rst	/^Tests for Newlines$/;"	s	chapter:Tests for End of Line Property
The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)	.plugged/nerdtree/README.markdown	/^# The NERDTree [![Vint](https:\/\/github.com\/preservim\/nerdtree\/workflows\/Vint\/badge.svg)](/;"	c
Theme	.plugged/fzf/src/options.go	/^	Theme        *tui.ColorTheme$/;"	m	struct:fzf.Options	typeref:typename:*tui.ColorTheme
Things to consider when contributing	.plugged/vim-snippets/README.md	/^Things to consider when contributing$/;"	s	chapter:snipMate & UltiSnip Snippets
Third-party libraries used	.plugged/fzf/BUILD.md	/^Third-party libraries used$/;"	s	chapter:Building fzf
Tips	.plugged/fzf/README-VIM.md	/^Tips$/;"	s	chapter:FZF Vim integration
Tips	.plugged/fzf/README.md	/^Tips$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tmux	.plugged/fzf/test/test_go.rb	/^class Tmux$/;"	c
ToChars	.plugged/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util	typeref:typename:Chars
ToDo	.plugged/gruvbox/README.md	/^ToDo$/;"	s
ToRunes	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
ToString	.plugged/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f	struct:fzf.ansiState	typeref:typename:string
ToString	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	struct:util.Chars	typeref:typename:string
ToTty	.plugged/fzf/src/util/util.go	/^func ToTty() bool {$/;"	f	package:util	typeref:typename:bool
Toggle	.plugged/fzf/src/options.go	/^func (o *previewOpts) Toggle() {$/;"	f	struct:fzf.previewOpts
ToggleSort	.plugged/fzf/src/options.go	/^	ToggleSort   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Toggling between data sources	.plugged/fzf/ADVANCED.md	/^### Toggling between data sources$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Token	.plugged/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
Tokenize	.plugged/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Top	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Top	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Top	.plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Window	typeref:typename:int
TrailingWhitespaces	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Transform	.plugged/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
TransparentDisable	.plugged/vim-transparent/plugin/background.vim	/^    command -bar -nargs=0 TransparentDisable call background#disable()$/;"	c
TransparentEnable	.plugged/vim-transparent/plugin/background.vim	/^    command -bar -nargs=0 TransparentEnable call background#enable()$/;"	c
TransparentToggle	.plugged/vim-transparent/plugin/background.vim	/^    command -bar -nargs=0 TransparentToggle call background#toggle()$/;"	c
Trim Trailing Whitespace Property	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Trim Trailing Whitespace Property$/;"	c
TrimLength	.plugged/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	struct:fzf.Item	typeref:typename:uint16
TrimLength	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	struct:util.Chars	typeref:typename:uint16
TrimTrailingWhitespaces	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces() {$/;"	f	struct:util.Chars
Trimming Whitespace	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/trim_trailing_whitespace.rst	/^Trimming Whitespace$/;"	s	chapter:Trim Trailing Whitespace Property
Truncate	.plugged/fzf/src/util/util.go	/^func Truncate(input string, limit int) ([]rune, int) {$/;"	f	package:util	typeref:typename:([]rune, int)
TtyIn	.plugged/fzf/src/tui/ttyname_unix.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
TtyIn	.plugged/fzf/src/tui/ttyname_windows.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
Turning into a different process	.plugged/fzf/README.md	/^### Turning into a different process$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Type	.plugged/fzf/src/tui/tui.go	/^	Type       EventType$/;"	m	struct:tui.Event	typeref:typename:EventType
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
UNAME_M	.plugged/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNSETS	.plugged/fzf/test/test_go.rb	/^UNSETS = %w[$/;"	C
UPDATED_SOURCE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
UTF-16BE Character Set	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^UTF-16BE Character Set$/;"	s	chapter:Tests for Newlines
UTF-16LE Character Set	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^UTF-16LE Character Set$/;"	s	chapter:Tests for Newlines
UTF-8 Character Set	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^UTF-8 Character Set$/;"	s	chapter:Tests for Newlines
UTF-8 with BOM Character Set	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^UTF-8 with BOM Character Set$/;"	s	chapter:Tests for Newlines
Underline	.plugged/fzf/src/tui/dummy.go	/^	Underline     = Attr(1 << 3)$/;"	c	package:tui
Underline	.plugged/fzf/src/tui/tcell.go	/^	Underline          = Attr(tcell.AttrUnderline)$/;"	c	package:tui
Unicode	.plugged/fzf/src/options.go	/^	Unicode      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Unix-style Newlines	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/end_of_line.rst	/^Unix-style Newlines$/;"	S	section:Tests for Newlines
Unlock	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unwatch	.plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	struct:util.EventBox
Up	.plugged/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	.plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f	struct:fzf.Terminal
UpdateHeader	.plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	struct:fzf.Terminal
UpdateList	.plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger, reset bool) {$/;"	f	struct:fzf.Terminal
UpdateProgress	.plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	struct:fzf.Terminal
Updating the list of processes by pressing CTRL-R	.plugged/fzf/ADVANCED.md	/^### Updating the list of processes by pressing CTRL-R$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Upgrading fzf	.plugged/fzf/README.md	/^Upgrading fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	.plugged/fzf/README.md	/^Usage$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	.plugged/hop.nvim/README.md	/^# Usage$/;"	c
Usage	.plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:Usage$/;"	l
Usage	.plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Usage	.plugged/vim-transparent/README.md	/^## Usage$/;"	s	chapter:Screenshots
Use editorconfig-core-test in your project as a git submodule	.plugged/editorconfig-vim/tests/core/tests/README.md	/^### Use editorconfig-core-test in your project as a git submodule$/;"	S
Use editorconfig-core-test independently	.plugged/editorconfig-vim/tests/core/tests/README.md	/^### Use editorconfig-core-test independently$/;"	S
Using Homebrew	.plugged/fzf/README.md	/^### Using Homebrew$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Linux package managers	.plugged/fzf/README.md	/^### Using Linux package managers$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Makefile	.plugged/fzf/BUILD.md	/^### Using Makefile$/;"	S	section:Building fzf""Build instructions
Using [vim-plug](https://github.com/junegunn/vim-plug)	.plugged/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:fzf :heart: vim""Installation
Using fzf as the secondary filter	.plugged/fzf/ADVANCED.md	/^### Using fzf as the secondary filter$/;"	S	section:Advanced fzf examples""Ripgrep integration
Using git	.plugged/fzf/README.md	/^### Using git$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using packer	.plugged/hop.nvim/README.md	/^### Using packer$/;"	S	section:Getting started""Installation
Using the finder	.plugged/fzf/README.md	/^### Using the finder$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Using vim-plug	.plugged/hop.nvim/README.md	/^### Using vim-plug$/;"	S	section:Getting started""Installation
VERSION	.plugged/delimitMate/Makefile	/^VERSION  =  $(shell $(SED) -n -e '\/Current \\+release\/{s\/^ \\+\\([0-9.]\\+\\).*\/\\1\/;p;}' $/;"	m
VERSION	.plugged/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	.plugged/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null)$/;"	m
VERSION_REGEX	.plugged/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	.plugged/fzf/Makefile	/^VERSION_TRIM   := $(shell sed "s\/-.*\/\/" <<< $(VERSION))$/;"	m
VIM	.plugged/delimitMate/Makefile	/^VIM      =  vim$/;"	m
VIM	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^$global:VIM = Find-Vim$/;"	v
Vendor Snippets	.plugged/vim-snippets/README.md	/^Vendor Snippets$/;"	s	chapter:snipMate & UltiSnip Snippets
Verifying Character Set	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/charset.rst	/^Verifying Character Set$/;"	c
Verifying Newline Style	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/end_of_line.rst	/^Verifying Newline Style$/;"	s	chapter:Tests for End of Line Property
Version	.plugged/fzf/src/options.go	/^	Version      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Versions / dialects / ..	.plugged/vim-snippets/README.md	/^Versions \/ dialects \/ ..$/;"	c
Vertical bars	.plugged/indentLine/README.md	/^### Vertical bars$/;"	S	section:indentLine""Screenshots
Vim functions	.plugged/fzf.vim/README.md	/^#### Vim functions$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Vim plugin	.plugged/fzf/README.md	/^Vim plugin$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Vim transparent	.plugged/vim-transparent/README.md	/^# Vim transparent$/;"	c
Visible	.plugged/fzf/src/options.go	/^func (o *previewOpts) Visible() bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
Vundle	.plugged/neosnippet.vim/README.md	/^### Vundle$/;"	S	section:Neosnippet""Installation
Wait	.plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	struct:util.EventBox
WaitFor	.plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	struct:util.EventBox
Watch	.plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	struct:util.EventBox
What Tagbar is	.plugged/tagbar/README.md	/^## What Tagbar is$/;"	s	chapter:Tagbar: a class outline viewer for Vim
What Tagbar is not	.plugged/tagbar/README.md	/^## What Tagbar is not$/;"	s	chapter:Tagbar: a class outline viewer for Vim
What?	.plugged/vim-gutentags/README.md	/^## What?$/;"	s	chapter:Gutentags
Why you should use fzf on Vim	.plugged/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s	chapter:fzf :heart: vim
Why?	.plugged/vim-gutentags/README.md	/^## Why?$/;"	s	chapter:Gutentags
Width	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Width	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Width	.plugged/fzf/src/tui/tui.go	/^	Width() int$/;"	n	interface:tui.Window	typeref:typename:int
Window	.plugged/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
Windows	.plugged/fzf/README.md	/^### Windows$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Windows-style Newlines	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/tests/end_of_line.rst	/^Windows-style Newlines$/;"	S	section:Tests for Newlines
WithAttr	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
WithNth	.plugged/fzf/src/options.go	/^	WithNth      []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
WriteBookmarks	.plugged/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
Writing	.plugged/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s	chapter:Contributing
X	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
X	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
X	.plugged/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
X	.plugged/fzf/src/tui/tui.go	/^	X() int$/;"	n	interface:tui.Window	typeref:typename:int
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	colors/one.vim	/^  function! <SID>X(group, fg, bg, attr, ...)$/;"	f
XAPI	colors/one.vim	/^  fun <SID>XAPI(group, fg, bg, attr)$/;"	f
Y	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Y	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Y	.plugged/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
Y	.plugged/fzf/src/tui/tui.go	/^	Y() int$/;"	n	interface:tui.Window	typeref:typename:int
[License](LICENSE)	.plugged/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s	chapter:FZF Vim integration
[License](LICENSE)	.plugged/fzf/README.md	/^[License](LICENSE)$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
[Unreleased](https://github.com/morhetz/gruvbox/tree/HEAD)	.plugged/gruvbox/CHANGELOG.md	/^## [Unreleased](https:\/\/github.com\/morhetz\/gruvbox\/tree\/HEAD)$/;"	s	chapter:Change Log
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[v0.0.8](https://github.com/morhetz/gruvbox/tree/v0.0.8) (2012-12-08)	.plugged/gruvbox/CHANGELOG.md	/^## [v0.0.8](https:\/\/github.com\/morhetz\/gruvbox\/tree\/v0.0.8) (2012-12-08)$/;"	s	chapter:Change Log
[v1.3.5](https://github.com/morhetz/gruvbox/tree/v1.3.5) (2014-03-19)	.plugged/gruvbox/CHANGELOG.md	/^## [v1.3.5](https:\/\/github.com\/morhetz\/gruvbox\/tree\/v1.3.5) (2014-03-19)$/;"	s	chapter:Change Log
]]	.plugged/fzf/shell/completion.bash	/^  if [[ "$(type -t _fzf_comprun 2>&1)" = function ]]; then$/;"	f
]]	.plugged/fzf/shell/completion.zsh	/^  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then$/;"	f
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
__fsel	.plugged/fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	.plugged/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	.plugged/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	.plugged/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_defc	.plugged/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_extract_command	.plugged/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	.plugged/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	.plugged/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	.plugged/fzf/shell/key-bindings.bash	/^__fzf_history__() {$/;"	f
__fzf_orig_completion	.plugged/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_select__	.plugged/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	.plugged/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	.plugged/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
__init__	.plugged/neosnippet.vim/rplugin/python3/denite/source/neosnippet.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	.plugged/neosnippet.vim/rplugin/python3/deoplete/sources/neosnippet.py	/^    def __init__(self, vim):$/;"	m	class:Source
_cache	.plugged/fzf/src/pattern.go	/^	_cache        ChunkCache$/;"	v	package:fzf	typeref:typename:ChunkCache
_colorToAttribute	.plugged/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_fzf_alias_completion	.plugged/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_compgen_dir	.plugged/fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	.plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	.plugged/fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	.plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	.plugged/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	.plugged/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	.plugged/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	.plugged/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	.plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	.plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	.plugged/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	.plugged/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	.plugged/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	.plugged/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	.plugged/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	.plugged/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	.plugged/fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	.plugged/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	.plugged/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	.plugged/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	.plugged/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	.plugged/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	.plugged/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	.plugged/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	.plugged/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	.plugged/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	.plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	.plugged/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_parse_comments	.plugged/vim-snippets/pythonx/vimsnippets.py	/^def _parse_comments(s):$/;"	f
_patternCache	.plugged/fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v	package:fzf	typeref:typename:map[string]*Pattern
_prevMouseButton	.plugged/fzf/src/tui/tcell.go	/^	_prevMouseButton tcell.ButtonMask$/;"	v	package:tui	typeref:typename:tcell.ButtonMask
_screen	.plugged/fzf/src/tui/tcell.go	/^	_screen          tcell.Screen$/;"	v	package:tui	typeref:typename:tcell.Screen
_splitRegex	.plugged/fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
`--filter` will not block when sort is disabled	.plugged/fzf/CHANGELOG.md	/^#### `--filter` will not block when sort is disabled$/;"	t	subsection:CHANGELOG""0.9.4""Improvements
`--height`	.plugged/fzf/ADVANCED.md	/^### `--height`$/;"	S	section:Advanced fzf examples""Screen Layout
`:FZF[!]`	.plugged/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s	chapter:FZF Vim integration
`fzf#run`	.plugged/fzf/README-VIM.md	/^`fzf#run`$/;"	s	chapter:FZF Vim integration
`fzf#wrap`	.plugged/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s	chapter:FZF Vim integration
`fzf-tmux`	.plugged/fzf/ADVANCED.md	/^### `fzf-tmux`$/;"	S	section:Advanced fzf examples""Screen Layout
`fzf-tmux` script	.plugged/fzf/README.md	/^`fzf-tmux` script$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
a	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^    $a = $argv[$idx]$/;"	v
a	.plugged/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action	typeref:typename:string
aboveOrBelow	.plugged/fzf/src/options.go	/^func (a previewOpts) aboveOrBelow() bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
actAbort	.plugged/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	.plugged/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	.plugged/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actBackwardChar	.plugged/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	.plugged/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardDeleteCharEOF	.plugged/fzf/src/terminal.go	/^	actBackwardDeleteCharEOF$/;"	c	package:fzf
actBackwardKillWord	.plugged/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	.plugged/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBecome	.plugged/fzf/src/terminal.go	/^	actBecome$/;"	c	package:fzf
actBeginningOfLine	.plugged/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actCancel	.plugged/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actChangeBorderLabel	.plugged/fzf/src/terminal.go	/^	actChangeBorderLabel$/;"	c	package:fzf
actChangePreview	.plugged/fzf/src/terminal.go	/^	actChangePreview$/;"	c	package:fzf
actChangePreviewLabel	.plugged/fzf/src/terminal.go	/^	actChangePreviewLabel$/;"	c	package:fzf
actChangePreviewWindow	.plugged/fzf/src/terminal.go	/^	actChangePreviewWindow$/;"	c	package:fzf
actChangePrompt	.plugged/fzf/src/terminal.go	/^	actChangePrompt$/;"	c	package:fzf
actChangeQuery	.plugged/fzf/src/terminal.go	/^	actChangeQuery$/;"	c	package:fzf
actClearQuery	.plugged/fzf/src/terminal.go	/^	actClearQuery$/;"	c	package:fzf
actClearScreen	.plugged/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actClearSelection	.plugged/fzf/src/terminal.go	/^	actClearSelection$/;"	c	package:fzf
actClose	.plugged/fzf/src/terminal.go	/^	actClose$/;"	c	package:fzf
actDeleteChar	.plugged/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEOF	.plugged/fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c	package:fzf
actDeselect	.plugged/fzf/src/terminal.go	/^	actDeselect$/;"	c	package:fzf
actDeselectAll	.plugged/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDisableSearch	.plugged/fzf/src/terminal.go	/^	actDisableSearch$/;"	c	package:fzf
actDown	.plugged/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEnableSearch	.plugged/fzf/src/terminal.go	/^	actEnableSearch$/;"	c	package:fzf
actEndOfLine	.plugged/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExecute	.plugged/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	.plugged/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	.plugged/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actFirst	.plugged/fzf/src/terminal.go	/^	actFirst$/;"	c	package:fzf
actForwardChar	.plugged/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	.plugged/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	.plugged/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	.plugged/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actHidePreview	.plugged/fzf/src/terminal.go	/^	actHidePreview$/;"	c	package:fzf
actIgnore	.plugged/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf	typeref:type:actionType
actInvalid	.plugged/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	.plugged/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	.plugged/fzf/src/terminal.go	/^	actJumpAccept$/;"	c	package:fzf
actKillLine	.plugged/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	.plugged/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actLast	.plugged/fzf/src/terminal.go	/^	actLast$/;"	c	package:fzf
actMouse	.plugged/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	.plugged/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actNextSelected	.plugged/fzf/src/terminal.go	/^	actNextSelected$/;"	c	package:fzf
actPageDown	.plugged/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	.plugged/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPosition	.plugged/fzf/src/terminal.go	/^	actPosition$/;"	c	package:fzf
actPrevHistory	.plugged/fzf/src/terminal.go	/^	actPrevHistory$/;"	c	package:fzf
actPrevSelected	.plugged/fzf/src/terminal.go	/^	actPrevSelected$/;"	c	package:fzf
actPreview	.plugged/fzf/src/terminal.go	/^	actPreview$/;"	c	package:fzf
actPreviewBottom	.plugged/fzf/src/terminal.go	/^	actPreviewBottom$/;"	c	package:fzf
actPreviewDown	.plugged/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewHalfPageDown	.plugged/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c	package:fzf
actPreviewHalfPageUp	.plugged/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c	package:fzf
actPreviewPageDown	.plugged/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	.plugged/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewTop	.plugged/fzf/src/terminal.go	/^	actPreviewTop$/;"	c	package:fzf
actPreviewUp	.plugged/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPrintQuery	.plugged/fzf/src/terminal.go	/^	actPrintQuery$/;"	c	package:fzf
actPut	.plugged/fzf/src/terminal.go	/^	actPut$/;"	c	package:fzf
actRebind	.plugged/fzf/src/terminal.go	/^	actRebind$/;"	c	package:fzf
actRefreshPreview	.plugged/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c	package:fzf
actReload	.plugged/fzf/src/terminal.go	/^	actReload$/;"	c	package:fzf
actReloadSync	.plugged/fzf/src/terminal.go	/^	actReloadSync$/;"	c	package:fzf
actReplaceQuery	.plugged/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actRune	.plugged/fzf/src/terminal.go	/^	actRune$/;"	c	package:fzf
actSelect	.plugged/fzf/src/terminal.go	/^	actSelect$/;"	c	package:fzf
actSelectAll	.plugged/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actShowPreview	.plugged/fzf/src/terminal.go	/^	actShowPreview$/;"	c	package:fzf
actSigStop	.plugged/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actToggle	.plugged/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	.plugged/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleDown	.plugged/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleIn	.plugged/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleOut	.plugged/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	.plugged/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	.plugged/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSearch	.plugged/fzf/src/terminal.go	/^	actToggleSearch$/;"	c	package:fzf
actToggleSort	.plugged/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleUp	.plugged/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actTransformBorderLabel	.plugged/fzf/src/terminal.go	/^	actTransformBorderLabel$/;"	c	package:fzf
actTransformPreviewLabel	.plugged/fzf/src/terminal.go	/^	actTransformPreviewLabel$/;"	c	package:fzf
actTransformPrompt	.plugged/fzf/src/terminal.go	/^	actTransformPrompt$/;"	c	package:fzf
actTransformQuery	.plugged/fzf/src/terminal.go	/^	actTransformQuery$/;"	c	package:fzf
actUnbind	.plugged/fzf/src/terminal.go	/^	actUnbind$/;"	c	package:fzf
actUnixLineDiscard	.plugged/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	.plugged/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUp	.plugged/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	.plugged/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	.plugged/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
actionNameRegexp	.plugged/fzf/src/options.go	/^	actionNameRegexp *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
actionType	.plugged/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf	typeref:typename:int
activePreviewOpts	.plugged/fzf/src/terminal.go	/^	activePreviewOpts  *previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:*previewOpts
activeTempFiles	.plugged/fzf/src/terminal.go	/^var activeTempFiles []string$/;"	v	package:fzf	typeref:typename:[]string
add_virt_cur	.plugged/hop.nvim/lua/hop/init.lua	/^local function add_virt_cur(ns)$/;"	f
adjustMarginAndPadding	.plugged/fzf/src/terminal.go	/^func (t *Terminal) adjustMarginAndPadding() (int, int, [4]int, [4]int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int, [4]int, [4]int)
airline#themes#gruvbox#refresh	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^function! airline#themes#gruvbox#refresh()$/;"	f
algo	.plugged/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	.plugged/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	.plugged/fzf/src/algo/normalize.go	/^package algo$/;"	p
all	.plugged/delimitMate/Makefile	/^all: zip gzip$/;"	t
all	.plugged/delimitMate/test/Makefile	/^all: build\/runVimTests$/;"	t
all	.plugged/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
allItems	.plugged/fzf/src/terminal_test.go	/^	allItems []*Item$/;"	m	struct:fzf.give	typeref:typename:[]*Item
alloc16	.plugged/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo	typeref:typename:(int, []int16)
alloc32	.plugged/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo	typeref:typename:(int, []int32)
alternative	.plugged/fzf/src/options.go	/^	alternative *previewOpts$/;"	m	struct:fzf.previewOpts	typeref:typename:*previewOpts
ansi	.plugged/fzf/src/terminal.go	/^	ansi               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
ansiBenchmarkString	.plugged/fzf/src/ansi_test.go	/^const ansiBenchmarkString = "\\x1b[38;5;81m\\x1b[01;31m\\x1b[Kkernel\/\\x1b[0m\\x1b[38:5:81mbpf\//;"	c	package:fzf
ansiLabelPrinter	.plugged/fzf/src/terminal.go	/^func (t *Terminal) ansiLabelPrinter(str string, color *tui.ColorPair, fill bool) (labelPrinter, /;"	f	struct:fzf.Terminal	typeref:typename:(labelPrinter, int)
ansiOffset	.plugged/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegexReference	.plugged/fzf/src/ansi_test.go	/^var ansiRegexReference = regexp.MustCompile("(?:\\x1b[\\\\[()][0-9;:]*[a-zA-Z@]|\\x1b][0-9][;:][/;"	v	package:fzf
ansiState	.plugged/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
any_include?	.plugged/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	method:Tmux.until
append	.plugged/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	struct:fzf.History	typeref:typename:error
append_line	.plugged/fzf/install	/^append_line() {$/;"	f
apply_dimming	.plugged/hop.nvim/lua/hop/init.lua	/^local function apply_dimming(hint_state, opts)$/;"	f
argesc	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^function global:argesc($arg) {$/;"	f
args=	.plugged/fzf/bin/fzf-tmux	/^args=()$/;"	f
args=	.plugged/fzf/shell/completion.bash	/^    args=()$/;"	f
args=	.plugged/fzf/shell/completion.zsh	/^    args=()$/;"	f
argv	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$argv = @(de64_args($args))$/;"	v
asTcellColor	.plugged/fzf/src/tui/tcell.go	/^func asTcellColor(color Color) tcell.Color {$/;"	f	package:tui	typeref:typename:tcell.Color
asciiFuzzyIndex	.plugged/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) int {$/;"	f	package:algo	typeref:typename:int
ask	.plugged/fzf/install	/^ask() {$/;"	f
ask	.plugged/fzf/uninstall	/^ask() {$/;"	f
assert	.plugged/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assert	.plugged/fzf/src/tui/tcell_test.go	/^func assert(t *testing.T, context string, got interface{}, want interface{}) bool {$/;"	f	package:tui	typeref:typename:bool
assertMatch	.plugged/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	.plugged/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
assert_block	.plugged/fzf/test/test_go.rb	/^  def assert_block(expected, lines)$/;"	f	class:TestGoFZF
assert_equal	.plugged/fzf/test/test_go.rb	/^  def assert_equal(expected, actual)$/;"	f	class:TestBase
assert_equal_org	.plugged/fzf/test/test_go.rb	/^  alias assert_equal_org assert_equal$/;"	a	class:TestBase
at	.plugged/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem	typeref:typename:time.Time
atof	.plugged/fzf/src/options.go	/^func atof(str string) float64 {$/;"	f	package:fzf	typeref:typename:float64
atoi	.plugged/fzf/src/options.go	/^func atoi(str string) int {$/;"	f	package:fzf	typeref:typename:int
atoi	.plugged/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
attr	.plugged/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Attr
attr	.plugged/fzf/src/tui/tui.go	/^	attr Attr$/;"	m	struct:tui.ColorPair	typeref:typename:Attr
attrCodes	.plugged/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui	typeref:typename:[]string
author	.plugged/gruvbox/package.json	/^  "author": "Pavel Pertsev <morhetz@gmail.com>",$/;"	s
author	.plugged/vim-snippets/addon-info.json	/^  "author" : "community",$/;"	s
auto	.plugged/fzf/src/options.go	/^	auto    bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
awkBlack	.plugged/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	.plugged/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	.plugged/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf	typeref:typename:([]string, int)
awkWhite	.plugged/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
b:current_syntax	.plugged/neosnippet.vim/syntax/neosnippet.vim	/^let b:current_syntax = 'snippet'$/;"	v
b:current_syntax	.plugged/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
b:did_indent	.plugged/neosnippet.vim/indent/neosnippet.vim	/^let b:did_indent = 1$/;"	v
b:done_vimsnippets	.plugged/vim-snippets/plugin/vimsnippets.vim	/^let b:done_vimsnippets = 1$/;"	v
b:undo_ftplugin	.plugged/neosnippet.vim/ftplugin/neosnippet.vim	/^    let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	.plugged/neosnippet.vim/ftplugin/neosnippet.vim	/^    let b:undo_ftplugin = '|'$/;"	v
b:undo_ftplugin	.plugged/neosnippet.vim/ftplugin/neosnippet.vim	/^let b:undo_ftplugin .= '$/;"	v
b:undo_indent	.plugged/neosnippet.vim/indent/neosnippet.vim	/^  let b:undo_indent .= '|'$/;"	v
b:undo_indent	.plugged/neosnippet.vim/indent/neosnippet.vim	/^  let b:undo_indent = ''$/;"	v
b:undo_indent	.plugged/neosnippet.vim/indent/neosnippet.vim	/^let b:undo_indent .= 'setlocal$/;"	v
background#clear_background	.plugged/vim-transparent/autoload/background.vim	/^function! background#clear_background()$/;"	f
background#disable	.plugged/vim-transparent/autoload/background.vim	/^function! background#disable()$/;"	f
background#enable	.plugged/vim-transparent/autoload/background.vim	/^function! background#enable()$/;"	f
background#toggle	.plugged/vim-transparent/autoload/background.vim	/^function! background#toggle()$/;"	f
bar	.plugged/fzf/src/terminal.go	/^	bar        []bool$/;"	m	struct:fzf.previewer	typeref:typename:[]bool
bar	.plugged/fzf/src/terminal.go	/^	bar      bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
bash	.plugged/fzf/test/test_go.rb	/^    def bash$/;"	S	class:Shell
basicMatch	.plugged/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
basic_args	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$basic_args = '-nNes','-i','NONE','-u','NONE','-U','NONE'   #, '-V1'$/;"	v
begin	.plugged/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range	typeref:typename:int
bench	.plugged/fzf/Makefile	/^bench:$/;"	t
bg	.plugged/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
bg	.plugged/fzf/src/tui/light.go	/^	bg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
bg	.plugged/fzf/src/tui/tui.go	/^	bg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
bin/fzf	.plugged/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
bonusAt	.plugged/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusBoundary	.plugged/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusBoundaryDelimiter	.plugged/fzf/src/algo/algo.go	/^	bonusBoundaryDelimiter int16 = bonusBoundary + 1$/;"	v	package:algo	typeref:typename:int16
bonusBoundaryWhite	.plugged/fzf/src/algo/algo.go	/^	bonusBoundaryWhite int16 = bonusBoundary + 2$/;"	v	package:algo	typeref:typename:int16
bonusCamel123	.plugged/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtension$/;"	c	package:algo
bonusConsecutive	.plugged/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtension)$/;"	c	package:algo
bonusFirstCharMultiplier	.plugged/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	.plugged/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusNonWord	.plugged/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
border	.plugged/fzf/src/options.go	/^	border      tui.BorderShape$/;"	m	struct:fzf.previewOpts	typeref:typename:tui.BorderShape
border	.plugged/fzf/src/terminal.go	/^	border             tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
border	.plugged/fzf/src/tui/light.go	/^	border   BorderStyle$/;"	m	struct:tui.LightWindow	typeref:typename:BorderStyle
borderLabel	.plugged/fzf/src/terminal.go	/^	borderLabel        labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
borderLabelLen	.plugged/fzf/src/terminal.go	/^	borderLabelLen     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
borderLabelOpts	.plugged/fzf/src/terminal.go	/^	borderLabelOpts    labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
borderLines	.plugged/fzf/src/terminal.go	/^func borderLines(shape tui.BorderShape) int {$/;"	f	package:fzf	typeref:typename:int
borderShape	.plugged/fzf/src/terminal.go	/^	borderShape        tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
borderStyle	.plugged/fzf/src/tui/tcell.go	/^	borderStyle BorderStyle$/;"	m	struct:tui.TcellWindow	typeref:typename:BorderStyle
borderWidth	.plugged/fzf/src/terminal.go	/^	borderWidth        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
bottom	.plugged/fzf/src/options.go	/^	bottom bool$/;"	m	struct:fzf.labelOpts	typeref:typename:bool
bottomLeft	.plugged/fzf/src/tui/tui.go	/^	bottomLeft  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomRight	.plugged/fzf/src/tui/tui.go	/^	bottomRight rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
buffer	.plugged/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer	typeref:typename:[]byte
build	.plugged/fzf/Makefile	/^build:$/;"	t
build/VimTAP	.plugged/delimitMate/test/Makefile	/^build\/VimTAP:$/;"	t
build/runVimTests	.plugged/delimitMate/test/Makefile	/^build\/runVimTests: build\/VimTAP$/;"	t
buildCacheKey	.plugged/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
buildLists	.plugged/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf	typeref:typename:([][]Result, []Result)
buildPlusList	.plugged/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []*Item)
buildResult	.plugged/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf	typeref:typename:Result
byBegin	.plugged/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byChunk	.plugged/fzf/src/options.go	/^	byChunk$/;"	c	package:fzf
byEnd	.plugged/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	.plugged/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byScore	.plugged/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf	typeref:type:criterion
byTimeOrder	.plugged/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf	typeref:typename:[]selectedItem
cS	.plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cache	.plugged/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache	typeref:typename:map[*Chunk]*queryCache
cacheKey	.plugged/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern	typeref:typename:string
cacheable	.plugged/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	struct:fzf.Merger	typeref:typename:bool
cacheable	.plugged/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
calculateScore	.plugged/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo	typeref:typename:(int, *[]int)
calculateSize	.plugged/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int, pad int) int {$/;"	f	package:fzf	typeref:typename:int
canPreview	.plugged/fzf/src/terminal.go	/^func (t *Terminal) canPreview() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
cancelPreview	.plugged/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f	struct:fzf.Terminal
capture	.plugged/fzf/test/test_go.rb	/^  def capture$/;"	f	class:Tmux
caseSensitive	.plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
caseSensitive	.plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term	typeref:typename:bool
charClass	.plugged/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo	typeref:typename:int
charClassOf	.plugged/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfAscii	.plugged/fzf/src/algo/algo.go	/^func charClassOfAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfNonAscii	.plugged/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charDelimiter	.plugged/fzf/src/algo/algo.go	/^	charDelimiter$/;"	c	package:algo
charLetter	.plugged/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	.plugged/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charNonWord	.plugged/fzf/src/algo/algo.go	/^	charNonWord$/;"	c	package:algo
charNumber	.plugged/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	.plugged/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
charWhite	.plugged/fzf/src/algo/algo.go	/^	charWhite charClass = iota$/;"	c	package:algo	typeref:type:charClass
chars	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^        $chars = ''$/;"	v
charsMatch	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^    const charsMatch = \/\\S+$\/.exec(args.context.input);$/;"	C	method:Source.gather
checkAscii	.plugged/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util	typeref:typename:(bool, int)
check_binary	.plugged/fzf/install	/^check_binary() {$/;"	f
check_binary	.plugged/fzf/install.ps1	/^function check_binary () {$/;"	f
check_opts	.plugged/hop.nvim/lua/hop/init.lua	/^local function check_opts(opts)$/;"	f
chunkSize	.plugged/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf	typeref:typename:int
chunks	.plugged/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList	typeref:typename:[]*Chunk
chunks	.plugged/fzf/src/matcher.go	/^	chunks     []*Chunk$/;"	m	struct:fzf.MatchRequest	typeref:typename:[]*Chunk
chunks	.plugged/fzf/src/merger.go	/^	chunks  *[]*Chunk$/;"	m	struct:fzf.Merger	typeref:typename:*[]*Chunk
clean	.plugged/delimitMate/Makefile	/^clean:$/;"	t
clean	.plugged/fzf/Makefile	/^clean:$/;"	t
cleanExit	.plugged/fzf/src/terminal.go	/^	cleanExit          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cleanTemporaryFiles	.plugged/fzf/src/terminal.go	/^func cleanTemporaryFiles() {$/;"	f	package:fzf
cleanse	.plugged/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui	typeref:typename:string
cleanup	.plugged/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clearCache	.plugged/fzf/src/matcher.go	/^	clearCache bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
clearChunkCache	.plugged/fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f	package:fzf
clearCode	.plugged/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c	package:fzf	typeref:typename:string
clearOnExit	.plugged/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
clearPatternCache	.plugged/fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f	package:fzf
clear_namespace	.plugged/hop.nvim/lua/hop/init.lua	/^local function clear_namespace(buf_list, hl_ns)$/;"	f
clicks	.plugged/fzf/src/tui/light.go	/^	clicks        [][2]int$/;"	m	struct:tui.LightRenderer	typeref:typename:[][2]int
clicks	.plugged/fzf/src/tui/tui.go	/^	clicks       [][2]int$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:[][2]int
closePlatform	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
closePlatform	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
cmd	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$cmd = ''$/;"	v
colBlack	.plugged/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui	typeref:type:Color
colBlue	.plugged/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	.plugged/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	.plugged/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c	package:tui	typeref:type:Color
colGreen	.plugged/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	.plugged/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	.plugged/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colUndefined	.plugged/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui	typeref:type:Color
colWhite	.plugged/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	.plugged/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
color	.plugged/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset	typeref:typename:ansiState
color	.plugged/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.ColorPair
color	.plugged/fzf/src/tui/tcell.go	/^	color       bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
color	colors/one.vim	/^  fun <SID>color(r, g, b)$/;"	f
colorCodes	.plugged/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui	typeref:typename:[]string
colorOffset	.plugged/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	.plugged/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, colBase tui.Col/;"	f	struct:fzf.Result	typeref:typename:[]colorOffset
colored	.plugged/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
colored	.plugged/fzf/src/tui/light.go	/^	colored  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
colors	.plugged/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]ansiOffset
colors_name	colors/NeoSolarized.vim	/^let colors_name = "NeoSolarized"$/;"	v
column	.plugged/fzf/src/options.go	/^	column int$/;"	m	struct:fzf.labelOpts	typeref:typename:int
comma	.plugged/delimitMate/Makefile	/^comma    := ,$/;"	m
command	.plugged/fzf/src/options.go	/^	command     string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
command	.plugged/fzf/src/reader.go	/^	command  *string$/;"	m	struct:fzf.Reader	typeref:typename:*string
command	.plugged/fzf/src/terminal.go	/^	command *string$/;"	m	struct:fzf.searchRequest	typeref:typename:*string
commands	.plugged/delimitMate/test/expand_cr.vim	/^  let commands = []$/;"	v
commands	.plugged/delimitMate/test/expand_cr.vim	/^let commands = []$/;"	v
commentary.vim	.plugged/vim-commentary/README.markdown	/^# commentary.vim$/;"	c
compareRanks	.plugged/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	.plugged/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
complete	.plugged/vim-snippets/pythonx/vimsnippets.py	/^def complete(tab, opts):$/;"	f
cond	.plugged/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox	typeref:typename:*sync.Cond
config_name	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^                $config_name = $argv[$idx]$/;"	v
config_name	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$config_name = '.editorconfig'$/;"	v
configuration	.plugged/vim-ripgrep/README.md	/^## configuration$/;"	s	chapter:vim-ripgrep
consoleDevice	.plugged/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c	package:tui	typeref:typename:string
consoleFlagsInput	.plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_IN/;"	v	package:tui
consoleFlagsOutput	.plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESS/;"	v	package:tui
constrain	.plugged/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	struct:fzf.Terminal
convertBoolToInt32	.plugged/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f	package:util	typeref:typename:int32
coordinatorDelayMax	.plugged/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
coordinatorDelayStep	.plugged/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
copySlice	.plugged/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
count	.plugged/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk	typeref:typename:int
count	.plugged/fzf/src/merger.go	/^	count   int$/;"	m	struct:fzf.Merger	typeref:typename:int
count	.plugged/fzf/src/terminal.go	/^	count              int$/;"	m	struct:fzf.Terminal	typeref:typename:int
counts	.plugged/fzf/test/test_go.rb	/^          def counts$/;"	f	method:Tmux.until
cprint2	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
create_file	.plugged/fzf/install	/^create_file() {$/;"	f
create_hint_state	.plugged/hop.nvim/lua/hop/init.lua	/^local function create_hint_state(opts)$/;"	f
create_jump_targets_for_line	.plugged/hop.nvim/lua/hop/jump_target.lua	/^local function create_jump_targets_for_line($/;"	f
create_vim	.plugged/editorconfig-vim/tests/plugin/spec/editorconfig_spec.rb	/^def create_vim(*initial_commands)$/;"	f
criterion	.plugged/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf	typeref:typename:int
crlf	.plugged/fzf/src/server.go	/^	crlf             = "\\r\\n"$/;"	c	package:fzf
cs	.plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
csi	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) {$/;"	f	unknown:tui.LightRenderer
csi	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) {$/;"	f	struct:tui.LightWindow
csiColor	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
current	.plugged/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	struct:fzf.History	typeref:typename:string
current	.plugged/fzf/src/terminal.go	/^	current  bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
currentItem	.plugged/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	struct:fzf.Terminal	typeref:typename:*Item
cursor	.plugged/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History	typeref:typename:int
cursors	.plugged/fzf/src/merger.go	/^	cursors []int$/;"	m	struct:fzf.Merger	typeref:typename:[]int
cx	.plugged/fzf/src/terminal.go	/^	cx                 int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	.plugged/fzf/src/terminal.go	/^	cy                 int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cycle	.plugged/fzf/src/options.go	/^	cycle       bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
cycle	.plugged/fzf/src/terminal.go	/^	cycle              bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
d	autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
dd	autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
de64_args	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^function de64_args($argv) {$/;"	f
debug	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^    $global:debug="${DIR}\/${global:debug}"$/;"	v
debug	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^$global:debug=$env:EDITORCONFIG_DEBUG  # Debug filename$/;"	v
debugV2	.plugged/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
defaultCommand	.plugged/fzf/src/constants.go	/^var defaultCommand string$/;"	v	package:fzf	typeref:typename:string
defaultEscDelay	.plugged/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	.plugged/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	.plugged/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf	typeref:typename:int
defaultInfoSep	.plugged/fzf/src/options.go	/^const defaultInfoSep = " < "$/;"	c	package:fzf
defaultJumpLabels	.plugged/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf	typeref:typename:string
defaultKeymap	.plugged/fzf/src/terminal.go	/^func defaultKeymap() map[tui.Event][]*action {$/;"	f	package:fzf	typeref:typename:map[tui.Event][]*action
defaultMargin	.plugged/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
defaultOptions	.plugged/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
defaultPreviewOpts	.plugged/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f	package:fzf	typeref:typename:previewOpts
defaultTheme	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
defaultWidth	.plugged/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
dein.vim	.plugged/neosnippet.vim/README.md	/^### dein.vim$/;"	S	section:Neosnippet""Installation
delChar	.plugged/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delimNil	.plugged/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
delimitMate	.plugged/delimitMate/plugin/delimitMate.vim	/^augroup delimitMate$/;"	a
delimitMate#BS	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#BS() " {{{$/;"	f
delimitMate#ExpandReturn	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandReturn() "{{{$/;"	f
delimitMate#ExpandSpace	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandSpace() "{{{$/;"	f
delimitMate#Get	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Get(...) "{{{$/;"	f
delimitMate#IsEmptyPair	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#IsEmptyPair(str) "{{{$/;"	f
delimitMate#JumpAny	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpAny(...) " {{{$/;"	f
delimitMate#JumpMany	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpMany() " {{{$/;"	f
delimitMate#JumpOut	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpOut(char) "{{{$/;"	f
delimitMate#ParenDelim	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ParenDelim(right) " {{{$/;"	f
delimitMate#QuoteDelim	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#QuoteDelim(char) "{{{$/;"	f
delimitMate#Set	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Set(...) "{{{$/;"	f
delimitMate#ShouldJump	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ShouldJump(...) "{{{$/;"	f
delimitMate#SkipDelim	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#SkipDelim(char) "{{{$/;"	f
delimitMate#Test	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Test() "{{{$/;"	f
delimitMate#WithinEmptyPair	.plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#WithinEmptyPair() "{{{$/;"	f
delimitMate_version	.plugged/delimitMate/plugin/delimitMate.vim	/^let delimitMate_version = "2.8"$/;"	v
delimiter	.plugged/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern	typeref:typename:Delimiter
delimiter	.plugged/fzf/src/terminal.go	/^	delimiter          Delimiter$/;"	m	struct:fzf.Terminal	typeref:typename:Delimiter
delimiterChars	.plugged/fzf/src/algo/algo.go	/^var delimiterChars = "\/,:;|"$/;"	v	package:algo
delimiterRegexp	.plugged/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf	typeref:typename:Delimiter
dependencies	.plugged/vim-snippets/addon-info.json	/^  "dependencies" : {$/;"	o
description	.plugged/vim-snippets/addon-info.json	/^  "description" : "community driven set of snippets for snipmate"$/;"	s
deselectItem	.plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	struct:fzf.Terminal
deselectItemChanged	.plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
devPrefixes	.plugged/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
disableMouse	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) disableMouse() {$/;"	f	struct:tui.LightRenderer
disabledState	.plugged/fzf/src/terminal.go	/^	disabledState resumableState = iota$/;"	c	package:fzf	typeref:type:resumableState
displayWidth	.plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidth	.plugged/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine	typeref:typename:int
displayWidthWithLimit	.plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
display_width	.plugged/vim-snippets/pythonx/vimsnippets.py	/^def display_width(str):$/;"	f
dist	.plugged/delimitMate/Makefile	/^dist: version all$/;"	t
distclean	.plugged/delimitMate/Makefile	/^distclean: clean$/;"	t
docker	.plugged/fzf/Makefile	/^docker:$/;"	t
docker-test	.plugged/fzf/Makefile	/^docker-test:$/;"	t
doubleClickDuration	.plugged/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
download	.plugged/fzf/install	/^download() {$/;"	f
download	.plugged/fzf/install.ps1	/^function download {$/;"	f
drawBorder	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder(onlyHorizontal bool) {$/;"	f	struct:tui.LightWindow
drawBorder	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder(onlyHorizontal bool) {$/;"	f	struct:tui.TcellWindow
drawBorderAround	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround(onlyHorizontal bool) {$/;"	f	struct:tui.LightWindow
drawBorderHorizontal	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f	struct:tui.LightWindow
drawBorderVertical	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f	struct:tui.LightWindow
ds	.plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dupeTheme	.plugged/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
eachLine	.plugged/fzf/src/terminal.go	/^type eachLine struct {$/;"	s	package:fzf
editorconfig	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    augroup editorconfig$/;"	a
editorconfig#AddNewHook	.plugged/editorconfig-vim/autoload/editorconfig.vim	/^function! editorconfig#AddNewHook(func) " {{{1$/;"	f
editorconfig#ApplyHooks	.plugged/editorconfig-vim/autoload/editorconfig.vim	/^function! editorconfig#ApplyHooks(config) abort " {{{1$/;"	f
editorconfig-core-test	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^project(editorconfig-core-test NONE)$/;"	p
editorconfig-core-vimscript	.plugged/editorconfig-vim/tests/core/CMakeLists.txt	/^project(editorconfig-core-vimscript NONE)$/;"	p
editorconfig_core#currbuf_cli	.plugged/editorconfig-vim/autoload/editorconfig_core.vim	/^function! editorconfig_core#currbuf_cli(names, job) " out_name, in_name, ...$/;"	f
editorconfig_core#fnmatch#fnmatch	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^function! editorconfig_core#fnmatch#fnmatch(name, path, pattern)$/;"	f
editorconfig_core#fnmatch#fnmatchcase	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^function! editorconfig_core#fnmatch#fnmatchcase(name, path, pattern)$/;"	f
editorconfig_core#fnmatch#translate	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^function! editorconfig_core#fnmatch#translate(pat, ...)$/;"	f
editorconfig_core#handler#get_configurations	.plugged/editorconfig-vim/autoload/editorconfig_core/handler.vim	/^function! editorconfig_core#handler#get_configurations(job)$/;"	f
editorconfig_core#ini#read_ini_file	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^function! editorconfig_core#ini#read_ini_file(config_filename, target_filename)$/;"	f
editorconfig_core#util#Separator	.plugged/editorconfig-vim/autoload/editorconfig_core/util.vim	/^function! editorconfig_core#util#Separator()$/;"	f
editorconfig_core#util#is_win	.plugged/editorconfig-vim/autoload/editorconfig_core/util.vim	/^function! editorconfig_core#util#is_win()$/;"	f
editorconfig_core#util#path_join	.plugged/editorconfig-vim/autoload/editorconfig_core/util.vim	/^function! editorconfig_core#util#path_join(a, b)$/;"	f
editorconfig_core#util#strip	.plugged/editorconfig-vim/autoload/editorconfig_core/util.vim	/^function! editorconfig_core#util#strip(s)$/;"	f
editorconfig_core#version	.plugged/editorconfig-vim/autoload/editorconfig_core.vim	/^function! editorconfig_core#version()$/;"	f
editorconfig_trim_trailing_whitespace	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    augroup editorconfig_trim_trailing_whitespace$/;"	a
ellipsis	.plugged/fzf/src/terminal.go	/^	ellipsis           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
empty	.plugged/delimitMate/Makefile	/^empty    :=$/;"	m
emptyLine	.plugged/fzf/src/terminal.go	/^var emptyLine = itemLine{}$/;"	v	package:fzf
enableMouse	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) enableMouse() {$/;"	f	struct:tui.LightRenderer
enabledState	.plugged/fzf/src/terminal.go	/^	enabledState$/;"	c	package:fzf
encodePlaceholder	.plugged/fzf/src/terminal_test.go	/^func (flags placeholderFlags) encodePlaceholder() string {$/;"	f	unknown:fzf.placeholderFlags	typeref:typename:string
end	.plugged/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range	typeref:typename:int
ep_out	.plugged/editorconfig-vim/tests/core/tests/cmake/runandsort.cmake	/^        set(ep_out "${ep_stderr}")$/;"	v	function:run_and_sort
ep_out	.plugged/editorconfig-vim/tests/core/tests/cmake/runandsort.cmake	/^        set(ep_out "${ep_stdout}")$/;"	v	function:run_and_sort
eprintln	.plugged/hop.nvim/lua/hop/init.lua	/^local function eprintln(msg, teasing)$/;"	f
equals	.plugged/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
err	.plugged/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.eachLine	typeref:typename:error
errorExit	.plugged/fzf/src/options.go	/^func errorExit(msg string) {$/;"	f	package:fzf
errorExit	.plugged/fzf/src/tui/tui.go	/^func errorExit(message string) {$/;"	f	package:tui
escDelay	.plugged/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
escPollInterval	.plugged/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
escapedColon	.plugged/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	.plugged/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	.plugged/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
evaluate	.plugged/delimitMate/test/expand_cr.vim	/^let evaluate = 0$/;"	v
evaluate	.plugged/delimitMate/test/expand_space.vim	/^let evaluate = 0$/;"	v
evaluateHeight	.plugged/fzf/src/terminal.go	/^func evaluateHeight(opts *Options, termHeight int) int {$/;"	f	package:fzf	typeref:typename:int
evaluateScrollOffset	.plugged/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
event	.plugged/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader	typeref:typename:int32
eventBox	.plugged/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
eventBox	.plugged/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader	typeref:typename:*util.EventBox
eventBox	.plugged/fzf/src/terminal.go	/^	eventBox           *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
eventChan	.plugged/fzf/src/terminal.go	/^	eventChan          chan tui.Event$/;"	m	struct:fzf.Terminal	typeref:typename:chan tui.Event
events	.plugged/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox	typeref:typename:Events
exec	.plugged/fzf/src/reader.go	/^	exec     *exec.Cmd$/;"	m	struct:fzf.Reader	typeref:typename:*exec.Cmd
executeCommand	.plugged/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool, captureFirst/;"	f	struct:fzf.Terminal	typeref:typename:string
executeRegexp	.plugged/fzf/src/options.go	/^	executeRegexp    *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
executing	.plugged/fzf/src/terminal.go	/^	executing          *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
exitCancel	.plugged/fzf/src/constants.go	/^	exitCancel    = -1$/;"	c	package:fzf
exitError	.plugged/fzf/src/constants.go	/^	exitError     = 2$/;"	c	package:fzf
exitInterrupt	.plugged/fzf/src/constants.go	/^	exitInterrupt = 130$/;"	c	package:fzf
exitNoMatch	.plugged/fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c	package:fzf
exitOk	.plugged/fzf/src/constants.go	/^	exitOk        = 0$/;"	c	package:fzf
expect	.plugged/delimitMate/test/expand_cr.vim	/^    let expect = 0$/;"	v
expect	.plugged/delimitMate/test/expand_cr.vim	/^    let expect = 1$/;"	v
expect	.plugged/delimitMate/test/expand_cr.vim	/^let expect = 0$/;"	v
expect	.plugged/delimitMate/test/expand_space.vim	/^    let expect = 0$/;"	v
expect	.plugged/delimitMate/test/expand_space.vim	/^    let expect = 1$/;"	v
expect	.plugged/delimitMate/test/expand_space.vim	/^let expect = 0$/;"	v
expect	.plugged/fzf/src/terminal.go	/^	expect             map[tui.Event]string$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event]string
expected	.plugged/delimitMate/test/expand_cr.vim	/^    let expected = []$/;"	v
expected	.plugged/delimitMate/test/expand_space.vim	/^    let expected = []$/;"	v
expectsArbitraryString	.plugged/fzf/src/options.go	/^func expectsArbitraryString(opt string) bool {$/;"	f	package:fzf	typeref:typename:bool
extended	.plugged/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
extendedMatch	.plugged/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:([]Offset, int, *[]int)
extraLines	.plugged/fzf/src/terminal.go	/^func (t *Terminal) extraLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
extra_info	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^                $extra_info = $argv[$idx]$/;"	v
extra_info	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$extra_info = ''$/;"	v
extractColor	.plugged/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf	typeref:typename:(string, *[]ansiOffset, *ansiState)
fail	.plugged/fzf/bin/fzf-tmux	/^fail() {$/;"	f
failed	.plugged/fzf/src/terminal.go	/^	failed             *string$/;"	m	struct:fzf.Terminal	typeref:typename:*string
fd	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f	unknown:tui.LightRenderer	typeref:typename:int
feed	.plugged/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	struct:fzf.Reader
fg	.plugged/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
fg	.plugged/fzf/src/tui/light.go	/^	fg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
fg	.plugged/fzf/src/tui/tui.go	/^	fg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
file	.plugged/fzf/src/terminal.go	/^	file          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
files	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$files=@()$/;"	v
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
fill	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, onMove func()) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
fill	.plugged/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f	package:tui
fillString	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
filled	.plugged/fzf/src/terminal.go	/^	filled   bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
fin	.plugged/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	struct:fzf.Reader
finChan	.plugged/fzf/src/reader.go	/^	finChan  chan bool$/;"	m	struct:fzf.Reader	typeref:typename:chan bool
final	.plugged/fzf/src/matcher.go	/^	final      bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
final	.plugged/fzf/src/merger.go	/^	final   bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
final	.plugged/fzf/src/terminal.go	/^	final      bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
findFirstMatch	.plugged/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findLastMatch	.plugged/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findOffset	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
findOffset	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
firstKey	.plugged/fzf/src/options.go	/^func firstKey(keymap map[tui.Event]string) tui.Event {$/;"	f	package:fzf	typeref:typename:tui.Event
firstLine	.plugged/fzf/src/options.go	/^func firstLine(s string) string {$/;"	f	package:fzf	typeref:typename:string
first_key	.plugged/hop.nvim/lua/hop/perm.lua	/^local function first_key(keys)$/;"	f
fish	.plugged/fzf/test/test_go.rb	/^    def fish$/;"	S	class:Shell
fit	.plugged/fzf/src/terminal.go	/^	fit int$/;"	m	struct:fzf.fitpad	typeref:typename:int
fitpad	.plugged/fzf/src/terminal.go	/^type fitpad struct {$/;"	s	package:fzf
flush	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
fn	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$fn=[System.IO.Path]::GetTempFileName();$/;"	v
focus	.plugged/fzf/test/test_go.rb	/^  def focus$/;"	f	class:Tmux
foldmarker	.plugged/vim-snippets/pythonx/vimsnippets.py	/^def foldmarker():$/;"	f
follow	.plugged/fzf/src/options.go	/^	follow      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
following	.plugged/fzf/src/terminal.go	/^	following  resumableState$/;"	m	struct:fzf.previewer	typeref:typename:resumableState
forceBlack	.plugged/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
forceBlack	.plugged/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
forward	.plugged/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fullscreen	.plugged/fzf/src/terminal.go	/^	fullscreen         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
fullscreen	.plugged/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
fuzzy	.plugged/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fuzzyAlgo	.plugged/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:algo.Algo
fzf	.plugged/fzf/main.go	/^	fzf "github.com\/junegunn\/fzf\/src"$/;"	P	package:github.com/junegunn/fzf/src
fzf	.plugged/fzf/man/man1/fzf.1	/^.TH fzf 1 "Feb 2023" "fzf 0.38.0" "fzf - a command-line fuzzy finder"$/;"	t
fzf	.plugged/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/cache.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/constants.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/core.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/history.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/item.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/merger.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/options.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/reader.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/result.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/server.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	.plugged/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	.plugged/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	.plugged/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf inside terminal buffer	.plugged/fzf/README-VIM.md	/^### fzf inside terminal buffer$/;"	S	section:FZF Vim integration""Tips
fzf!	.plugged/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	.plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#exec	.plugged/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	.plugged/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	.plugged/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	.plugged/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...) range$/;"	f
fzf#vim#buffer_lines	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...) range$/;"	f
fzf#vim#complete	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
fzf#vim#helptags	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	.plugged/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	.plugged/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	.plugged/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	.plugged/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	.plugged/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	.plugged/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf-tmux	.plugged/fzf/man/man1/fzf-tmux.1	/^.TH fzf-tmux 1 "Feb 2023" "fzf 0.38.0" "fzf-tmux - open fzf in tmux split pane"$/;"	t
fzf.on_exit	.plugged/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	.plugged/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	.plugged/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf_base	.plugged/fzf/install.ps1	/^$fzf_base=Split-Path -Parent $MyInvocation.MyCommand.Definition$/;"	v
fzf_buffers	.plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_popd	.plugged/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	.plugged/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g:	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:EditorConfig_disable_rules	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_disable_rules = []$/;"	v
g:EditorConfig_enable_for_new_buf	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_enable_for_new_buf = 0$/;"	v
g:EditorConfig_exclude_patterns	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_exclude_patterns = []$/;"	v
g:EditorConfig_exec_path	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_exec_path = ''$/;"	v
g:EditorConfig_max_line_indicator	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_max_line_indicator = 'line'$/;"	v
g:EditorConfig_preserve_formatoptions	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_preserve_formatoptions = 0$/;"	v
g:EditorConfig_softtabstop_space	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_softtabstop_space = 1$/;"	v
g:EditorConfig_softtabstop_tab	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_softtabstop_tab = 1$/;"	v
g:EditorConfig_verbose	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let g:EditorConfig_verbose = 0$/;"	v
g:NERDTree	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeAutoDeleteBuffer	init.vim	/^let g:NERDTreeAutoDeleteBuffer = 1$/;"	v
g:NERDTreeBookmark	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeBookmarksFile	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') ./;"	v
g:NERDTreeBookmarksSort	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	init.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = 0$/;"	v
g:NERDTreeCascadeSingleChildDir	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCascadeSingleChildDir	init.vim	/^let g:NERDTreeCascadeSingleChildDir = 0$/;"	v
g:NERDTreeCaseSensitiveSort	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	.plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeCustomOpenArgs	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = get(g:, 'NERDTreeCustomOpenArgs', {})$/;"	v
g:NERDTreeCustomOpenArgs	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = l:defaultOpenArgs$/;"	v
g:NERDTreeDirArrowCollapsible	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	.plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHighlightCursorline	init.vim	/^let g:NERDTreeHighlightCursorline = 1$/;"	v
g:NERDTreeHijackNetrw	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeInvalidBookmarks	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpFirstChild	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivate/;"	v
g:NERDTreeMapPreviewSplit	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSpli/;"	v
g:NERDTreeMapPreviewVSplit	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSpl/;"	v
g:NERDTreeMapQuit	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFiles	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalMenu	init.vim	/^let g:NERDTreeMinimalMenu=20$/;"	v
g:NERDTreeMinimalUI	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMinimalUI	init.vim	/^let g:NERDTreeMinimalUI = 1$/;"	v
g:NERDTreeMouseMode	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^    let g:NERDTreeOldSortOrder = g:NERDTreeSortOrder$/;"	v
g:NERDTreeOldSortOrder	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^                let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^        let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	.plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	.plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	.plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	.plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowLineNumbers	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '/;"	v
g:NERDTreeStatusline	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root/;"	v
g:NERDTreeStatusline	init.vim	/^let g:NERDTreeStatusline="\\ %-28{matchstr(getline('.'), '\\\\(\\\\s\\\\)\\\\?\\\\zs\\\\(\\\\\/\\/;"	v
g:NERDTreeUI	.plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	.plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:NERDTreeWinSize	init.vim	/^let g:NERDTreeWinSize=45$/;"	v
g:__fzf_command	.plugged/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:__gutentags_vim_is_leaving	.plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:__gutentags_vim_is_leaving = 1$/;"	v
g:__gutentags_vim_is_leaving	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.accents = { 'red': accents_group }$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.inactive = airline#themes#generate_color_map(s:IA, s:IA, /;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.inactive_modified = { 'airline_c': modified_group }$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert = airline#themes#generate_color_map(s:I1, s:I2, s:/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert.airline_error = g:airline#themes#gruvbox#palette.n/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert.airline_warning = g:airline#themes#gruvbox#palette/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert_modified = g:airline#themes#gruvbox#palette.normal/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert_modified.airline_error = g:airline#themes#gruvbox#/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.insert_modified.airline_warning = g:airline#themes#gruvbo/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s:/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal.airline_error = error_group$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal.airline_warning = warning_group$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal_modified = { 'airline_c': modified_group }$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal_modified.airline_error = error_group$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.normal_modified.airline_warning = warning_group$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace = airline#themes#generate_color_map(s:R1, s:R2, s/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace.airline_error = g:airline#themes#gruvbox#palette./;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace.airline_warning = g:airline#themes#gruvbox#palett/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace_modified = g:airline#themes#gruvbox#palette.norma/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace_modified.airline_error = g:airline#themes#gruvbox/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.replace_modified.airline_warning = g:airline#themes#gruvb/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.tabline = {$/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual = airline#themes#generate_color_map(s:V1, s:V2, s:/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual.airline_error = g:airline#themes#gruvbox#palette.n/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual.airline_warning = g:airline#themes#gruvbox#palette/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual_modified = { 'airline_c': [ s:V3[0], '', s:V3[2], /;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual_modified.airline_error = g:airline#themes#gruvbox#/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^  let g:airline#themes#gruvbox#palette.visual_modified.airline_warning = g:airline#themes#gruvbo/;"	v
g:airline#themes#gruvbox#palette	.plugged/gruvbox/autoload/airline/themes/gruvbox.vim	/^let g:airline#themes#gruvbox#palette = {}$/;"	v
g:clear_background	.plugged/vim-transparent/autoload/background.vim	/^    let g:clear_background=!g:clear_background$/;"	v
g:clear_background	.plugged/vim-transparent/autoload/background.vim	/^    let g:clear_background=0$/;"	v
g:clear_background	.plugged/vim-transparent/autoload/background.vim	/^    let g:clear_background=1$/;"	v
g:clear_background	.plugged/vim-transparent/autoload/background.vim	/^  let g:clear_background=1$/;"	v
g:colors_name	.plugged/gruvbox/colors/gruvbox.vim	/^let g:colors_name='gruvbox'$/;"	v
g:colors_name	.plugged/vim-transparent/autoload/background.vim	/^  let g:colors_name='default'$/;"	v
g:colors_name	colors/one.vim	/^let g:colors_name = 'one'$/;"	v
g:delimitMate_eol_marker	.plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:delimitMate_eol_marker	.plugged/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:delimitMate_expand_cr	.plugged/delimitMate/plugin/delimitMate.vim	/^    let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	.plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	.plugged/delimitMate/test/expand_cr.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	.plugged/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_space	.plugged/delimitMate/plugin/delimitMate.vim	/^    let g:delimitMate_expand_space = 1$/;"	v
g:delimitMate_expand_space	.plugged/delimitMate/test/expand_space.vim	/^let g:delimitMate_expand_space = 1$/;"	v
g:delimitMate_insert_eol_marker	.plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 0$/;"	v
g:delimitMate_insert_eol_marker	.plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 1$/;"	v
g:delimitMate_insert_eol_marker	.plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 2$/;"	v
g:delimitMate_matchpairs	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^let g:delimitMate_matchpairs = '(:),{:},[:],<:>,¿:?,¡:!,,::'$/;"	v
g:delimitMate_quotes	.plugged/delimitMate/test/autoclose_quotes.vim	/^let g:delimitMate_quotes = '" '' ` « |'$/;"	v
g:delimitMate_smart_quotes	.plugged/delimitMate/plugin/delimitMate.vim	/^      let g:delimitMate_smart_quotes = ''$/;"	v
g:editorconfig_core_vimscript_debug	.plugged/editorconfig-vim/autoload/editorconfig_core.vim	/^        let g:editorconfig_core_vimscript_debug = 1$/;"	v
g:editorconfig_core_vimscript_debug	.plugged/editorconfig-vim/autoload/editorconfig_core.vim	/^    let g:editorconfig_core_vimscript_debug = 0$/;"	v
g:editorconfig_core_vimscript_debug	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^    let g:editorconfig_core_vimscript_debug = 0$/;"	v
g:editorconfig_core_vimscript_debug	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^    let g:editorconfig_core_vimscript_debug = 0$/;"	v
g:fzf#vim#buffers	.plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:gitgutter_override_sign_column_highlight	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gitgutter_override_sign_column_highlight = 0$/;"	v
g:gruvbox_bold	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_bold=1$/;"	v
g:gruvbox_contrast_dark	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_dark='medium'$/;"	v
g:gruvbox_contrast_light	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_contrast_light='medium'$/;"	v
g:gruvbox_guisp_fallback	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_guisp_fallback='NONE'$/;"	v
g:gruvbox_improved_strings	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_strings=0$/;"	v
g:gruvbox_improved_warnings	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_improved_warnings=0$/;"	v
g:gruvbox_inverse	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_inverse=1$/;"	v
g:gruvbox_invert_indent_guides	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_invert_indent_guides=0$/;"	v
g:gruvbox_invert_signs	.plugged/gruvbox/autoload/gruvbox.vim	/^    let g:gruvbox_invert_signs=0$/;"	v
g:gruvbox_invert_signs	.plugged/gruvbox/autoload/gruvbox.vim	/^    let g:gruvbox_invert_signs=1$/;"	v
g:gruvbox_italic	.plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=0$/;"	v
g:gruvbox_italic	.plugged/gruvbox/colors/gruvbox.vim	/^    let g:gruvbox_italic=1$/;"	v
g:gruvbox_termcolors	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_termcolors=256$/;"	v
g:gruvbox_undercurl	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_undercurl=1$/;"	v
g:gruvbox_underline	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:gruvbox_underline=1$/;"	v
g:gutentag_file_list_command	init.vim	/^let g:gutentag_file_list_command = 'git ls-files'$/;"	v
g:gutentags_add_ctrlp_root_markers	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_auto_add_pycscope	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_auto_add_pycscope = 1$/;"	v
g:gutentags_background_update	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', $/;"	v
g:gutentags_fake	.plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	.plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_pycscope_executable	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pycscope_executable = 'pycscope'$/;"	v
g:gutentags_pyscopefile	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pyscopefile = 'pycscope.out'$/;"	v
g:gutentags_res_dir	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	.plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	.plugged/vim-gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	.plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	.plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	.plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	.plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:indentLine_autoResetWidth	.plugged/indentLine/after/plugin/indentLine.vim	/^    let g:indentLine_autoResetWidth = get(g:, 'indentLine_autoResetWidth', 1)$/;"	v
g:indentLine_bufNameExclude	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_bufNameExclude = get(g:, 'indentLine_bufNameExclude', [])$/;"	v
g:indentLine_bufTypeExclude	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_bufTypeExclude = get(g:, 'indentLine_bufTypeExclude', [])$/;"	v
g:indentLine_char	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_char = get(g:, 'indentLine_char', (&encoding ==# "utf-8" && &term isnot# "linux/;"	v
g:indentLine_char_list	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_char_list = get(g:, 'indentLine_char_list', [])$/;"	v
g:indentLine_color_gui	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_gui = s:bg2[0]$/;"	v
g:indentLine_color_term	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:indentLine_color_term = s:bg2[1]$/;"	v
g:indentLine_defaultGroup	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_defaultGroup = get(g:, 'indentLine_defaultGroup', "")$/;"	v
g:indentLine_enabled	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_enabled = get(g:, 'indentLine_enabled', 1)$/;"	v
g:indentLine_faster	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_faster = get(g:, 'indentLine_faster', 0)$/;"	v
g:indentLine_fileType	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_fileType = get(g:, 'indentLine_fileType', [])$/;"	v
g:indentLine_fileTypeExclude	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_fileTypeExclude = get(g:, 'indentLine_fileTypeExclude', ['leaderf'])$/;"	v
g:indentLine_first_char	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_first_char = get(g:, 'indentLine_first_char', (&encoding ==# "utf-8" && &term i/;"	v
g:indentLine_indentLevel	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_indentLevel = get(g:, 'indentLine_indentLevel', 20)$/;"	v
g:indentLine_leadingSpaceChar	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_leadingSpaceChar = get(g:, 'indentLine_leadingSpaceChar', (&encoding ==# "utf-8/;"	v
g:indentLine_leadingSpaceEnabled	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_leadingSpaceEnabled = get(g:, 'indentLine_leadingSpaceEnabled', 0)$/;"	v
g:indentLine_loaded	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_loaded = 1$/;"	v
g:indentLine_maxLines	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_maxLines = get(g:, 'indentLine_maxLines', 3000)$/;"	v
g:indentLine_mysyntaxfile	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_mysyntaxfile = fnamemodify(expand("<sfile>"), ":p:h:h")."\/syntax\/indentLine.v/;"	v
g:indentLine_newVersion	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_newVersion = get(g:,'indentLine_newVersion',v:version > 704 || v:version == 704/;"	v
g:indentLine_setColors	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_setColors = get(g:, 'indentLine_setColors', 1)$/;"	v
g:indentLine_setConceal	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_setConceal = get(g:, 'indentLine_setConceal', 1)$/;"	v
g:indentLine_showFirstIndentLevel	.plugged/indentLine/after/plugin/indentLine.vim	/^let g:indentLine_showFirstIndentLevel = get(g:, 'indentLine_showFirstIndentLevel', 0)$/;"	v
g:indent_guides_auto_colors	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:lightline#colorscheme#gruvbox#palette	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let g:lightline#colorscheme#gruvbox#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:loaded_EditorConfig	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^let g:loaded_EditorConfig = 1$/;"	v
g:loaded_commentary	.plugged/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_delimitMate	.plugged/delimitMate/plugin/delimitMate.vim	/^let g:loaded_delimitMate = 1$/;"	v
g:loaded_fzf	.plugged/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	.plugged/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_gutentags	.plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_neosnippet	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^let g:loaded_neosnippet = 1$/;"	v
g:loaded_nerdtree_autoload	.plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	.plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_rg	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^let g:loaded_rg = 1$/;"	v
g:loaded_surround	.plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_tagbar	.plugged/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:mapleader	init.vim	/^let g:mapleader=' '$/;"	v
g:mysyntaxfile	.plugged/indentLine/after/plugin/indentLine.vim	/^    let g:mysyntaxfile = g:indentLine_mysyntaxfile$/;"	v
g:neosnippet#data_directory	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^  let g:neosnippet#data_directory =$/;"	v
g:neosnippet#enable_snipmate_compatibility	init.vim	/^let g:neosnippet#enable_snipmate_compatibility = 1$/;"	v
g:neosolarized_bold	colors/NeoSolarized.vim	/^let g:neosolarized_bold = get(g:, "neosolarized_bold", 1)$/;"	v
g:neosolarized_contrast	colors/NeoSolarized.vim	/^let g:neosolarized_contrast = get(g:, "neosolarized_contrast", "normal")$/;"	v
g:neosolarized_diffmode	colors/NeoSolarized.vim	/^let g:neosolarized_diffmode = get(g:, "neosolarized_diffmode", "normal")$/;"	v
g:neosolarized_italic	colors/NeoSolarized.vim	/^let g:neosolarized_italic = get(g:, "neosolarized_italic", 0)$/;"	v
g:neosolarized_termBoldAsBright	colors/NeoSolarized.vim	/^let g:neosolarized_termBoldAsBright = get(g:, "neosolarized_termBoldAsBright", 1)$/;"	v
g:neosolarized_termtrans	colors/NeoSolarized.vim	/^let g:neosolarized_termtrans = get(g:, "neosolarized_termtrans", 0)$/;"	v
g:neosolarized_underline	colors/NeoSolarized.vim	/^let g:neosolarized_underline = get(g:, "neosolarized_underline", 1)$/;"	v
g:neosolarized_vertSplitBgTrans	colors/NeoSolarized.vim	/^let g:neosolarized_vertSplitBgTrans = get(g:, "neosolarized_vertSplitBgTrans", 1)$/;"	v
g:neosolarized_visibility	colors/NeoSolarized.vim	/^let g:neosolarized_visibility = get(g:, "neosolarized_visibility", "normal")$/;"	v
g:niji_dark_colours	.plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	.plugged/gruvbox/colors/gruvbox.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:one_allow_italics	colors/one.vim	/^  let g:one_allow_italics = 0$/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:python3_host_prog	init.vim	/^let g:python3_host_prog="\/usr\/bin\/python3"$/;"	v
g:rainbow_conf	.plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	.plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	.plugged/gruvbox/colors/gruvbox.vim	/^   let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	.plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	.plugged/gruvbox/colors/gruvbox.vim	/^let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rbpt_colorpairs	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:rbpt_colorpairs =$/;"	v
g:rg_binary	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^  let g:rg_binary = 'rg'$/;"	v
g:rg_command	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^  let g:rg_command = g:rg_binary . ' --vimgrep'$/;"	v
g:rg_format	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^  let g:rg_format = "%f:%l:%c:%m"$/;"	v
g:rg_root_types	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^  let g:rg_root_types = ['.git']$/;"	v
g:rg_window_location	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^  let g:rg_window_location = 'botright'$/;"	v
g:snips_author	.plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_author = "yourname"$/;"	v
g:snips_email	.plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_email = "yourname@email.com"$/;"	v
g:snips_github	.plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_github = "https:\/\/github.com\/yourname"$/;"	v
g:tagbar#icon_closed	.plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	.plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_autoclose	.plugged/tagbar/autoload/tagbar.vim	/^    let g:tagbar_autoclose = !g:tagbar_autoclose$/;"	v
g:tagbar_case_insensitive	.plugged/tagbar/autoload/tagbar.vim	/^    let g:tagbar_case_insensitive = !g:tagbar_case_insensitive$/;"	v
g:tagbar_ctags_bin	.plugged/tagbar/autoload/tagbar.vim	/^                let g:tagbar_ctags_bin = ctags$/;"	v
g:tagbar_ctags_bin	.plugged/tagbar/autoload/tagbar.vim	/^        let g:tagbar_ctags_bin = expand(g:tagbar_ctags_bin)$/;"	v
g:tagbar_height	.plugged/tagbar/plugin/tagbar.vim	/^            let g:tagbar_height = g:tagbar_vertical$/;"	v
g:tagbar_hide_nonpublic	.plugged/tagbar/autoload/tagbar.vim	/^    let g:tagbar_hide_nonpublic = !g:tagbar_hide_nonpublic$/;"	v
g:tagbar_iconchars	.plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	.plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▸', '▾']$/;"	v
g:tagbar_position	.plugged/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'botright vertical'$/;"	v
g:tagbar_position	.plugged/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'leftabove'$/;"	v
g:tagbar_position	.plugged/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'rightbelow'$/;"	v
g:tagbar_position	.plugged/tagbar/plugin/tagbar.vim	/^            let g:tagbar_position = 'topleft vertical'$/;"	v
g:tagbar_sort	.plugged/tagbar/autoload/tagbar.vim	/^        let g:tagbar_sort = !g:tagbar_sort$/;"	v
g:terminal_color_0	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_0 = s:bg0[0]$/;"	v
g:terminal_color_0	colors/NeoSolarized.vim	/^let g:terminal_color_0 = s:gui_base03$/;"	v
g:terminal_color_0	colors/one.vim	/^    let g:terminal_color_0  = "#353a44"$/;"	v
g:terminal_color_1	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_1 = s:gb.neutral_red[0]$/;"	v
g:terminal_color_1	colors/NeoSolarized.vim	/^let g:terminal_color_1 = s:gui_red$/;"	v
g:terminal_color_1	colors/one.vim	/^    let g:terminal_color_1  = "#e88388"$/;"	v
g:terminal_color_10	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_10 = s:green[0]$/;"	v
g:terminal_color_10	colors/NeoSolarized.vim	/^  let g:terminal_color_10 = g:terminal_color_2$/;"	v
g:terminal_color_10	colors/NeoSolarized.vim	/^  let g:terminal_color_10 = s:gui_base01$/;"	v
g:terminal_color_10	colors/one.vim	/^    let g:terminal_color_10 = "#a7cc8c"$/;"	v
g:terminal_color_11	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_11 = s:yellow[0]$/;"	v
g:terminal_color_11	colors/NeoSolarized.vim	/^  let g:terminal_color_11 = g:terminal_color_3$/;"	v
g:terminal_color_11	colors/NeoSolarized.vim	/^  let g:terminal_color_11 = s:gui_base00$/;"	v
g:terminal_color_11	colors/one.vim	/^    let g:terminal_color_11 = "#ebca8d"$/;"	v
g:terminal_color_12	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_12 = s:blue[0]$/;"	v
g:terminal_color_12	colors/NeoSolarized.vim	/^  let g:terminal_color_12 = g:terminal_color_4$/;"	v
g:terminal_color_12	colors/NeoSolarized.vim	/^  let g:terminal_color_12 = s:gui_base0$/;"	v
g:terminal_color_12	colors/one.vim	/^    let g:terminal_color_12 = "#72bef2"$/;"	v
g:terminal_color_13	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_13 = s:purple[0]$/;"	v
g:terminal_color_13	colors/NeoSolarized.vim	/^  let g:terminal_color_13 = g:terminal_color_5$/;"	v
g:terminal_color_13	colors/NeoSolarized.vim	/^  let g:terminal_color_13 = s:gui_violet$/;"	v
g:terminal_color_13	colors/one.vim	/^    let g:terminal_color_13 = "#d291e4"$/;"	v
g:terminal_color_14	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_14 = s:aqua[0]$/;"	v
g:terminal_color_14	colors/NeoSolarized.vim	/^  let g:terminal_color_14 = g:terminal_color_6$/;"	v
g:terminal_color_14	colors/NeoSolarized.vim	/^  let g:terminal_color_14 = s:gui_base1$/;"	v
g:terminal_color_14	colors/one.vim	/^    let g:terminal_color_14 = "#65c2cd"$/;"	v
g:terminal_color_15	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_15 = s:fg1[0]$/;"	v
g:terminal_color_15	colors/NeoSolarized.vim	/^  let g:terminal_color_15 = g:terminal_color_7$/;"	v
g:terminal_color_15	colors/NeoSolarized.vim	/^  let g:terminal_color_15 = s:gui_base3$/;"	v
g:terminal_color_15	colors/one.vim	/^    let g:terminal_color_15 = "#e3e5e9"$/;"	v
g:terminal_color_2	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_2 = s:gb.neutral_green[0]$/;"	v
g:terminal_color_2	colors/NeoSolarized.vim	/^let g:terminal_color_2 = s:gui_green$/;"	v
g:terminal_color_2	colors/one.vim	/^    let g:terminal_color_2  = "#a7cc8c"$/;"	v
g:terminal_color_3	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_3 = s:gb.neutral_yellow[0]$/;"	v
g:terminal_color_3	colors/NeoSolarized.vim	/^let g:terminal_color_3 = s:gui_yellow$/;"	v
g:terminal_color_3	colors/one.vim	/^    let g:terminal_color_3  = "#ebca8d"$/;"	v
g:terminal_color_4	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_4 = s:gb.neutral_blue[0]$/;"	v
g:terminal_color_4	colors/NeoSolarized.vim	/^let g:terminal_color_4 = s:gui_blue$/;"	v
g:terminal_color_4	colors/one.vim	/^    let g:terminal_color_4  = "#72bef2"$/;"	v
g:terminal_color_5	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_5 = s:gb.neutral_purple[0]$/;"	v
g:terminal_color_5	colors/NeoSolarized.vim	/^let g:terminal_color_5 = s:gui_magenta$/;"	v
g:terminal_color_5	colors/one.vim	/^    let g:terminal_color_5  = "#d291e4"$/;"	v
g:terminal_color_6	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_6 = s:gb.neutral_aqua[0]$/;"	v
g:terminal_color_6	colors/NeoSolarized.vim	/^let g:terminal_color_6 = s:gui_cyan$/;"	v
g:terminal_color_6	colors/one.vim	/^    let g:terminal_color_6  = "#65c2cd"$/;"	v
g:terminal_color_7	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_7 = s:fg4[0]$/;"	v
g:terminal_color_7	colors/NeoSolarized.vim	/^let g:terminal_color_7 = s:gui_base2$/;"	v
g:terminal_color_7	colors/one.vim	/^    let g:terminal_color_7  = "#e3e5e9"$/;"	v
g:terminal_color_8	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_8 = s:gray[0]$/;"	v
g:terminal_color_8	colors/NeoSolarized.vim	/^  let g:terminal_color_8 = g:terminal_color_0$/;"	v
g:terminal_color_8	colors/NeoSolarized.vim	/^  let g:terminal_color_8 = s:gui_base02$/;"	v
g:terminal_color_8	colors/one.vim	/^    let g:terminal_color_8  = "#353a44"$/;"	v
g:terminal_color_9	.plugged/gruvbox/colors/gruvbox.vim	/^  let g:terminal_color_9 = s:red[0]$/;"	v
g:terminal_color_9	colors/NeoSolarized.vim	/^  let g:terminal_color_9 = g:terminal_color_1$/;"	v
g:terminal_color_9	colors/NeoSolarized.vim	/^  let g:terminal_color_9 = s:gui_orange$/;"	v
g:terminal_color_9	colors/one.vim	/^    let g:terminal_color_9  = "#e88388"$/;"	v
g:transparent_groups	.plugged/vim-transparent/autoload/background.vim	/^            let g:transparent_groups = $/;"	v
g:transparent_groups	init.vim	/^let g:transparent_groups = ['Normal', 'Comment', 'Constant', 'Special', 'Identifier',$/;"	v
g:vimshell_escape_colors	.plugged/gruvbox/colors/gruvbox.vim	/^let g:vimshell_escape_colors = [$/;"	v
gS	.plugged/vim-surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
gather	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^  async gather(args: {$/;"	m	class:Source
gather_candidates	.plugged/neosnippet.vim/rplugin/python3/denite/source/neosnippet.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	.plugged/neosnippet.vim/rplugin/python3/deoplete/sources/neosnippet.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gc	.plugged/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	.plugged/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gc	.plugged/vim-commentary/plugin/commentary.vim	/^  xmap gc  <Plug>Commentary$/;"	m
gcc	.plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	.plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
getBytes	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getBytesInternal	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getEnv	.plugged/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
getScrollbar	.plugged/fzf/src/terminal.go	/^func (t *Terminal) getScrollbar() (int, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int)
getScrollbar	.plugged/fzf/src/terminal.go	/^func getScrollbar(total int, height int, offset int) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
get_comment_format	.plugged/vim-snippets/pythonx/vimsnippets.py	/^def get_comment_format():$/;"	f
get_dir	.plugged/editorconfig-vim/tests/core/editorconfig	/^function get_dir()$/;"	f
get_option	.plugged/vim-snippets/pythonx/javascript_snippets.py	/^def get_option(snip, option, default=None):$/;"	f
getch	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
getch	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
give	.plugged/fzf/src/terminal_test.go	/^	give$/;"	M	struct:fzf.testCase	typeref:typename:give
give	.plugged/fzf/src/terminal_test.go	/^type give struct {$/;"	s	package:fzf
gn	init.vim	/^nnoremap gn :cn <cr> : normal! zz <cr>$/;"	m
go	.plugged/fzf/test/test_go.rb	/^  def go(args)$/;"	f	class:Tmux
gp	init.vim	/^nnoremap gp :cp <cr> : normal! zz <cr>$/;"	m
grey_color	colors/one.vim	/^  fun <SID>grey_color(n)$/;"	f
grey_level	colors/one.vim	/^  fun <SID>grey_level(n)$/;"	f
grey_number	colors/one.vim	/^  fun <SID>grey_number(x)$/;"	f
gruvbox#hls_hide	.plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_hide()$/;"	f
gruvbox#hls_show	.plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_show()$/;"	f
gruvbox#hls_toggle	.plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#hls_toggle()$/;"	f
gruvbox#invert_signs_toggle	.plugged/gruvbox/autoload/gruvbox.vim	/^function! gruvbox#invert_signs_toggle()$/;"	f
gutentags#add_job	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	.plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	.plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	.plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave() abort$/;"	f
gutentags#on_vim_leave_pre	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#pycscope#generate	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#pycscope#init	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#init(project_root) abort$/;"	f
gutentags#pycscope#on_job_exit	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#remove_job	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	.plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	.plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
gzip	.plugged/delimitMate/Makefile	/^gzip: $(FILENAME).tar.gz $(FILENAME).vmb.gz$/;"	t
handleHttpRequest	.plugged/fzf/src/server.go	/^func handleHttpRequest(conn net.Conn, channel chan []*action) string {$/;"	f	package:fzf	typeref:typename:string
hasLoadActions	.plugged/fzf/src/terminal.go	/^	hasLoadActions     bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasPreviewAction	.plugged/fzf/src/terminal.go	/^func hasPreviewAction(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
hasPreviewFlags	.plugged/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, query bool) {$/;"	f	package:fzf	typeref:typename:(slot bool, plus bool, query bool)
hasPreviewWindow	.plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewer	.plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
has_cjk	.plugged/vim-snippets/pythonx/vimsnippets.py	/^def has_cjk(s):$/;"	f
header	.plugged/delimitMate/test/expand_cr.vim	/^    let header = empty(header) ? item[1:] : 'Lines should match.'$/;"	v
header	.plugged/delimitMate/test/expand_cr.vim	/^  let header = ''$/;"	v
header	.plugged/delimitMate/test/expand_cr.vim	/^let header = ''$/;"	v
header	.plugged/fzf/src/terminal.go	/^	header             []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
header0	.plugged/fzf/src/terminal.go	/^	header0            []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
headerFirst	.plugged/fzf/src/terminal.go	/^	headerFirst        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
headerLines	.plugged/fzf/src/options.go	/^	headerLines int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
headerLines	.plugged/fzf/src/terminal.go	/^	headerLines        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
height	.plugged/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
height	.plugged/fzf/src/tui/light.go	/^	height   int$/;"	m	struct:tui.LightWindow	typeref:typename:int
height	.plugged/fzf/src/tui/tcell.go	/^	height      int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
heightSpec	.plugged/fzf/src/options.go	/^type heightSpec struct {$/;"	s	package:fzf
help	.plugged/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	.plugged/fzf/install	/^help() {$/;"	f
help	.plugged/fzf/src/options.go	/^func help(code int) {$/;"	f	package:fzf
help	.plugged/fzf/uninstall	/^help() {$/;"	f
here	.plugged/editorconfig-vim/tests/core/editorconfig.bat	/^set here=%~dp0$/;"	v
hidden	.plugged/fzf/src/options.go	/^	hidden      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
history	.plugged/fzf/src/terminal.go	/^	history            *History$/;"	m	struct:fzf.Terminal	typeref:typename:*History
horizontal	.plugged/fzf/src/tui/tui.go	/^	horizontal  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
hs_highlight_boolean	colors/NeoSolarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	colors/NeoSolarized.vim	/^let hs_highlight_delimiters=1$/;"	v
hscroll	.plugged/fzf/src/terminal.go	/^	hscroll            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hscrollOff	.plugged/fzf/src/terminal.go	/^	hscrollOff         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
httpBadRequest	.plugged/fzf/src/server.go	/^	httpBadRequest   = "HTTP\/1.1 400 Bad Request" + crlf$/;"	c	package:fzf
httpOk	.plugged/fzf/src/server.go	/^	httpOk           = "HTTP\/1.1 200 OK" + crlf$/;"	c	package:fzf
httpReadTimeout	.plugged/fzf/src/server.go	/^	httpReadTimeout  = 10 * time.Second$/;"	c	package:fzf
idx	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$idx = 0$/;"	v
ignore	.plugged/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox	typeref:typename:map[EventType]bool
inBytes	.plugged/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars	typeref:typename:bool
inHandle	.plugged/fzf/src/tui/light.go	/^	inHandle        uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
indentLine	.plugged/indentLine/README.md	/^indentLine$/;"	c
indentLine	.plugged/indentLine/after/plugin/indentLine.vim	/^augroup indentLine$/;"	a
index	.plugged/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult	typeref:typename:int
indexAt	.plugged/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo	typeref:typename:int
infoDefault	.plugged/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c	package:fzf	typeref:type:infoStyle
infoHidden	.plugged/fzf/src/options.go	/^	infoHidden$/;"	c	package:fzf
infoInline	.plugged/fzf/src/options.go	/^	infoInline$/;"	c	package:fzf
infoSep	.plugged/fzf/src/terminal.go	/^	infoSep            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
infoStyle	.plugged/fzf/src/options.go	/^type infoStyle int$/;"	t	package:fzf	typeref:typename:int
infoStyle	.plugged/fzf/src/terminal.go	/^	infoStyle          infoStyle$/;"	m	struct:fzf.Terminal	typeref:typename:infoStyle
init	.plugged/fzf/src/constants.go	/^func init() {$/;"	f	package:fzf
init	.plugged/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	.plugged/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	.plugged/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	.plugged/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	.plugged/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
initDelay	.plugged/fzf/src/terminal.go	/^	initDelay          time.Duration$/;"	m	struct:fzf.Terminal	typeref:typename:time.Duration
initFunc	.plugged/fzf/src/terminal.go	/^	initFunc           func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
initPalette	.plugged/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initPlatform	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initPlatform	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initScreen	.plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() {$/;"	f	unknown:tui.FullscreenRenderer
initTheme	.plugged/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f	package:tui
initialCharClass	.plugged/fzf/src/algo/algo.go	/^	initialCharClass charClass = charWhite$/;"	v	package:algo	typeref:typename:charClass
initialDelay	.plugged/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	.plugged/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c	package:fzf
initialPreviewOpts	.plugged/fzf/src/terminal.go	/^	initialPreviewOpts previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
initialize	.plugged/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
input	.plugged/fzf/src/terminal.go	/^	input              []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
input2	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input, '(', s:l, 'g')$/;"	v
input2	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input2, ')', s:r, 'g')$/;"	v
input_q	.plugged/delimitMate/test/autoclose_quotes.vim	/^    let input_q = substitute(input,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
install	.plugged/delimitMate/Makefile	/^install: $(SOURCES)$/;"	t
install	.plugged/fzf/Makefile	/^install: bin\/fzf$/;"	t
install	.plugged/neosnippet.vim/Makefile	/^install: vim-themis$/;"	t
interpretCode	.plugged/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) ansiState {$/;"	f	package:fzf	typeref:typename:ansiState
inv	.plugged/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term	typeref:typename:bool
is24	.plugged/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	type:tui.Color	typeref:typename:bool
isAlphabet	.plugged/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isAscii	.plugged/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo	typeref:typename:bool
isCtrlSeqStart	.plugged/fzf/src/ansi.go	/^func isCtrlSeqStart(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isExecuteAction	.plugged/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf	typeref:typename:actionType
isNumeric	.plugged/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isPrint	.plugged/fzf/src/ansi.go	/^func isPrint(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isWord	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^    const isWord = wordMatch && charsMatch && wordMatch[0] == charsMatch[0];$/;"	C	method:Source.gather
item	.plugged/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result	typeref:typename:*Item
item	.plugged/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem	typeref:typename:*Item
itemLine	.plugged/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
item_count	.plugged/fzf/test/test_go.rb	/^          def item_count$/;"	f	method:Tmux.until
items	.plugged/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk	typeref:typename:[chunkSize]Item
itemsnumber	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^let itemsnumber = len(split(g:delimitMate_matchpairs, '.:.\\zs,\\ze.:.'))$/;"	v
itemsnumber	.plugged/delimitMate/test/autoclose_quotes.vim	/^let itemsnumber = len(split(g:delimitMate_quotes, ' '))$/;"	v
iter	.plugged/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
joinTokens	.plugged/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f	package:fzf	typeref:typename:string
jumpAcceptEnabled	.plugged/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpDisabled	.plugged/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf	typeref:type:jumpMode
jumpEnabled	.plugged/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	.plugged/fzf/src/terminal.go	/^	jumpLabels         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
jumpMode	.plugged/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf	typeref:typename:int
jump_targets	.plugged/hop.nvim/examples/hop-extension-hello-world/lua/hop-extension-hello-world/init.lua	/^  local jump_targets = function() -- opts ignored$/;"	f
jumping	.plugged/fzf/src/terminal.go	/^	jumping            jumpMode$/;"	m	struct:fzf.Terminal	typeref:typename:jumpMode
keepRight	.plugged/fzf/src/terminal.go	/^	keepRight          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
key	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^      const val = snippets[key];$/;"	C	method:Source.gather
key	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^    for (const key in snippets) {$/;"	C	method:Source.gather
keyMatch	.plugged/fzf/src/terminal.go	/^func keyMatch(key tui.Event, event tui.Event) bool {$/;"	f	package:fzf	typeref:typename:bool
keymap	.plugged/fzf/src/terminal.go	/^	keymap             map[tui.Event][]*action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]*action
keymapOrg	.plugged/fzf/src/terminal.go	/^	keymapOrg          map[tui.Event][]*action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]*action
keyword_spacing	.plugged/vim-snippets/pythonx/javascript_snippets.py	/^def keyword_spacing(snip):$/;"	f
kill	.plugged/fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
killChan	.plugged/fzf/src/terminal.go	/^	killChan           chan int$/;"	m	struct:fzf.Terminal	typeref:typename:chan int
killPreview	.plugged/fzf/src/terminal.go	/^func (t *Terminal) killPreview(code int) {$/;"	f	struct:fzf.Terminal
killed	.plugged/fzf/src/reader.go	/^	killed   bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
label	.plugged/fzf/src/options.go	/^	label  string$/;"	m	struct:fzf.labelOpts	typeref:typename:string
label	.plugged/fzf/src/terminal.go	/^	label    string$/;"	m	struct:fzf.itemLine	typeref:typename:string
labelOpts	.plugged/fzf/src/options.go	/^type labelOpts struct {$/;"	s	package:fzf
labelPrinter	.plugged/fzf/src/terminal.go	/^type labelPrinter func(tui.Window, int)$/;"	t	package:fzf	typeref:typename:func(tui.Window, int)
lastChunk	.plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	struct:fzf.ChunkList	typeref:typename:*Chunk
lastX	.plugged/fzf/src/tui/tcell.go	/^	lastX       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lastY	.plugged/fzf/src/tui/tcell.go	/^	lastY       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
layout	.plugged/fzf/src/terminal.go	/^	layout             layoutType$/;"	m	struct:fzf.Terminal	typeref:typename:layoutType
layoutDefault	.plugged/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c	package:fzf	typeref:type:layoutType
layoutReverse	.plugged/fzf/src/options.go	/^	layoutReverse$/;"	c	package:fzf
layoutReverseList	.plugged/fzf/src/options.go	/^	layoutReverseList$/;"	c	package:fzf
layoutType	.plugged/fzf/src/options.go	/^type layoutType int$/;"	t	package:fzf	typeref:typename:int
lbg	.plugged/fzf/src/ansi.go	/^	lbg  tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
left	.plugged/fzf/src/tui/light.go	/^	left     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
left	.plugged/fzf/src/tui/tcell.go	/^	left        int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
license	.plugged/gruvbox/package.json	/^  "license": "MIT",$/;"	s
line	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let line = getline('.')$/;"	v
line	.plugged/fzf/src/terminal.go	/^	line string$/;"	m	struct:fzf.eachLine	typeref:typename:string
linenr	.plugged/delimitMate/test/autoclose_quotes.vim	/^  let linenr += 1$/;"	v
linenr	.plugged/delimitMate/test/autoclose_quotes.vim	/^let linenr = 0$/;"	v
lines	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	.plugged/delimitMate/test/autoclose_quotes.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	.plugged/delimitMate/test/expand_cr.vim	/^  let lines = getline(1, line('$'))$/;"	v
lines	.plugged/delimitMate/test/expand_cr.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	.plugged/delimitMate/test/expand_space.vim	/^  let lines = getline(1, line('$'))$/;"	v
lines	.plugged/delimitMate/test/expand_space.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	.plugged/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History	typeref:typename:[]string
lines	.plugged/fzf/src/terminal.go	/^	lines      []string$/;"	m	struct:fzf.previewer	typeref:typename:[]string
lines	.plugged/fzf/src/terminal.go	/^	lines   []string$/;"	m	struct:fzf.previewResult	typeref:typename:[]string
link_fzf_in_path	.plugged/fzf/install	/^link_fzf_in_path() {$/;"	f
lint	.plugged/neosnippet.vim/Makefile	/^lint:$/;"	t
list	.plugged/fzf/src/terminal.go	/^	list         []*Item$/;"	m	struct:fzf.previewRequest	typeref:typename:[]*Item
listenPort	.plugged/fzf/src/terminal.go	/^	listenPort         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
lists	.plugged/fzf/src/merger.go	/^	lists   [][]Result$/;"	m	struct:fzf.Merger	typeref:typename:[][]Result
loaded_nerd_tree	.plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_transparent	.plugged/vim-transparent/plugin/background.vim	/^let loaded_transparent = 1$/;"	v
main	.plugged/editorconfig-vim/tests/plugin/spec/plugin_tests/test_files/4_space.py	/^def main():$/;"	f
main	.plugged/fzf/main.go	/^func main() {$/;"	f	package:main
main	.plugged/fzf/main.go	/^package main$/;"	p
maintain_deep_pointer	.plugged/hop.nvim/lua/hop/perm.lua	/^local function maintain_deep_pointer(depth, n, p)$/;"	f
maintainer	.plugged/vim-snippets/addon-info.json	/^  "maintainer" : "honza @ github & others",$/;"	s
makeSpace	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	struct:tui.LightRenderer
makeSpinner	.plugged/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f	package:fzf	typeref:typename:[]string
make_box	.plugged/vim-snippets/pythonx/vimsnippets.py	/^def make_box(twidth, bwidth=None):$/;"	f
margin	.plugged/fzf/src/terminal.go	/^	margin             [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
mark_jump_targets_line	.plugged/hop.nvim/lua/hop/jump_target.lua	/^local function mark_jump_targets_line(buf_handle, win_handle, regex, line_context, col_offset, w/;"	f
marker	.plugged/fzf/src/terminal.go	/^	marker             string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerEmpty	.plugged/fzf/src/terminal.go	/^	markerEmpty        string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerLen	.plugged/fzf/src/terminal.go	/^	markerLen          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
maskActionContents	.plugged/fzf/src/options.go	/^func maskActionContents(action string) string {$/;"	f	package:fzf	typeref:typename:string
match	.plugged/fzf/src/terminal_test.go	/^	match  string \/\/ output is matched against this regex (when output is empty string)$/;"	m	struct:fzf.want	typeref:typename:string
match	.plugged/hop.nvim/lua/hop/jump_target.lua	/^    match = function(s)$/;"	f
matchChunk	.plugged/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
matchControlSequence	.plugged/fzf/src/ansi.go	/^func matchControlSequence(s string) int {$/;"	f	package:fzf	typeref:typename:int
matchOperatingSystemCommand	.plugged/fzf/src/ansi.go	/^func matchOperatingSystemCommand(s string) int {$/;"	f	package:fzf	typeref:typename:int
match_count	.plugged/fzf/test/test_go.rb	/^          def match_count$/;"	f	method:Tmux.until
matches	.plugged/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult	typeref:typename:[]Result
maxContentLength	.plugged/fzf/src/server.go	/^	maxContentLength = 1024 * 1024$/;"	c	package:fzf
maxHeightFunc	.plugged/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer	typeref:typename:func(int) int
maxInputBuffer	.plugged/fzf/src/tui/light.go	/^	maxInputBuffer  = 1024 * 1024$/;"	c	package:tui
maxItems	.plugged/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
maxMulti	.plugged/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c	package:fzf
maxPartitions	.plugged/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxPatternLength	.plugged/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c	package:fzf
maxSize	.plugged/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History	typeref:typename:int
merge	.plugged/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
merged	.plugged/fzf/src/merger.go	/^	merged  []Result$/;"	m	struct:fzf.Merger	typeref:typename:[]Result
mergedGet	.plugged/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
merger	.plugged/fzf/src/terminal.go	/^	merger             *Merger$/;"	m	struct:fzf.Terminal	typeref:typename:*Merger
mergerCache	.plugged/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher	typeref:typename:map[string]*Merger
mergerCacheMax	.plugged/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf	typeref:typename:int
minHeight	.plugged/fzf/src/terminal.go	/^	minHeight = 3$/;"	c	package:fzf
minItem	.plugged/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: -1}}$/;"	v	package:fzf
minRank	.plugged/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf	typeref:typename:Result
minWidth	.plugged/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c	package:fzf
misc	.plugged/vim-ripgrep/README.md	/^## misc$/;"	s	chapter:vim-ripgrep
modified	.plugged/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History	typeref:typename:map[int]string
mouse	.plugged/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
mouse	.plugged/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
mouseSequence	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
move	.plugged/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	struct:fzf.Terminal
move	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	struct:tui.LightRenderer
moveCursor	.plugged/fzf/src/tui/tcell.go	/^	moveCursor  bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
multi	.plugged/fzf/src/terminal.go	/^	multi              int$/;"	m	struct:fzf.Terminal	typeref:typename:int
multi_value_keywords	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^    set(multi_value_keywords ARGS)$/;"	v	function:new_ec_cli_test
multi_value_keywords	.plugged/editorconfig-vim/tests/core/tests/cmake/runandsort.cmake	/^    set(multi_value_keywords CMDLINE ARGS)$/;"	v	function:run_and_sort
mutex	.plugged/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache	typeref:typename:sync.Mutex
mutex	.plugged/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList	typeref:typename:sync.Mutex
mutex	.plugged/fzf/src/reader.go	/^	mutex    sync.Mutex$/;"	m	struct:fzf.Reader	typeref:typename:sync.Mutex
mutex	.plugged/fzf/src/terminal.go	/^	mutex              sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
name	.plugged/gruvbox/package.json	/^  "name": "gruvbox",$/;"	s
name	.plugged/vim-snippets/addon-info.json	/^  "name" : "vim-snippets",$/;"	s
needPreviewWindow	.plugged/fzf/src/terminal.go	/^func (t *Terminal) needPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
neocomplcache#sources#snippets_complete#define	.plugged/neosnippet.vim/autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#define() abort$/;"	f
neocomplete#sources#neosnippet#define	.plugged/neosnippet.vim/autoload/neocomplete/sources/neosnippet.vim	/^function! neocomplete#sources#neosnippet#define() abort$/;"	f
neosnippet	.plugged/neosnippet.vim/autoload/neosnippet/init.vim	/^  augroup neosnippet$/;"	a
neosnippet	.plugged/neosnippet.vim/plugin/neosnippet.vim	/^augroup neosnippet$/;"	a
neosnippet#anonymous	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#anonymous(snippet) abort$/;"	f
neosnippet#commands#_clear_markers	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_clear_markers() abort$/;"	f
neosnippet#commands#_complete_target_snippets	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_complete_target_snippets(arglead, cmdline, cursorpos) abort$/;"	f
neosnippet#commands#_edit	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_edit(args) abort$/;"	f
neosnippet#commands#_edit_complete	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_edit_complete(arglead, cmdline, cursorpos) abort$/;"	f
neosnippet#commands#_filetype_complete	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_filetype_complete(arglead, cmdline, cursorpos) abort$/;"	f
neosnippet#commands#_make_cache	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_make_cache(filetype) abort$/;"	f
neosnippet#commands#_source	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! neosnippet#commands#_source(filename) abort$/;"	f
neosnippet#complete_done	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#complete_done() abort$/;"	f
neosnippet#expand	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#expand(trigger) abort$/;"	f
neosnippet#expandable	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#expandable() abort$/;"	f
neosnippet#expandable_or_jumpable	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#expandable_or_jumpable() abort$/;"	f
neosnippet#get_mirror_placeholder_marker_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_mirror_placeholder_marker_pattern() abort$/;"	f
neosnippet#get_mirror_placeholder_marker_substitute_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_mirror_placeholder_marker_substitute_pattern() abort$/;"	f
neosnippet#get_placeholder_marker_default_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_default_pattern() abort$/;"	f
neosnippet#get_placeholder_marker_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_pattern() abort$/;"	f
neosnippet#get_placeholder_marker_substitute_nonzero_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_substitute_nonzero_pattern() abort$/;"	f
neosnippet#get_placeholder_marker_substitute_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_substitute_pattern() abort$/;"	f
neosnippet#get_placeholder_marker_substitute_zero_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_marker_substitute_zero_pattern() abort$/;"	f
neosnippet#get_placeholder_target_marker_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_placeholder_target_marker_pattern() abort$/;"	f
neosnippet#get_runtime_snippets_directory	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_runtime_snippets_directory() abort$/;"	f
neosnippet#get_snippets_directory	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_snippets_directory() abort$/;"	f
neosnippet#get_sync_placeholder_marker_default_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_sync_placeholder_marker_default_pattern() abort$/;"	f
neosnippet#get_sync_placeholder_marker_pattern	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_sync_placeholder_marker_pattern() abort$/;"	f
neosnippet#get_user_snippets_directory	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#get_user_snippets_directory() abort$/;"	f
neosnippet#handlers#_all_clear_markers	.plugged/neosnippet.vim/autoload/neosnippet/handlers.vim	/^function! neosnippet#handlers#_all_clear_markers() abort$/;"	f
neosnippet#handlers#_cursor_moved	.plugged/neosnippet.vim/autoload/neosnippet/handlers.vim	/^function! neosnippet#handlers#_cursor_moved() abort$/;"	f
neosnippet#helpers#delete_selected_text	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#delete_selected_text(type, ...) abort$/;"	f
neosnippet#helpers#get_completion_snippets	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_completion_snippets() abort$/;"	f
neosnippet#helpers#get_cursor_snippet	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_cursor_snippet(snippets, cur_text) abort$/;"	f
neosnippet#helpers#get_filetype	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_filetype() abort$/;"	f
neosnippet#helpers#get_lspitem	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_lspitem(user_data) abort$/;"	f
neosnippet#helpers#get_selected_text	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_selected_text(type, ...) abort$/;"	f
neosnippet#helpers#get_snippet_files	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_snippet_files(filetype) abort$/;"	f
neosnippet#helpers#get_snippets	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_snippets(...) abort$/;"	f
neosnippet#helpers#get_snippets_directory	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_snippets_directory(...) abort$/;"	f
neosnippet#helpers#get_snippets_files	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_snippets_files(filetype) abort$/;"	f
neosnippet#helpers#get_user_data	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#get_user_data(completed_item) abort$/;"	f
neosnippet#helpers#json2vim	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#json2vim(expr) abort$/;"	f
neosnippet#helpers#substitute_selected_text	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#substitute_selected_text(type, text) abort$/;"	f
neosnippet#helpers#vim2json	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! neosnippet#helpers#vim2json(expr) abort$/;"	f
neosnippet#init#_initialize	.plugged/neosnippet.vim/autoload/neosnippet/init.vim	/^function! neosnippet#init#_initialize() abort$/;"	f
neosnippet#init#check	.plugged/neosnippet.vim/autoload/neosnippet/init.vim	/^function! neosnippet#init#check() abort$/;"	f
neosnippet#jumpable	.plugged/neosnippet.vim/autoload/neosnippet.vim	/^function! neosnippet#jumpable() abort$/;"	f
neosnippet#mappings#_anonymous	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_anonymous(snippet) abort$/;"	f
neosnippet#mappings#_clear_select_mode_mappings	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_clear_select_mode_mappings() abort$/;"	f
neosnippet#mappings#_complete_done	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_complete_done(cur_text, col) abort$/;"	f
neosnippet#mappings#_expand	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_expand(trigger) abort$/;"	f
neosnippet#mappings#_expand_target	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_expand_target() abort$/;"	f
neosnippet#mappings#_expand_target_trigger	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_expand_target_trigger(trigger) abort$/;"	f
neosnippet#mappings#_pre_trigger	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_pre_trigger() abort$/;"	f
neosnippet#mappings#_register_oneshot_snippet	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_register_oneshot_snippet() abort$/;"	f
neosnippet#mappings#_trigger	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#_trigger(function) abort$/;"	f
neosnippet#mappings#completed_expandable	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#completed_expandable() abort$/;"	f
neosnippet#mappings#expand_impl	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expand_impl() abort$/;"	f
neosnippet#mappings#expand_or_jump_impl	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expand_or_jump_impl() abort$/;"	f
neosnippet#mappings#expandable	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expandable() abort$/;"	f
neosnippet#mappings#expandable_or_jumpable	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#expandable_or_jumpable() abort$/;"	f
neosnippet#mappings#jump_impl	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#jump_impl() abort$/;"	f
neosnippet#mappings#jump_or_expand_impl	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#jump_or_expand_impl() abort$/;"	f
neosnippet#mappings#jumpable	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! neosnippet#mappings#jumpable() abort$/;"	f
neosnippet#parser#_conceal_argument	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_conceal_argument(arg, cnt, args) abort$/;"	f
neosnippet#parser#_get_completed_snippet	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_get_completed_snippet(completed_item, cur_text, next_text) abort$/;"	f
neosnippet#parser#_get_in_paren	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_get_in_paren(key, pair, str) abort$/;"	f
neosnippet#parser#_initialize_snippet	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_initialize_snippet(dict, path, line, pattern, name) abort$/;"	f
neosnippet#parser#_initialize_snippet_options	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_initialize_snippet_options() abort$/;"	f
neosnippet#parser#_parse_snippet	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_parse_snippet(filename, trigger) abort$/;"	f
neosnippet#parser#_parse_snippets	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! neosnippet#parser#_parse_snippets(filename) abort$/;"	f
neosnippet#util#escape_pattern	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#escape_pattern(...) abort$/;"	f
neosnippet#util#expand	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#expand(path) abort$/;"	f
neosnippet#util#get_buffer_config	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_buffer_config($/;"	f
neosnippet#util#get_completed_item	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_completed_item() abort$/;"	f
neosnippet#util#get_cur_text	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_cur_text() abort$/;"	f
neosnippet#util#get_last_status	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_last_status(...) abort$/;"	f
neosnippet#util#get_next_text	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_next_text() abort$/;"	f
neosnippet#util#get_vital	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#get_vital() abort$/;"	f
neosnippet#util#has_vimproc	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#has_vimproc(...) abort$/;"	f
neosnippet#util#iconv	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#iconv(...) abort$/;"	f
neosnippet#util#is_mac	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#is_mac(...) abort$/;"	f
neosnippet#util#is_sudo	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#is_sudo() abort$/;"	f
neosnippet#util#is_windows	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#is_windows(...) abort$/;"	f
neosnippet#util#option2list	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#option2list(str) abort$/;"	f
neosnippet#util#parse_options	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#parse_options(args, options_list) abort$/;"	f
neosnippet#util#print_error	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#print_error(string) abort$/;"	f
neosnippet#util#set_default	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#set_default(var, val, ...) abort $/;"	f
neosnippet#util#set_dictionary_helper	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#set_dictionary_helper(...) abort$/;"	f
neosnippet#util#strwidthpart	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#strwidthpart(...) abort$/;"	f
neosnippet#util#substitute_path_separator	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#substitute_path_separator(...) abort$/;"	f
neosnippet#util#system	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#system(...) abort$/;"	f
neosnippet#util#truncate	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#truncate(...) abort$/;"	f
neosnippet#util#uniq	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! neosnippet#util#uniq(list) abort$/;"	f
neosnippet#variables#clear_expand_stack	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#clear_expand_stack() abort$/;"	f
neosnippet#variables#current_neosnippet	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#current_neosnippet() abort$/;"	f
neosnippet#variables#data_dir	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#data_dir() abort$/;"	f
neosnippet#variables#expand_stack	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#expand_stack() abort$/;"	f
neosnippet#variables#pop_expand_stack	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#pop_expand_stack() abort$/;"	f
neosnippet#variables#runtime_dir	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#runtime_dir() abort$/;"	f
neosnippet#variables#set_snippets	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#set_snippets(list) abort$/;"	f
neosnippet#variables#snippets	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#snippets() abort$/;"	f
neosnippet#variables#snippets_dir	.plugged/neosnippet.vim/autoload/neosnippet/variables.vim	/^function! neosnippet#variables#snippets_dir() abort$/;"	f
neosnippet#view#_clear_markers	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! neosnippet#view#_clear_markers(expand_info) abort$/;"	f
neosnippet#view#_expand	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! neosnippet#view#_expand(cur_text, col, trigger_name) abort$/;"	f
neosnippet#view#_get_snippet_range	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! neosnippet#view#_get_snippet_range(begin_line, begin_patterns, end_line, end_patterns)/;"	f
neosnippet#view#_insert	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! neosnippet#view#_insert(snippet, options, cur_text, col) abort$/;"	f
neosnippet#view#_jump	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! neosnippet#view#_jump(_, col) abort$/;"	f
neosnippet#view#_search_outof_range	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! neosnippet#view#_search_outof_range(col) abort$/;"	f
neosnippet#view#_search_snippet_range	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! neosnippet#view#_search_snippet_range(start, end, cnt, ...) abort$/;"	f
nerdtree#checkForBrowse	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#postSourceActions	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningWindows	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	.plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
newItem	.plugged/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf	typeref:typename:*Item
newItems	.plugged/fzf/src/terminal_test.go	/^func newItems(str ...string) []*Item {$/;"	f	package:fzf	typeref:typename:[]*Item
newRange	.plugged/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf	typeref:typename:Range
new_ec_cli_test	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^function(new_ec_cli_test)$/;"	f
new_ec_test	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^function(new_ec_test name ec_file src_file regex)$/;"	f
new_ec_test_full_ec_file_path	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^function(new_ec_test_full_ec_file_path name ec_file src_file regex)$/;"	f
new_ec_test_multiline	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^function(new_ec_test_multiline name ec_file src_file regex)$/;"	f
new_ec_test_version	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^function(new_ec_test_version name ec_file src_file regex version)$/;"	f
new_shell	.plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	.plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	.plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
next	.plugged/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	struct:fzf.History	typeref:typename:string
nextAnsiEscapeSequence	.plugged/fzf/src/ansi.go	/^func nextAnsiEscapeSequence(s string) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
nextInt	.plugged/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f	package:fzf	typeref:typename:int
nextString	.plugged/fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f	package:fzf	typeref:typename:string
next_key	.plugged/hop.nvim/lua/hop/perm.lua	/^local function next_key(keys, key)$/;"	f
noInfoLine	.plugged/fzf/src/terminal.go	/^func (t *Terminal) noInfoLine() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
normal	.plugged/fzf/src/tui/tcell.go	/^	normal      ColorPair$/;"	m	struct:tui.TcellWindow	typeref:typename:ColorPair
normalize	.plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
normalize	.plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.term	typeref:typename:bool
normalizeRune	.plugged/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo	typeref:typename:rune
normalized	.plugged/fzf/src/algo/normalize.go	/^var normalized map[rune]rune = map[rune]rune{$/;"	v	package:algo	typeref:typename:map[rune]rune
notifyOnCont	.plugged/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnCont	.plugged/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	.plugged/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	.plugged/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	.plugged/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	.plugged/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
nth	.plugged/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern	typeref:typename:[]Range
numLines	.plugged/fzf/src/terminal.go	/^	numLines int$/;"	m	struct:fzf.previewed	typeref:typename:int
numPartitionsMultiplier	.plugged/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
number	.plugged/fzf/src/terminal.go	/^	number        bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
o	autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
offset	.plugged/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset	typeref:typename:[2]int32
offset	.plugged/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset	typeref:typename:[2]int32
offset	.plugged/fzf/src/terminal.go	/^	offset             int$/;"	m	struct:fzf.Terminal	typeref:typename:int
offset	.plugged/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.previewer	typeref:typename:int
offset	.plugged/fzf/src/terminal.go	/^	offset   int$/;"	m	struct:fzf.previewed	typeref:typename:int
offset	.plugged/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewResult	typeref:typename:int
offsetComponentRegex	.plugged/fzf/src/terminal.go	/^var offsetComponentRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
offsetPollTries	.plugged/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	.plugged/fzf/src/tui/light.go	/^var offsetRegexp *regexp.Regexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetRegexpBegin	.plugged/fzf/src/tui/light.go	/^var offsetRegexpBegin *regexp.Regexp = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetTrimCharsRegex	.plugged/fzf/src/terminal.go	/^var offsetTrimCharsRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
on_event	.plugged/neosnippet.vim/rplugin/python3/deoplete/sources/neosnippet.py	/^    def on_event(self, context):$/;"	m	class:Source
on_init	.plugged/neosnippet.vim/rplugin/python3/denite/source/neosnippet.py	/^    def on_init(self, context):$/;"	m	class:Source
one#highlight	colors/one.vim	/^function! one#highlight(group, fg, bg, attr)$/;"	f
one_value_keywords	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^    set(one_value_keywords NAME MATCH)$/;"	v	function:new_ec_cli_test
one_value_keywords	.plugged/editorconfig-vim/tests/core/tests/cmake/runandsort.cmake	/^    set(one_value_keywords RETVAL RETVAL_FAILURE)$/;"	v	function:run_and_sort
openTtyIn	.plugged/fzf/src/tui/light_unix.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
openTtyIn	.plugged/fzf/src/tui/light_windows.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
opt	.plugged/gruvbox/package.json	/^    "opt": true$/;"	b	object:vim
optString	.plugged/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
option_keywords	.plugged/editorconfig-vim/tests/core/tests/cmake/runandsort.cmake	/^    set(option_keywords CAPTURE_STDERR TRIM_INITIAL_LEADING_SPACE)$/;"	v	function:run_and_sort
optionalNextString	.plugged/fzf/src/options.go	/^func optionalNextString(args []string, i *int) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNumeric	.plugged/fzf/src/options.go	/^func optionalNumeric(args []string, i *int, defaultValue int) int {$/;"	f	package:fzf	typeref:typename:int
optionalRunes	.plugged/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
options	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^      const options = val.options as Record<string, Item>;$/;"	C	method:Source.gather
opts.sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines)$/;"	f
opts.sinklist	.plugged/fzf/plugin/fzf.vim	/^    function! opts.sinklist(lines) abort$/;"	f
optsFor	.plugged/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf	typeref:typename:*Options
origState	.plugged/fzf/src/tui/light.go	/^	origState     *term.State$/;"	m	struct:tui.LightRenderer	typeref:typename:*term.State
origStateInput	.plugged/fzf/src/tui/light.go	/^	origStateInput  uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origStateOutput	.plugged/fzf/src/tui/light.go	/^	origStateOutput uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origText	.plugged/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]byte
origin	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	struct:tui.LightRenderer
outHandle	.plugged/fzf/src/tui/light.go	/^	outHandle       uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
output	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^        $output = ""$/;"	v
output	.plugged/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
output	.plugged/fzf/src/terminal_test.go	/^	output string \/\/ literal output$/;"	m	struct:fzf.want	typeref:typename:string
output2	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output, '(', s:l, 'g')$/;"	v
output2	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output2, ')', s:r, 'g')$/;"	v
output_q	.plugged/delimitMate/test/autoclose_quotes.vim	/^    let output_q = substitute(output,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
overflow	.plugged/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow32	.plugged/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util	typeref:typename:uint32
overflow64	.plugged/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util	typeref:typename:uint64
override	.plugged/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	struct:fzf.History
override_opts	.plugged/hop.nvim/lua/hop/init.lua	/^local function override_opts(opts)$/;"	f
pad	.plugged/fzf/src/terminal.go	/^	pad int$/;"	m	struct:fzf.fitpad	typeref:typename:int
padding	.plugged/fzf/src/terminal.go	/^	padding            [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
params	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^  params(): Params { return {}; }$/;"	m	class:Source
parseActionList	.plugged/fzf/src/options.go	/^func parseActionList(masked string, original string, prevActions []*action, putAllowed bool, exi/;"	f	package:fzf	typeref:typename:[]*action
parseAlgo	.plugged/fzf/src/options.go	/^func parseAlgo(str string) algo.Algo {$/;"	f	package:fzf	typeref:typename:algo.Algo
parseAnsiCode	.plugged/fzf/src/ansi.go	/^func parseAnsiCode(s string, delimiter byte) (int, byte, string) {$/;"	f	package:fzf	typeref:typename:(int, byte, string)
parseBorder	.plugged/fzf/src/options.go	/^func parseBorder(str string, optional bool) tui.BorderShape {$/;"	f	package:fzf	typeref:typename:tui.BorderShape
parseHeight	.plugged/fzf/src/options.go	/^func parseHeight(str string) heightSpec {$/;"	f	package:fzf	typeref:typename:heightSpec
parseInfoStyle	.plugged/fzf/src/options.go	/^func parseInfoStyle(str string) (infoStyle, string) {$/;"	f	package:fzf	typeref:typename:(infoStyle, string)
parseKeyChords	.plugged/fzf/src/options.go	/^func parseKeyChords(str string, message string) map[tui.Event]string {$/;"	f	package:fzf	typeref:typename:map[tui.Event]string
parseKeyChordsImpl	.plugged/fzf/src/options.go	/^func parseKeyChordsImpl(str string, message string, exit func(string)) map[tui.Event]string {$/;"	f	package:fzf	typeref:typename:map[tui.Event]string
parseKeymap	.plugged/fzf/src/options.go	/^func parseKeymap(keymap map[tui.Event][]*action, str string, exit func(string)) {$/;"	f	package:fzf
parseLabelPosition	.plugged/fzf/src/options.go	/^func parseLabelPosition(opts *labelOpts, arg string) {$/;"	f	package:fzf
parseLayout	.plugged/fzf/src/options.go	/^func parseLayout(str string) layoutType {$/;"	f	package:fzf	typeref:typename:layoutType
parseMargin	.plugged/fzf/src/options.go	/^func parseMargin(opt string, margin string) [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
parseOptions	.plugged/fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f	package:fzf
parsePlaceholder	.plugged/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf	typeref:typename:(bool, string, placeholderFlags)
parsePreviewWindow	.plugged/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f	package:fzf
parsePreviewWindowImpl	.plugged/fzf/src/options.go	/^func parsePreviewWindowImpl(opts *previewOpts, input string, exit func(string)) {$/;"	f	package:fzf
parsePrompt	.plugged/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(func(), int)
parseSingleActionList	.plugged/fzf/src/options.go	/^func parseSingleActionList(str string, exit func(string)) []*action {$/;"	f	package:fzf	typeref:typename:[]*action
parseSize	.plugged/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseTerms	.plugged/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf	typeref:typename:[]termSet
parseTheme	.plugged/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
parseTiebreak	.plugged/fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f	package:fzf	typeref:typename:[]criterion
parseToggleSort	.plugged/fzf/src/options.go	/^func parseToggleSort(keymap map[tui.Event][]*action, str string) {$/;"	f	package:fzf
partialResult	.plugged/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	.plugged/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher	typeref:typename:int
passed	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let passed = line == eval(output2)$/;"	v
passed	.plugged/delimitMate/test/expand_cr.vim	/^  let passed = lines == expected$/;"	v
passed	.plugged/delimitMate/test/expand_space.vim	/^  let passed = lines == expected$/;"	v
paste	.plugged/fzf/test/test_go.rb	/^  def paste(str)$/;"	f	class:Tmux
path	.plugged/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History	typeref:typename:string
path_separator_backslash_in_cmd_line_regex	.plugged/editorconfig-vim/tests/core/tests/filetree/CMakeLists.txt	/^    set(path_separator_backslash_in_cmd_line_regex "^[ \\t\\n\\r]*$")$/;"	v
path_separator_backslash_in_cmd_line_regex	.plugged/editorconfig-vim/tests/core/tests/filetree/CMakeLists.txt	/^    set(path_separator_backslash_in_cmd_line_regex "^key1=value1[ \\t\\n\\r]*$")$/;"	v
pattern	.plugged/fzf/src/matcher.go	/^	pattern    *Pattern$/;"	m	struct:fzf.MatchRequest	typeref:typename:*Pattern
pattern	.plugged/fzf/src/merger.go	/^	pattern *Pattern$/;"	m	struct:fzf.Merger	typeref:typename:*Pattern
patternBuilder	.plugged/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher	typeref:typename:func([]rune) *Pattern
paused	.plugged/fzf/src/terminal.go	/^	paused             bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
pausedState	.plugged/fzf/src/terminal.go	/^	pausedState$/;"	c	package:fzf
pborder	.plugged/fzf/src/terminal.go	/^	pborder            tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
percent	.plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
percent	.plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec	typeref:typename:bool
placeCursor	.plugged/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	struct:fzf.Terminal
placeholder	.plugged/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
placeholderFlags	.plugged/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plugin/editorconfig.vim	.plugged/editorconfig-vim/tests/plugin/spec/editorconfig_spec.rb	/^  describe 'plugin\/editorconfig.vim' do$/;"	d
plus	.plugged/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pointer	.plugged/fzf/src/terminal.go	/^	pointer            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerEmpty	.plugged/fzf/src/terminal.go	/^	pointerEmpty       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerLen	.plugged/fzf/src/terminal.go	/^	pointerLen         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
points	.plugged/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result	typeref:typename:[4]uint16
posArray	.plugged/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo	typeref:typename:*[]int
posDown	.plugged/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	.plugged/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	.plugged/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	.plugged/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf	typeref:type:windowPosition
position	.plugged/fzf/src/options.go	/^	position    windowPosition$/;"	m	struct:fzf.previewOpts	typeref:typename:windowPosition
postProcessOptions	.plugged/fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f	package:fzf
posx	.plugged/fzf/src/tui/light.go	/^	posx     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
posy	.plugged/fzf/src/tui/light.go	/^	posy     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
prefixLength	.plugged/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token	typeref:typename:int32
prepare	.plugged/fzf/test/test_go.rb	/^  def prepare$/;"	f	class:Tmux
preserveSpace	.plugged/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pressed	.plugged/fzf/src/terminal.go	/^	pressed            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prevDownTime	.plugged/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer	typeref:typename:time.Time
prevDownTime	.plugged/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:time.Time
prevLines	.plugged/fzf/src/terminal.go	/^	prevLines          []itemLine$/;"	m	struct:fzf.Terminal	typeref:typename:[]itemLine
preview	.plugged/fzf/src/tui/light.go	/^	preview  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
preview	.plugged/fzf/src/tui/tcell.go	/^	preview     bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
previewBox	.plugged/fzf/src/terminal.go	/^	previewBox         *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
previewCancelWait	.plugged/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c	package:fzf
previewChunkDelay	.plugged/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c	package:fzf
previewDelayed	.plugged/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c	package:fzf
previewLabel	.plugged/fzf/src/terminal.go	/^	previewLabel       labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
previewLabelLen	.plugged/fzf/src/terminal.go	/^	previewLabelLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
previewLabelOpts	.plugged/fzf/src/terminal.go	/^	previewLabelOpts   labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
previewOpts	.plugged/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewOpts	.plugged/fzf/src/terminal.go	/^	previewOpts        previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
previewRequest	.plugged/fzf/src/terminal.go	/^type previewRequest struct {$/;"	s	package:fzf
previewResult	.plugged/fzf/src/terminal.go	/^type previewResult struct {$/;"	s	package:fzf
previewed	.plugged/fzf/src/terminal.go	/^	previewed          previewed$/;"	m	struct:fzf.Terminal	typeref:typename:previewed
previewed	.plugged/fzf/src/terminal.go	/^type previewed struct {$/;"	s	package:fzf
previewer	.plugged/fzf/src/terminal.go	/^	previewer          previewer$/;"	m	struct:fzf.Terminal	typeref:typename:previewer
previewer	.plugged/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	.plugged/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	struct:fzf.History	typeref:typename:string
printAll	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	struct:fzf.Terminal
printColoredString	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printColoredString(window tui.Window, text []rune, offsets []colorOffset, col/;"	f	struct:fzf.Terminal
printHeader	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	struct:fzf.Terminal
printHighlighted	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair/;"	f	struct:fzf.Terminal	typeref:typename:int
printInfo	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	struct:fzf.Terminal
printItem	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, i int, current bool, bar bool) {$/;"	f	struct:fzf.Terminal
printLabel	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printLabel(window tui.Window, render labelPrinter, opts labelOpts, length int/;"	f	struct:fzf.Terminal
printList	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	struct:fzf.Terminal
printPreview	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	struct:fzf.Terminal
printPreviewDelayed	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f	struct:fzf.Terminal
printPrompt	.plugged/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	struct:fzf.Terminal
printQuery	.plugged/fzf/src/terminal.go	/^	printQuery         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
printString	.plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f	struct:tui.TcellWindow
printer	.plugged/fzf/src/terminal.go	/^	printer            func(string)$/;"	m	struct:fzf.Terminal	typeref:typename:func(string)
printsep	.plugged/fzf/src/terminal.go	/^	printsep           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
procFun	.plugged/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:map[termType]algo.Algo
processScheme	.plugged/fzf/src/options.go	/^func processScheme(opts *Options) {$/;"	f	package:fzf
processTabs	.plugged/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, int)
progress	.plugged/fzf/src/terminal.go	/^	progress           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
progressMinDuration	.plugged/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
prompt	.plugged/fzf/src/terminal.go	/^	prompt             func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
promptLen	.plugged/fzf/src/terminal.go	/^	promptLen          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
promptLine	.plugged/fzf/src/terminal.go	/^func (t *Terminal) promptLine() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
protector	.plugged/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	.plugged/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
push	.plugged/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
pusher	.plugged/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader	typeref:typename:func([]byte) bool
pwindow	.plugged/fzf/src/terminal.go	/^	pwindow            tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
pwindow	.plugged/fzf/src/terminal.go	/^	pwindow      tui.Window$/;"	m	struct:fzf.previewRequest	typeref:typename:tui.Window
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
query	.plugged/fzf/src/terminal.go	/^	query         bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
query	.plugged/fzf/src/terminal_test.go	/^	query    string$/;"	m	struct:fzf.give	typeref:typename:string
queryCache	.plugged/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf	typeref:typename:map[string][]Result
queryCacheMax	.plugged/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf	typeref:typename:int
queryLen	.plugged/fzf/src/terminal.go	/^	queryLen           [2]int$/;"	m	struct:fzf.Terminal	typeref:typename:[2]int
queryLen	.plugged/fzf/src/terminal.go	/^	queryLen int$/;"	m	struct:fzf.itemLine	typeref:typename:int
queued	.plugged/fzf/src/tui/light.go	/^	queued        strings.Builder$/;"	m	struct:tui.LightRenderer	typeref:typename:strings.Builder
quoteEntry	.plugged/fzf/src/terminal_unix.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf	typeref:typename:string
quoteEntry	.plugged/fzf/src/terminal_windows.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf	typeref:typename:string
quotes	.plugged/delimitMate/test/autoclose_quotes.vim	/^  let quotes = split(g:delimitMate_quotes, '\\s')$/;"	v
randResult	.plugged/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf	typeref:typename:Result
rangeEllipsis	.plugged/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
readFile	.plugged/fzf/src/terminal_test.go	/^func readFile(path string) ([]byte, error) {$/;"	f	package:fzf	typeref:typename:([]byte, error)
readFiles	.plugged/fzf/src/reader.go	/^func (r *Reader) readFiles() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromCommand	.plugged/fzf/src/reader.go	/^func (r *Reader) readFromCommand(shell *string, command string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromStdin	.plugged/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readerBufferSize	.plugged/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	.plugged/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	.plugged/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	.plugged/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
reading	.plugged/fzf/src/terminal.go	/^	reading            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
readonce	.plugged/fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
redraw	.plugged/fzf/src/terminal.go	/^func (t *Terminal) redraw() {$/;"	f	struct:fzf.Terminal
reduce_label	.plugged/hop.nvim/lua/hop/hint.lua	/^local function reduce_label(label, key)$/;"	f
refresh	.plugged/fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f	struct:fzf.Terminal
regex	.plugged/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter	typeref:typename:*regexp.Regexp
release	.plugged/fzf/Makefile	/^release:$/;"	t
reload	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 0$/;"	v
reload	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 1$/;"	v
reload	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^let reload = 1$/;"	v
reload	.plugged/delimitMate/test/autoclose_quotes.vim	/^    let reload = 0$/;"	v
reload	.plugged/delimitMate/test/autoclose_quotes.vim	/^    let reload = 1$/;"	v
reload	.plugged/delimitMate/test/autoclose_quotes.vim	/^let reload = 1$/;"	v
remove	.plugged/fzf/uninstall	/^remove() {$/;"	f
remove_line	.plugged/fzf/uninstall	/^remove_line() {$/;"	f
renderPreviewArea	.plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewArea(unchanged bool) {$/;"	f	struct:fzf.Terminal
renderPreviewScrollbar	.plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewScrollbar(yoff int, barLength int, barStart int) {$/;"	f	struct:fzf.Terminal
renderPreviewSpinner	.plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f	struct:fzf.Terminal
renderPreviewText	.plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(height int, lines []string, lineNo int, unchanged bool) {$/;"	f	struct:fzf.Terminal
renderer	.plugged/fzf/src/tui/light.go	/^	renderer *LightRenderer$/;"	m	struct:tui.LightWindow	typeref:typename:*LightRenderer
repeat	.plugged/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f	package:tui	typeref:typename:string
replacePlaceholder	.plugged/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list []*Ite/;"	f	struct:fzf.Terminal	typeref:typename:string
replacePlaceholder	.plugged/fzf/src/terminal.go	/^func replacePlaceholder(template string, stripAnsi bool, delimiter Delimiter, printsep string, f/;"	f	package:fzf	typeref:typename:string
report_version	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^        '^(-v|--version)$' { $report_version = $true }$/;"	v
report_version	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$report_version = $false$/;"	v
repository	.plugged/gruvbox/package.json	/^  "repository": "git@github.com:morhetz\/gruvbox.git",$/;"	s
repository	.plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/vim-snippets.git"},$/;"	o
reqBox	.plugged/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
reqBox	.plugged/fzf/src/terminal.go	/^	reqBox             *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
reqClose	.plugged/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqFullRedraw	.plugged/fzf/src/terminal.go	/^	reqFullRedraw$/;"	c	package:fzf
reqHeader	.plugged/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	.plugged/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	.plugged/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	.plugged/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDelayed	.plugged/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c	package:fzf
reqPreviewDisplay	.plugged/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	.plugged/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewRefresh	.plugged/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	.plugged/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	.plugged/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
reqQuit	.plugged/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedrawBorderLabel	.plugged/fzf/src/terminal.go	/^	reqRedrawBorderLabel$/;"	c	package:fzf
reqRedrawPreviewLabel	.plugged/fzf/src/terminal.go	/^	reqRedrawPreviewLabel$/;"	c	package:fzf
reqRefresh	.plugged/fzf/src/terminal.go	/^	reqRefresh$/;"	c	package:fzf
reqReinit	.plugged/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	.plugged/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqRetry	.plugged/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
resizeWindows	.plugged/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows(forcePreview bool) {$/;"	f	struct:fzf.Terminal
restart	.plugged/fzf/src/reader.go	/^func (r *Reader) restart(command string) {$/;"	f	struct:fzf.Reader
restoreTerminal	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f	unknown:tui.LightRenderer
restoreTerminal	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
result	.plugged/fzf/src/terminal.go	/^	result   Result$/;"	m	struct:fzf.itemLine	typeref:typename:Result
resumableState	.plugged/fzf/src/terminal.go	/^type resumableState int$/;"	t	package:fzf	typeref:typename:int
ret	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^    const ret: Record<string, Item> = {} as Record<string, Item>;$/;"	C	method:Source.gather
reverseStringArray	.plugged/fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f	package:fzf	typeref:typename:[]string
revision	.plugged/fzf/main.go	/^var revision string = "devel"$/;"	v	package:main	typeref:typename:string
rgb	colors/one.vim	/^  fun <SID>rgb(rgb)$/;"	f
rgb_color	colors/one.vim	/^  fun <SID>rgb_color(x, y, z)$/;"	f
rgb_level	colors/one.vim	/^  fun <SID>rgb_level(n)$/;"	f
rgb_number	colors/one.vim	/^  fun <SID>rgb_number(x)$/;"	f
rmcup	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	struct:tui.LightRenderer
rubout	.plugged/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	struct:fzf.Terminal
runVimTests	.plugged/delimitMate/test/_setup.vim	/^let runVimTests = expand('<sfile>:p:h').'\/build\/runVimTests'$/;"	v
run_and_sort	.plugged/editorconfig-vim/tests/core/tests/cmake/runandsort.cmake	/^function(run_and_sort)$/;"	f
run_process	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^function global:run_process$/;"	f
running	.plugged/fzf/src/terminal.go	/^	running            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
s	init.vim	/^nnoremap s <nop>$/;"	m
s	init.vim	/^nnoremap s @ea$/;"	m
s:ApplyConfig	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:ApplyConfig(config) abort " Set the buffer options {{{1$/;"	f
s:AutoClose	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:AutoClose() "{{{$/;"	f
s:AutoResetWidth	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:AutoResetWidth()$/;"	f
s:AutoUpdate	.plugged/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
s:Bookmark	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.Edit	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
s:Bookmark.GetNodeForName	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	.plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:Cache	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^let s:Cache = neosnippet#util#get_vital().import('System.Cache.Deprecated')$/;"	v
s:Cache	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^let s:Cache = neosnippet#util#get_vital().import('System.Cache.Deprecated')$/;"	v
s:ChangeFoldLevel	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
s:CheckExCtagsVersion	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
s:CheckFTCtags	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
s:CheckForExCtags	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
s:CheckMouseClick	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
s:CloseFold	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
s:CloseWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
s:CorrectFocusOnStartup	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
s:CreateAutocommands	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
s:CreateTabTreeVCS	.plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
s:Creator	.plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	.plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:CtagsErrMsg	.plugged/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
s:DetectFiletype	.plugged/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
s:Disable	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:Disable()$/;"	f
s:DisableOnDiff	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:DisableOnDiff()$/;"	f
s:DisableShellSlash	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:DisableShellSlash() " {{{2$/;"	f
s:EditorConfigEnable	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:EditorConfigEnable(should_enable)$/;"	f
s:EscapeCtagsCmd	.plugged/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
s:Event	.plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	.plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:ExecuteCtags	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
s:ExecuteCtagsOnFile	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
s:ExtraMappings	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:ExtraMappings() "{{{$/;"	f
s:Filter	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:Filter()$/;"	f
s:FindParentVCSRoot	.plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
s:FlagSet	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	.plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:GetFileWinnr	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
s:GetFilenames	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:GetFilenames(path, filename) " {{{1$/;"	f
s:GetNearbyTag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(request, forcecurrent, ...) abort$/;"	f
s:GetSupportedFiletypes	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
s:GetTagInfo	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
s:GotoFileWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
s:GotoNextFold	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
s:GotoNextToplevelTag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
s:GotoPrevFold	.plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
s:HL	.plugged/gruvbox/colors/gruvbox.vim	/^function! s:HL(group, fg, ...)$/;"	f
s:HandleBufDelete	.plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
s:HandleBufWrite	.plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
s:HandleOnlyWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
s:HasOpenFileWindows	.plugged/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
s:HighlightTag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
s:IndentLinesDisable	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:IndentLinesDisable()$/;"	f
s:IndentLinesEnable	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:IndentLinesEnable()$/;"	f
s:IndentLinesToggle	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:IndentLinesToggle()$/;"	f
s:Init	.plugged/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
s:InitColor	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:InitColor()$/;"	f
s:InitTypes	.plugged/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
s:InitWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
s:Initialize	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:Initialize() " Initialize the plugin.  {{{1$/;"	f
s:InitializeExternalCommand	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:InitializeExternalCommand()$/;"	f
s:InitializeVimCore	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:InitializeVimCore()$/;"	f
s:IsLineVisible	.plugged/tagbar/autoload/tagbar.vim	/^function! s:IsLineVisible(line) abort$/;"	f
s:IsRuleActive	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:IsRuleActive(name, config) " {{{1$/;"	f
s:IsValidFile	.plugged/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
s:JumpToNearbyTag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToNearbyTag(direction, request, flags) abort$/;"	f
s:JumpToTag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar, ...) abort$/;"	f
s:KeyMap	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Compare	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
s:KeyMap.Create	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:LEFT_BRACE	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^let s:LEFT_BRACE = '\\v[\\\\]@8<!\\{'$/;"	v
s:LeadingSpaceDisable	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:LeadingSpaceDisable()$/;"	f
s:LeadingSpaceEnable	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:LeadingSpaceEnable()$/;"	f
s:LeadingSpaceToggle	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:LeadingSpaceToggle()$/;"	f
s:LoadUserTypeDefs	.plugged/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
s:MAX_PROPERTY_NAME	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^let s:MAX_PROPERTY_NAME = 1024$/;"	v
s:MAX_PROPERTY_VALUE	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^let s:MAX_PROPERTY_VALUE = 4096$/;"	v
s:MAX_SECTION_NAME	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^let s:MAX_SECTION_NAME = 4096$/;"	v
s:Map	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:Map() "{{{$/;"	f
s:MapKeys	.plugged/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
s:MenuController	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.isMinimal	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
s:MenuController.showMenu	.plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	.plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:MinimizeMaxFoldLevel	.plugged/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
s:NERDTree	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CursorToBookmarkTable	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
s:NERDTree.ExistsForBuf	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	.plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:NUMERIC_RANGE	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^let s:NUMERIC_RANGE = '\\v([+-]?\\d+)' . '\\.\\.' . '([+-]?\\d+)'$/;"	v
s:NoAutoClose	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:NoAutoClose() "{{{$/;"	f
s:Notifier	.plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	.plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	.plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	.plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	.plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:OPTCRE	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^let s:OPTCRE = '\\v\\s*([^:=[:space:]][^:=]*)\\s*([:=])\\s*(.*)$'$/;"	v
s:OpenFold	.plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
s:OpenParents	.plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
s:OpenWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
s:Opener	.plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	.plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:ParseTagline	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
s:Path	.plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.WinToUnixPath	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.addDelimiter	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
s:Path.bookmarkNames	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.copy	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
s:Path.isHiddenUnder	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
s:Path.isUnixHiddenFile	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	.plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:PrintHelp	.plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
s:PrintKinds	.plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
s:PrintTag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
s:ProcessFile	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
s:ProcessTag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
s:RIGHT_BRACE	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^let s:RIGHT_BRACE = '\\v[\\\\]@8<!\\}'$/;"	v
s:RenderContent	.plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
s:RenderKeepView	.plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
s:ReopenWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
s:ResetConcealOption	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:ResetConcealOption()$/;"	f
s:ResetShellSlash	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:ResetShellSlash() " {{{2$/;"	f
s:ResetWidth	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:ResetWidth(...)$/;"	f
s:RestoreSession	.plugged/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
s:Rg	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:Rg(txt)$/;"	f
s:RgGetVisualSelection	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgGetVisualSelection()$/;"	f
s:RgGrepContext	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgGrepContext(search, txt)$/;"	f
s:RgHasFile	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgHasFile(path)$/;"	f
s:RgHighlight	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgHighlight(txt)$/;"	f
s:RgMakePath	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgMakePath(dirs, dir)$/;"	f
s:RgPathContext	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgPathContext(search, txt)$/;"	f
s:RgRootDir	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgRootDir()$/;"	f
s:RgSearch	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgSearch(txt)$/;"	f
s:RgSearchTerm	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgSearchTerm(txt)$/;"	f
s:RgShowRoot	.plugged/vim-ripgrep/plugin/vim-ripgrep.vim	/^fun! s:RgShowRoot()$/;"	f
s:SECTCRE	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^let s:SECTCRE = '\\v^\\s*\\[(%([^\\\\#;]|\\\\.)+)\\]'$/;"	v
s:SID	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
s:SID_PREFIX	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! s:SID_PREFIX() abort$/;"	f
s:SNR	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val]))/;"	v
s:SetConcealOption	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:SetConcealOption()$/;"	f
s:SetFoldLevel	.plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
s:SetFoldLevelRecursive	.plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
s:SetStatusLine	.plugged/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
s:Setup	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:Setup()$/;"	f
s:ShowInPreviewWin	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
s:ShowPrototype	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
s:ShrinkIfExpanded	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
s:SourcedFile	.plugged/vim-snippets/plugin/vimsnippets.vim	/^let s:SourcedFile=expand("<sfile>")$/;"	v
s:SpawnExternalParser	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:SpawnExternalParser(cmd, target) " {{{2$/;"	f
s:State	.plugged/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:State.New	.plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
s:State.getCurrent	.plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
s:State.setCurrentFile	.plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
s:State.setPaused	.plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
s:TYPE	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE_DICT	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:TagbarBufName	.plugged/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
s:ToggleAutoclose	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
s:ToggleCaseInsensitive	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
s:ToggleFold	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
s:ToggleHelp	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
s:ToggleHideNonPublicTags	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
s:ToggleOnDiff	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:ToggleOnDiff()$/;"	f
s:TogglePause	.plugged/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
s:ToggleSort	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
s:ToggleTabTreeVCS	.plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
s:ToggleWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
s:TransformUserTypeDef	.plugged/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
s:TreeDirNode	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getCascadeRoot	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
s:TreeDirNode.getChild	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getDirChildren	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
s:TreeDirNode.getVisibleChildCount	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	.plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findSibling	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openExplorer	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
s:TreeFileNode.openInNewTab	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	.plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:TriggerAbb	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:TriggerAbb() "{{{$/;"	f
s:TrimTrailingWhitespace	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:TrimTrailingWhitespace() " {{{1$/;"	f
s:UI	.plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
s:UI.getPath	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	.plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:Unmap	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:Unmap() " {{{$/;"	f
s:UseConfigFiles	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:UseConfigFiles() abort " Apply config to the current buffer {{{1$/;"	f
s:UseConfigFiles_ExternalCommand	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:UseConfigFiles_ExternalCommand(target)$/;"	f
s:UseConfigFiles_VimCore	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^function! s:UseConfigFiles_VimCore(target)$/;"	f
s:VimEnter	.plugged/indentLine/after/plugin/indentLine.vim	/^function! s:VimEnter()$/;"	f
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital = {}$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:ZoomWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
s:_SID	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^  function! s:_SID() abort$/;"	f
s:_SID	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  function! s:_SID() abort$/;"	f
s:_cache	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^let s:_cache = {}$/;"	v
s:_compare	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
s:_create_hash	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_create_hash(dir, str) abort$/;"	f
s:_default_compare	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
s:_dot_to_sharp	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
s:_encode_name	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_encode_name(cache_dir, filename) abort$/;"	f
s:_exists_autoload_func_with_source	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_exists_autoload_func_with_source(funcname) abort$/;"	f
s:_extract_files	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
s:_file2module	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_file2module(file) abort$/;"	f
s:_function	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  function! s:_function(fstr) abort$/;"	f
s:_getPrefix	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
s:_get_builtin_module	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:_get_module	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_get_module(name) abort dict$/;"	f
s:_global_vital_files	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_global_vital_files() abort$/;"	f
s:_handleOldOptions	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:_import	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_import(name) abort dict$/;"	f
s:_import_func_name	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
s:_module_path	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_module_path(name) abort$/;"	f
s:_module_sid	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_module_sid(name) abort$/;"	f
s:_module_sid_base_dir	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
s:_pad_with_char	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
s:_path2project_directory_git	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
s:_path2project_directory_others	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
s:_path2project_directory_svn	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
s:_plugin_name	.plugged/neosnippet.vim/autoload/vital/_neosnippet.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_redir	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_redir(cmd) abort$/;"	f
s:_replace	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
s:_runtime	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_runtime(path) abort$/;"	f
s:_s	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_self_vital_files	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_self_vital_files() abort$/;"	f
s:_sfuncname	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
s:_sid	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
s:_source	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:_source(path) abort$/;"	f
s:_split_by_wcswidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
s:_split_by_wcswidth_once	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
s:_unify_path	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:_unify_path_cache	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:_uniq	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^  function! s:_uniq(list) abort$/;"	f
s:_vital_created	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
s:_vital_depends	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_depends	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_vital_depends() abort$/;"	f
s:_vital_loaded	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_vital_loaded	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:_vital_loaded(V) abort$/;"	f
s:_warn_deprecated	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
s:_wcwidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:_wcwidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:action_for	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:action_table	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^let s:action_table = {}$/;"	v
s:action_table	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^let s:action_table.expand = {$/;"	v
s:action_table	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^let s:action_table.preview = {$/;"	v
s:action_table	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^let s:action_table.unite__new_candidate = {$/;"	v
s:action_table	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^let s:action_table = {}$/;"	v
s:action_table	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^let s:action_table.neosnippet_source = {$/;"	v
s:action_table.expand.func	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! s:action_table.expand.func(candidate) abort$/;"	f
s:action_table.neosnippet_source.func	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^function! s:action_table.neosnippet_source.func(candidates) abort$/;"	f
s:action_table.preview.func	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! s:action_table.preview.func(candidates) abort$/;"	f
s:action_table.unite__new_candidate.func	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! s:action_table.unite__new_candidate.func(candidate) abort$/;"	f
s:activateAll	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
s:activateBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
s:activateDirNode	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
s:activateFileNode	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
s:addChild	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
s:addTag	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
s:add_db	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_snippet_attribute	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! s:add_snippet_attribute(snippets_file, line, linenr, snippet_dict) abort$/;"	f
s:add_snr	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_snr	.plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
s:add_tag_recursive	.plugged/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
s:added_db_files	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:added_dbs = []$/;"	v
s:ag_handler	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
s:ag_to_qf	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
s:align_lists	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:all	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
s:and	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:and(xs) abort$/;"	f
s:ansi	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:any	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:aqua	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:aqua   = s:getGruvColor('GruvboxAqua')$/;"	v
s:aqua	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.bright_aqua$/;"	v
s:aqua	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua   = s:gb.faded_aqua$/;"	v
s:aqua	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:aqua[1]   = 14$/;"	v
s:ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assert	.plugged/neosnippet.vim/test/functions.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:autocommands_done	.plugged/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:b	colors/NeoSolarized.vim	/^    let s:b           = ""$/;"	v
s:b	colors/NeoSolarized.vim	/^    let s:b           = ",bold"$/;"	v
s:balance_matchpairs	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:balance_matchpairs(char) "{{{$/;"	f
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_dir	.plugged/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:bash	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bash()$/;"	f
s:batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
s:bb	colors/NeoSolarized.vim	/^    let s:bb          = ""$/;"	v
s:bb	colors/NeoSolarized.vim	/^    let s:bb          = ",bold"$/;"	v
s:beep	.plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:bg0	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg0  = s:getGruvColor('GruvboxBg0')$/;"	v
s:bg0	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_hard$/;"	v
s:bg0	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_soft$/;"	v
s:bg0	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_hard$/;"	v
s:bg0	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_soft$/;"	v
s:bg0	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.dark0$/;"	v
s:bg0	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0  = s:gb.light0$/;"	v
s:bg0	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg0[1]    = 0$/;"	v
s:bg1	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg1  = s:getGruvColor('GruvboxBg1')$/;"	v
s:bg1	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.dark1$/;"	v
s:bg1	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg1  = s:gb.light1$/;"	v
s:bg2	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg2  = s:getGruvColor('GruvboxBg2')$/;"	v
s:bg2	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.dark2$/;"	v
s:bg2	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg2  = s:gb.light2$/;"	v
s:bg3	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.dark3$/;"	v
s:bg3	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg3  = s:gb.light3$/;"	v
s:bg4	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:bg4  = s:getGruvColor('GruvboxBg4')$/;"	v
s:bg4	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.dark4$/;"	v
s:bg4	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bg4  = s:gb.light4$/;"	v
s:bin	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:binary_search	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
s:blue	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:blue   = s:getGruvColor('GruvboxBlue')$/;"	v
s:blue	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.bright_blue$/;"	v
s:blue	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue   = s:gb.faded_blue$/;"	v
s:blue	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:blue[1]   = 12$/;"	v
s:bold	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:bold = ''$/;"	v
s:bold	.plugged/gruvbox/colors/gruvbox.vim	/^let s:bold = 'bold,'$/;"	v
s:border_opt	.plugged/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
s:break	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
s:btags_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buffer_line_handler	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buffer_seqno	.plugged/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:buflisted	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:bufopen	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:c	colors/NeoSolarized.vim	/^    let s:c               = ",undercurl"$/;"	v
s:cache_project_root	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:cache_sid	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:cache_sid = {}$/;"	v
s:cached_translate	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^function! s:cached_translate(pat)$/;"	f
s:calc_size	.plugged/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:callback	.plugged/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:chCwd	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
s:chRoot	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
s:changesurround	.plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:char_range	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
s:check_assertions	.plugged/editorconfig-vim/autoload/editorconfig_core/handler.vim	/^function! s:check_assertions(job)$/;"	f
s:check_old_cache	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:check_old_cache(cache_dir, filename) abort$/;"	f
s:check_requirements	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:checked	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	.plugged/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:checked_ctags	.plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	.plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chomp	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:chomp	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
s:chop	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clear	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:clear(list) abort$/;"	f
s:clearOldFolds	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
s:clear_bg	.plugged/vim-transparent/autoload/background.vim	/^function! s:clear_bg(group)$/;"	f
s:closeChildren	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
s:closeCurrentDir	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
s:closeFold	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeFold	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
s:closeKindFold	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
s:closeTreeWindow	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
s:closematch	.plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:cmd	.plugged/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd_history_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:collect	.plugged/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:color_column	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:color_column = get(s:gb, g:gruvbox_color_column)$/;"	v
s:color_column	.plugged/gruvbox/colors/gruvbox.vim	/^let s:color_column = s:bg1$/;"	v
s:combinations	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
s:command_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commits	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(range, buffer_local, args)$/;"	f
s:commits_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_head	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
s:common_sink	.plugged/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:compare_binary_versions	.plugged/fzf/plugin/fzf.vim	/^function! s:compare_binary_versions(a, b)$/;"	f
s:compare_by_kind	.plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
s:compare_by_line	.plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_typeinfo	.plugged/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:compare_versions	.plugged/fzf/plugin/fzf.vim	/^function! s:compare_versions(a, b)$/;"	f
s:complete_insert	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:concat	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:concat(list) abort$/;"	f
s:conj	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
s:cons	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
s:contains_multibyte	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
s:cpo_save	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	.plugged/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:createKinddict	.plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
s:create_popup	.plugged/fzf/plugin/fzf.vim	/^  function s:create_popup(opts) abort$/;"	f
s:create_popup	.plugged/fzf/plugin/fzf.vim	/^  function! s:create_popup(opts) abort$/;"	f
s:create_pseudotag	.plugged/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
s:csi	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:ctags_is_uctags	.plugged/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:cursor_idx	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:cursor_idx() "{{{$/;"	f
s:customOpenBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
s:customOpenDir	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
s:customOpenFile	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
s:dark	colors/one.vim	/^    let s:dark = 1$/;"	v
s:dark	colors/one.vim	/^  let s:dark = 0$/;"	v
s:debug_enabled	.plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	.plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:default_action	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	.plugged/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_layout	.plugged/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
s:defaults	.plugged/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:defs	.plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delayed_update_files	.plugged/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:delete	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:delete(cache_dir, filename) abort$/;"	f
s:delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:deleteBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
s:delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:deletefile	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:deletefile(cache_dir, filename) abort$/;"	f
s:did_check_exe	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:diffidx	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
s:dirArrows	.plugged/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowEx/;"	v
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:displayHelp	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do_delayed_update	.plugged/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:dopopd	.plugged/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:dosurround	.plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:dstring	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
s:dump_bytes	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^function! s:dump_bytes(text)$/;"	f
s:dump_chars	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^function! s:dump_chars(text)$/;"	f
s:edit_options	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^let s:edit_options = [$/;"	v
s:editorconfig_core_mode	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let s:editorconfig_core_mode = ''$/;"	v
s:editorconfig_core_mode	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let s:editorconfig_core_mode = g:EditorConfig_core_mode$/;"	v
s:editorconfig_exec_path	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let s:editorconfig_exec_path = ''$/;"	v
s:editorconfig_exec_path	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^    let s:editorconfig_exec_path = g:EditorConfig_exec_path$/;"	v
s:enc_to_cp	.plugged/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
s:ends_with	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:error	.plugged/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escape	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	.plugged/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escape_file_searching	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
s:escape_for_bash	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape_for_bash(path)$/;"	f
s:escape_pattern	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escape_pattern	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:eval	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:eval_snippet	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! s:eval_snippet(snippet_text) abort$/;"	f
s:evaluate_opts	.plugged/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:excmds	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:execute	.plugged/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:execute_term	.plugged/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	.plugged/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exists	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:exists(name, ...) "{{{$/;"	f
s:exists	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:exists(name) abort dict$/;"	f
s:exit_handler	.plugged/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
s:expand_bufnr	.plugged/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:expand_placeholder	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! s:expand_placeholder(start, end, holder_cnt, line, ...) abort$/;"	f
s:expand_target_placeholder	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! s:expand_target_placeholder(line, col) abort$/;"	f
s:extend	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend_opts	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extractafter	.plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractbefore	.plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:fg0	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.dark0$/;"	v
s:fg0	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg0 = s:gb.light0$/;"	v
s:fg1	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg1  = s:getGruvColor('GruvboxFg1')$/;"	v
s:fg1	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.dark1$/;"	v
s:fg1	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1 = s:gb.light1$/;"	v
s:fg1	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg1[1]    = 15$/;"	v
s:fg2	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.dark2$/;"	v
s:fg2	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg2 = s:gb.light2$/;"	v
s:fg3	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.dark3$/;"	v
s:fg3	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg3 = s:gb.light3$/;"	v
s:fg4	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:fg4  = s:getGruvColor('GruvboxFg4')$/;"	v
s:fg4	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.dark4$/;"	v
s:fg4	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4 = s:gb.light4$/;"	v
s:fg4	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4[1]    = 7$/;"	v
s:fg4_256	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.dark4_256$/;"	v
s:fg4_256	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.light4_256$/;"	v
s:fg_pdef	colors/NeoSolarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	colors/NeoSolarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	colors/NeoSolarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:file_options	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_source	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:filereadable	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:filereadable(cache_dir, filename) abort$/;"	f
s:fill_quickfix	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
s:find	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
s:findAndRevealPath	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
s:find_index	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
s:find_indices	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
s:find_last_index	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_open_window	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_line	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:fixindent	.plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:flatten	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
s:fmt_excmd	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:foldl	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
s:foldl1	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
s:foldr	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
s:foldr1	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
s:format_cmd	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_mark	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_win	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:function	.plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:fzf	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_call	.plugged/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_expand	.plugged/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	.plugged/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	.plugged/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	.plugged/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_restore_colors	.plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	.plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	.plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	.plugged/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	.plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb = {}$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.aqua   = s:aqua$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg0 = s:bg0$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg1 = s:bg1$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg2 = s:bg2$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg3 = s:bg3$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bg4 = s:bg4$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.blue   = s:blue$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_aqua    = ['#8ec07c', 108]     " 142-192-124$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_blue    = ['#83a598', 109]     " 131-165-152$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_green   = ['#b8bb26', 142]     " 184-187-38$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_orange  = ['#fe8019', 208]     " 254-128-25$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_purple  = ['#d3869b', 175]     " 211-134-155$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_red     = ['#fb4934', 167]     " 251-73-52$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.bright_yellow  = ['#fabd2f', 214]     " 250-189-47$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0       = ['#282828', 235]     " 40-40-40$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_hard  = ['#1d2021', 234]     " 29-32-33$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark0_soft  = ['#32302f', 236]     " 50-48-47$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark1       = ['#3c3836', 237]     " 60-56-54$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark2       = ['#504945', 239]     " 80-73-69$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark3       = ['#665c54', 241]     " 102-92-84$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4       = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.dark4_256   = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_aqua     = ['#427b58', 66]      " 66-123-88$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_blue     = ['#076678', 24]      " 7-102-120$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_green    = ['#79740e', 100]     " 121-116-14$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_orange   = ['#af3a03', 130]     " 175-58-3$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_purple   = ['#8f3f71', 96]      " 143-63-113$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_red      = ['#9d0006', 88]      " 157-0-6$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.faded_yellow   = ['#b57614', 136]     " 181-118-20$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg0 = s:fg0$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg1 = s:fg1$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg2 = s:fg2$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg3 = s:fg3$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4 = s:fg4$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.fg4_256 = s:fg4_256$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray = s:gray$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_244    = ['#928374', 244]     " 146-131-116$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.gray_245    = ['#928374', 245]     " 146-131-116$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.green  = s:green$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0      = ['#fbf1c7', 229]     " 253-244-193$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_hard = ['#f9f5d7', 230]     " 249-245-215$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light0_soft = ['#f2e5bc', 228]     " 242-229-188$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light1      = ['#ebdbb2', 223]     " 235-219-178$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light2      = ['#d5c4a1', 250]     " 213-196-161$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light3      = ['#bdae93', 248]     " 189-174-147$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4      = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.light4_256  = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_aqua   = ['#689d6a', 72]      " 104-157-106$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_blue   = ['#458588', 66]      " 69-133-136$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_green  = ['#98971a', 106]     " 152-151-26$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_orange = ['#d65d0e', 166]     " 214-93-14$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_purple = ['#b16286', 132]     " 177-98-134$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_red    = ['#cc241d', 124]     " 204-36-29$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.neutral_yellow = ['#d79921', 172]     " 215-153-33$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.orange = s:orange$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.purple = s:purple$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.red    = s:red$/;"	v
s:gb	.plugged/gruvbox/colors/gruvbox.vim	/^let s:gb.yellow = s:yellow$/;"	v
s:generate_wildignore_options	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:get	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get(...) "{{{$/;"	f
s:get	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:get(name, default) "{{{$/;"	f
s:get	.plugged/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
s:getChildren	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
s:getChildrenByName	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
s:getClosedParentTline	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
s:getDataType	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getDataType() abort dict$/;"	f
s:getDataType	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getDataType() abort dict$/;"	f
s:getGruvColor	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^function! s:getGruvColor(group)$/;"	f
s:getKind	.plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
s:getPrototype	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getPrototype	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
s:getTags	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
s:getTagsByName	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
s:get_char	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get_char(...) "{{{$/;"	f
s:get_color	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	.plugged/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_completed_snippets	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! s:get_completed_snippets(cur_text, col) abort$/;"	f
s:get_ctags_executable	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_filenames	.plugged/editorconfig-vim/autoload/editorconfig_core/handler.vim	/^function! s:get_filenames(path, config_filename)$/;"	f
s:get_git_root	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root(dir)$/;"	f
s:get_highlight_colors	.plugged/vim-transparent/autoload/background.vim	/^function! s:get_highlight_colors(group)$/;"	f
s:get_keyword_pos	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! s:get_keyword_pos(cur_text) abort$/;"	f
s:get_last_status	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^function! s:get_last_status() abort$/;"	f
s:get_list	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! s:get_list() abort$/;"	f
s:get_list	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! s:get_list() abort$/;"	f
s:get_map_str	.plugged/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
s:get_prelude	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! s:get_prelude() abort$/;"	f
s:get_process	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! s:get_process() abort$/;"	f
s:get_snippet_candidates	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^function! s:get_snippet_candidates(dirs) abort$/;"	f
s:get_sources_filetypes	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! s:get_sources_filetypes(filetype) abort$/;"	f
s:get_string	.plugged/neosnippet.vim/autoload/neosnippet/util.vim	/^function! s:get_string() abort$/;"	f
s:get_syn_name	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get_syn_name() "{{{$/;"	f
s:get_user_data	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! s:get_user_data(cur_text) abort$/;"	f
s:get_version	.plugged/fzf/plugin/fzf.vim	/^function s:get_version(bin)$/;"	f
s:getchar	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
s:getchar	.plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:getchar_safe	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
s:getfilename	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:getfilename(cache_dir, filename) abort$/;"	f
s:getpos	.plugged/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:gettime	.plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:given_range	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:given_range(line1, line2)$/;"	f
s:glob	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:globpath	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
s:go	.plugged/vim-commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
s:goto_markedwin	.plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
s:goto_tagbar	.plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
s:goto_win	.plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
s:gray	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_244$/;"	v
s:gray	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray = s:gb.gray_245$/;"	v
s:gray	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:gray[1]   = 8$/;"	v
s:green	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:green = s:getGruvColor('GruvboxGreen')$/;"	v
s:green	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.bright_green$/;"	v
s:green	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:green  = s:gb.faded_green$/;"	v
s:green	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:green[1]  = 10$/;"	v
s:group_by	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
s:gui_back	colors/NeoSolarized.vim	/^        let s:gui_back  =   s:gui_base03$/;"	v
s:gui_back	colors/NeoSolarized.vim	/^    let s:gui_back        = "NONE"$/;"	v
s:gui_back	colors/NeoSolarized.vim	/^    let s:gui_back        = s:gui_back$/;"	v
s:gui_back	colors/NeoSolarized.vim	/^    let s:gui_back        = s:gui_base02$/;"	v
s:gui_back	colors/NeoSolarized.vim	/^    let s:gui_back        = s:gui_base03$/;"	v
s:gui_base0	colors/NeoSolarized.vim	/^    let s:gui_base0       = "#DCDCDC"$/;"	v
s:gui_base0	colors/NeoSolarized.vim	/^    let s:gui_base0       = s:gui_base1$/;"	v
s:gui_base0	colors/NeoSolarized.vim	/^    let s:gui_base0     =   s:gui_temp00$/;"	v
s:gui_base00	colors/NeoSolarized.vim	/^    let s:gui_base00      = "#657b83"$/;"	v
s:gui_base00	colors/NeoSolarized.vim	/^    let s:gui_base00      = s:gui_base0$/;"	v
s:gui_base00	colors/NeoSolarized.vim	/^    let s:gui_base00    =   s:gui_base0$/;"	v
s:gui_base01	colors/NeoSolarized.vim	/^    let s:gui_base01      = "#586e75"$/;"	v
s:gui_base01	colors/NeoSolarized.vim	/^    let s:gui_base01      = s:gui_base00$/;"	v
s:gui_base01	colors/NeoSolarized.vim	/^    let s:gui_base01    =   s:gui_base1$/;"	v
s:gui_base02	colors/NeoSolarized.vim	/^    let s:gui_base02      = "#073642"$/;"	v
s:gui_base02	colors/NeoSolarized.vim	/^    let s:gui_base02    =   s:gui_base2$/;"	v
s:gui_base03	colors/NeoSolarized.vim	/^    let s:gui_base03      = "#002b36"$/;"	v
s:gui_base03	colors/NeoSolarized.vim	/^    let s:gui_base03    =   s:gui_base3$/;"	v
s:gui_base1	colors/NeoSolarized.vim	/^    let s:gui_base1       = "#93a1a1"$/;"	v
s:gui_base1	colors/NeoSolarized.vim	/^    let s:gui_base1       = s:gui_base2$/;"	v
s:gui_base1	colors/NeoSolarized.vim	/^    let s:gui_base1     =   s:gui_temp01$/;"	v
s:gui_base2	colors/NeoSolarized.vim	/^    let s:gui_base2       = "#eee8d5"$/;"	v
s:gui_base2	colors/NeoSolarized.vim	/^    let s:gui_base2       = s:gui_base3$/;"	v
s:gui_base2	colors/NeoSolarized.vim	/^    let s:gui_base2     =   s:gui_temp02$/;"	v
s:gui_base3	colors/NeoSolarized.vim	/^    let s:gui_base3       = "#fdf6e3"$/;"	v
s:gui_base3	colors/NeoSolarized.vim	/^    let s:gui_base3     =   s:gui_temp03$/;"	v
s:gui_blue	colors/NeoSolarized.vim	/^    let s:gui_blue        = "#EBDD59"$/;"	v
s:gui_cyan	colors/NeoSolarized.vim	/^    let s:gui_cyan        = "#20A54B"$/;"	v
s:gui_green	colors/NeoSolarized.vim	/^    let s:gui_green       = "#9B00A8" "experimental$/;"	v
s:gui_magenta	colors/NeoSolarized.vim	/^    let s:gui_magenta     = "#d33682"$/;"	v
s:gui_mode	colors/NeoSolarized.vim	/^    let s:gui_mode       = "gui"$/;"	v
s:gui_none	colors/NeoSolarized.vim	/^    let s:gui_none        = "NONE"$/;"	v
s:gui_orange	colors/NeoSolarized.vim	/^    let s:gui_orange      = "#EB3F00"$/;"	v
s:gui_red	colors/NeoSolarized.vim	/^    let s:gui_red         = "#FF0045"$/;"	v
s:gui_temp00	colors/NeoSolarized.vim	/^    let s:gui_temp00    =   s:gui_base00$/;"	v
s:gui_temp01	colors/NeoSolarized.vim	/^    let s:gui_temp01    =   s:gui_base01$/;"	v
s:gui_temp02	colors/NeoSolarized.vim	/^    let s:gui_temp02    =   s:gui_base02$/;"	v
s:gui_temp03	colors/NeoSolarized.vim	/^    let s:gui_temp03    =   s:gui_base03$/;"	v
s:gui_violet	colors/NeoSolarized.vim	/^    let s:gui_violet      = "#6c71c4"$/;"	v
s:gui_yellow	colors/NeoSolarized.vim	/^    let s:gui_yellow      = "#b58900"$/;"	v
s:handleLeftClick	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
s:handleMiddleMouse	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
s:handle_ambidouble	.plugged/fzf/plugin/fzf.vim	/^function! s:handle_ambidouble(dict)$/;"	f
s:has	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
s:has_any	.plugged/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_common_items	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
s:has_index	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
s:has_vimproc	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^function! s:has_vimproc() abort$/;"	f
s:hash	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:hash(str) abort$/;"	f
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:helptag_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:highlight_keys	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:history	.plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
s:history_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hls_cursor	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:hls_cursor = get(s:gb, g:gruvbox_hls_cursor)$/;"	v
s:hls_cursor	.plugged/gruvbox/colors/gruvbox.vim	/^let s:hls_cursor = s:orange$/;"	v
s:hook_list	.plugged/editorconfig-vim/autoload/editorconfig.vim	/^let s:hook_list = []$/;"	v
s:hue_1	colors/one.vim	/^    let s:hue_1  = ['#0184bc', '31'] " cyan$/;"	v
s:hue_1	colors/one.vim	/^    let s:hue_1  = ['#56b6c2', '73'] " cyan$/;"	v
s:hue_2	colors/one.vim	/^    let s:hue_2  = ['#4078f2', '33'] " blue$/;"	v
s:hue_2	colors/one.vim	/^    let s:hue_2  = ['#61afef', '75'] " blue$/;"	v
s:hue_3	colors/one.vim	/^    let s:hue_3  = ['#a626a4', '127'] " purple$/;"	v
s:hue_3	colors/one.vim	/^    let s:hue_3  = ['#c678dd', '176'] " purple$/;"	v
s:hue_4	colors/one.vim	/^    let s:hue_4  = ['#50a14f', '71'] " green$/;"	v
s:hue_4	colors/one.vim	/^    let s:hue_4  = ['#98c379', '114'] " green$/;"	v
s:hue_5	colors/one.vim	/^    let s:hue_5   = ['#e06c75', '168'] " red 1$/;"	v
s:hue_5	colors/one.vim	/^    let s:hue_5   = ['#e45649', '166'] " red 1$/;"	v
s:hue_5_2	colors/one.vim	/^    let s:hue_5_2 = ['#be5046', '130'] " red 2$/;"	v
s:hue_5_2	colors/one.vim	/^    let s:hue_5_2 = ['#ca1243', '160'] " red 2$/;"	v
s:hue_6	colors/one.vim	/^    let s:hue_6   = ['#986801', '94'] " orange 1$/;"	v
s:hue_6	colors/one.vim	/^    let s:hue_6   = ['#d19a66', '173'] " orange 1$/;"	v
s:hue_6_2	colors/one.vim	/^    let s:hue_6_2 = ['#c18401', '136'] " orange 2$/;"	v
s:hue_6_2	colors/one.vim	/^    let s:hue_6_2 = ['#e5c07b', '180'] " orange 2$/;"	v
s:i	colors/NeoSolarized.vim	/^    let s:i           = ""$/;"	v
s:i	colors/NeoSolarized.vim	/^    let s:i           = ",italic"$/;"	v
s:iconv	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:iconv	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
s:ics	.plugged/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:import	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:include_snippets	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! s:include_snippets(globs) abort$/;"	f
s:indent_snippet	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! s:indent_snippet(begin, end, base_indent, options) abort$/;"	f
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:init	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:init() "{{{$/;"	f
s:initCustomOpenArgs	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
s:initFoldState	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
s:init_done	.plugged/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:init_var	.plugged/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
s:initialize_cache	.plugged/neosnippet.vim/autoload/neosnippet/init.vim	/^function! s:initialize_cache() abort$/;"	f
s:initialize_options	.plugged/neosnippet.vim/autoload/neosnippet/commands.vim	/^function! s:initialize_options(options) abort$/;"	f
s:initialize_others	.plugged/neosnippet.vim/autoload/neosnippet/init.vim	/^function! s:initialize_others() abort$/;"	f
s:initialized	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^let s:initialized = 0$/;"	v
s:inject_snippet	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:inputPrompt	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
s:input_helper	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
s:input_safe	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
s:inputreplacement	.plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputtarget	.plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:insert	.plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:intersect	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
s:inverse	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:inverse = ''$/;"	v
s:inverse	.plugged/gruvbox/colors/gruvbox.vim	/^let s:inverse = 'inverse,'$/;"	v
s:invert_selection	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_selection = ''$/;"	v
s:invert_selection	.plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_selection = s:inverse$/;"	v
s:invert_signs	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_signs = s:inverse$/;"	v
s:invert_signs	.plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_signs = ''$/;"	v
s:invert_tabline	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:invert_tabline = s:inverse$/;"	v
s:invert_tabline	.plugged/gruvbox/colors/gruvbox.vim	/^let s:invert_tabline = ''$/;"	v
s:isFoldable	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFoldable	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
s:isFolded	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isFolded	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
s:isKindheader	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isKindheader	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
s:isNormalTag	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isNormalTag	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
s:isPseudoTag	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isPseudoTag	.plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
s:isSplitTag	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:isSplitTag	.plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
s:is_beginning_of_line	.plugged/neosnippet.vim/autoload/neosnippet/helpers.vim	/^function! s:is_beginning_of_line(cur_text) abort$/;"	f
s:is_cr_expansion	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_cr_expansion(...) " {{{$/;"	f
s:is_cygwin	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
s:is_cygwin	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_dark	.plugged/gruvbox/colors/gruvbox.vim	/^let s:is_dark=(&background == 'dark')$/;"	v
s:is_dict	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
s:is_empty	.plugged/neosnippet.vim/indent/neosnippet.vim	/^function! s:is_empty(line)$/;"	f
s:is_empty_matchpair	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_matchpair() "{{{$/;"	f
s:is_empty_quotes	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_quotes() "{{{$/;"	f
s:is_excluded_ft	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_excluded_ft(ft) "{{{$/;"	f
s:is_float	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
s:is_forbidden	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_forbidden(char) "{{{$/;"	f
s:is_funcref	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
s:is_jump	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_jump(...) "{{{$/;"	f
s:is_list	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_mac	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_mac() abort$/;"	f
s:is_mac	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_maximized	.plugged/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_number	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
s:is_numeric	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_smart_quote	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_smart_quote(char) "{{{$/;"	f
s:is_space_expansion	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_space_expansion() " {{{$/;"	f
s:is_string	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
s:is_unix	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_unix() abort$/;"	f
s:is_unix	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_vital_vim	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_win	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	.plugged/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_windows	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:is_windows() abort$/;"	f
s:is_windows	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_wsl_bash	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_wsl_bash = s:is_win && (exepath('bash') =~? 'Windows[\/\\\\]system32[\/\\\\]bash.exe$')$/;"	v
s:italic	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:italic = ''$/;"	v
s:italic	.plugged/gruvbox/colors/gruvbox.vim	/^let s:italic = 'italic,'$/;"	v
s:italic	colors/one.vim	/^  let s:italic = 'italic'$/;"	v
s:italic	colors/one.vim	/^let s:italic = ''$/;"	v
s:italicize_comments	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_comments = ''$/;"	v
s:italicize_comments	.plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_comments = s:italic$/;"	v
s:italicize_strings	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:italicize_strings = s:italic$/;"	v
s:italicize_strings	.plugged/gruvbox/colors/gruvbox.vim	/^let s:italicize_strings = ''$/;"	v
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:joinUndo	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:joinUndo() "{{{$/;"	f
s:join_posix_lines	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
s:jump	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jumpToChild	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
s:jumpToFirstChild	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
s:jumpToLastChild	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
s:jumpToNextSibling	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
s:jumpToParent	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
s:jumpToPrevSibling	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
s:jumpToRoot	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
s:jumpToSibling	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
s:justify_equal_spacing	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
s:keyMaps	.plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:key_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:keyword_filter	.plugged/neosnippet.vim/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:keyword_filter(snippets, cur_keyword_str) abort$/;"	f
s:known_files	.plugged/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files	.plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_files.get	.plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
s:known_files.has	.plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
s:known_files.put	.plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
s:known_files.rm	.plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
s:known_projects	.plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_alt_bufnr	.plugged/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_highlight_tline	.plugged/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_wildignores	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:launcher	.plugged/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	.plugged/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout_keys	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	.plugged/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:levenshtein_distance	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
s:line_handler	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:lines	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:lines(str) abort$/;"	f
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:load	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:load(...) abort dict$/;"	f
s:load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:loaded = {}$/;"	v
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_delimitMate	.plugged/delimitMate/plugin/delimitMate.vim	/^let s:loaded_delimitMate = 1$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lquote	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:lquote(char) "{{{$/;"	f
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:manual_update_tags	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map_accum	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
s:mark_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:mark_window	.plugged/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
s:match_highlight	.plugged/vim-transparent/autoload/background.vim	/^function! s:match_highlight(highlight, pattern)$/;"	f
s:matches_filename	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^function! s:matches_filename(config_filename, target_filename, glob)$/;"	f
s:max_by	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
s:maybe_map_scope	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:maybe_map_scope(scopestr) abort$/;"	f
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_opts	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:min_by	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
s:min_version	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:mono_1	colors/one.vim	/^    let s:mono_1 = ['#494b53', '23']$/;"	v
s:mono_1	colors/one.vim	/^    let s:mono_1 = ['#abb2bf', '145']$/;"	v
s:mono_2	colors/one.vim	/^    let s:mono_2 = ['#696c77', '60']$/;"	v
s:mono_2	colors/one.vim	/^    let s:mono_2 = ['#828997', '102']$/;"	v
s:mono_3	colors/one.vim	/^    let s:mono_3 = ['#5c6370', '59']$/;"	v
s:mono_3	colors/one.vim	/^    let s:mono_3 = ['#a0a1a7', '145']$/;"	v
s:mono_4	colors/one.vim	/^    let s:mono_4 = ['#4b5263', '59']$/;"	v
s:mono_4	colors/one.vim	/^    let s:mono_4 = ['#c2c2c3', '250']$/;"	v
s:mono_5	colors/one.vim	/^    let s:mono_5 = ['#4b5263', '235']$/;"	v
s:n	colors/NeoSolarized.vim	/^    let s:n               = "NONE"$/;"	v
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:nbs	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0xa0)$/;"	v
s:nearby_disabled	.plugged/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:need_trans	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:new	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:new(plugin_name) abort$/;"	f
s:new_window	.plugged/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:none	.plugged/gruvbox/colors/gruvbox.vim	/^let s:none = ['NONE', 'NONE']$/;"	v
s:nr2byte	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
s:nr2enc_char	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
s:nr2hex	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
s:nsplit	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:number_column	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:number_column = get(s:gb, g:gruvbox_number_column)$/;"	v
s:number_column	.plugged/gruvbox/colors/gruvbox.vim	/^let s:number_column = s:none$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_job_exit_wrapper	.plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	.plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:ob	colors/NeoSolarized.vim	/^    let s:ob              = ""$/;"	v
s:old_cpo	.plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:open	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
s:open	.plugged/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:openExplorer	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
s:openFold	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
s:openFold	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
s:openHSplit	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
s:openHSplitBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
s:openInNewTab	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
s:openInNewTabSilent	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
s:openKindFold	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
s:openNodeRecursively	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
s:openParents	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
s:openVSplit	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
s:openVSplitBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
s:opfunc	.plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
s:opfunc2	.plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
s:option_init	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:option_init(name, default) "{{{$/;"	f
s:options	.plugged/delimitMate/autoload/delimitMate.vim	/^  let s:options = {}$/;"	v
s:optionxform	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^function! s:optionxform(optionstr)$/;"	f
s:or	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:or(xs) abort$/;"	f
s:orange	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:orange = s:getGruvColor('GruvboxOrange')$/;"	v
s:orange	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.bright_orange$/;"	v
s:orange	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:orange = s:gb.faded_orange$/;"	v
s:ou	colors/NeoSolarized.vim	/^    let s:ou              = ""$/;"	v
s:ou	colors/NeoSolarized.vim	/^    let s:ou          = ",underline"$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p = {'normal':{}, 'inactive':{}, 'insert':{}, 'replace':{}, 'visual':{}, 'tabline':{}, '/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.left =  [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.middle = [ [ s:bg4, s:bg1 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.inactive.right = [ [ s:bg4, s:bg1 ], [ s:bg4, s:bg1 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.left = [ [ s:bg0, s:blue, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.insert.right = [ [ s:bg0, s:blue ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.error = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.left = [ [ s:bg0, s:fg4, 'bold' ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.right = [ [ s:bg0, s:fg4 ], [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.normal.warning = [ [ s:bg2, s:yellow ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.left = [ [ s:bg0, s:aqua, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.replace.right = [ [ s:bg0, s:aqua ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.left = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.middle = [ [ s:bg0, s:bg0 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.right = [ [ s:bg0, s:orange ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.tabline.tabsel = [ [ s:bg0, s:fg4 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.left = [ [ s:bg0, s:green, 'bold' ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.middle = [ [ s:fg4, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.terminal.right = [ [ s:bg0, s:green ], [ s:fg1, s:bg2 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.left = [ [ s:bg0, s:orange, 'bold' ], [ s:bg0, s:bg4 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.middle = [ [ s:fg4, s:bg1 ] ]$/;"	v
s:p	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:p.visual.right = [ [ s:bg0, s:orange ], [ s:bg0, s:bg4 ] ]$/;"	v
s:pad_between_letters	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
s:pad_both_sides	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
s:pad_left	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
s:pad_right	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
s:padding_by_displaywidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
s:parse	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^function! s:parse(config_filename, target_filename, lines)$/;"	f
s:parse	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! s:parse(snippets_file) abort$/;"	f
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_snippet_name	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! s:parse_snippet_name(snippets_file, line, linenr, dup_check) abort$/;"	f
s:partition	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path2directory	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
s:path2project_directory	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
s:pattern	.plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	.plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? /;"	v
s:pattern	.plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	.plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:paused	.plugged/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:permutations	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
s:pluck	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
s:plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
s:plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
s:plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plugin_name	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:plugin_name() abort dict$/;"	f
s:plugin_name	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:pmenu	colors/one.vim	/^    let s:pmenu        = ['#333841', '59']$/;"	v
s:pmenu	colors/one.vim	/^    let s:pmenu        = ['#dfdfdf', '253']$/;"	v
s:pop	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:pop(list) abort$/;"	f
s:popup	.plugged/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
s:popup_support	.plugged/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepend_opts	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:preprocess_values	.plugged/editorconfig-vim/autoload/editorconfig_core/handler.vim	/^function! s:preprocess_values(job, opts)$/;"	f
s:present	.plugged/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:previewBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
s:previewNodeCurrent	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
s:previewNodeHSplit	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
s:previewNodeHSplitBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
s:previewNodeVSplit	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
s:previewNodeVSplitBookmark	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:process	.plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process_options_file	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:product	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:product(lists) abort$/;"	f
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:project_root	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:promptToDelBuffer	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:purple	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.bright_purple$/;"	v
s:purple	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple = s:gb.faded_purple$/;"	v
s:purple	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:purple[1] = 13$/;"	v
s:push	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
s:pushd	.plugged/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:pwin_by_tagbar	.plugged/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:r	colors/NeoSolarized.vim	/^    let s:r               = ",reverse"$/;"	v
s:re_escape	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^function! s:re_escape(text)$/;"	f
s:readfile	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:readfile(cache_dir, filename) abort$/;"	f
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:red	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.bright_red$/;"	v
s:red	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:red    = s:gb.faded_red$/;"	v
s:red	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:red[1]    = 9$/;"	v
s:redraw	.plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:reduce_line	.plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:refreshCurrent	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
s:refreshRoot	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reindent	.plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() abort " {{{1$/;"	f
s:reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:removeChild	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
s:removeTag	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
s:remove_ansi_sequences	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
s:remove_layout	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:renameBuffer	.plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:repair_posix_text	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
s:replace	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
s:replace_first	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
s:replacement_expr	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^let s:replacement_expr =$/;"	v
s:reset	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:reuseWin	.plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:reverse	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
s:reverse_list	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rootNERDTreePath	.plugged/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:rquote	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:rquote(char) "{{{$/;"	f
s:rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:run_system	.plugged/tagbar/autoload/tagbar.vim	/^function! s:run_system(cmd, version) abort$/;"	f
s:runner_exe	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:runner_exe	.plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_gtags')$/;"	v
s:runner_exe	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_pyscopedb')$/;"	v
s:s	colors/NeoSolarized.vim	/^    let s:s               = ",standout"$/;"	v
s:save_cpo	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^let s:save_cpo = &cpo$/;"	v
s:saved_cpo	.plugged/editorconfig-vim/autoload/editorconfig.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_cpo	.plugged/editorconfig-vim/autoload/editorconfig_core.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_cpo	.plugged/editorconfig-vim/autoload/editorconfig_core/fnmatch.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_cpo	.plugged/editorconfig-vim/autoload/editorconfig_core/handler.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_cpo	.plugged/editorconfig-vim/autoload/editorconfig_core/ini.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_cpo	.plugged/editorconfig-vim/autoload/editorconfig_core/util.vim	/^let s:saved_cpo = &cpo$/;"	v
s:saved_cpo	.plugged/editorconfig-vim/plugin/editorconfig.vim	/^let s:saved_cpo = &cpo$/;"	v
s:scan	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
s:search	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:search(pattern) abort dict$/;"	f
s:search_history_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:search_sync_placeholder	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! s:search_sync_placeholder(start, end, number) abort$/;"	f
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:set	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:set(name, value) "{{{$/;"	f
s:set	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:set(...) " {{{$/;"	f
s:setFolded	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
s:set_default	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
s:set_snippet_dict	.plugged/neosnippet.vim/autoload/neosnippet/parser.vim	/^function! s:set_snippet_dict(snippet_dict, snippets, dup_check, snippets_file) abort$/;"	f
s:setup	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:setup(...) "{{{$/;"	f
s:setup_keymaps	.plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
s:setup_options	.plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
s:shellesc_cmd	.plugged/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
s:shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
s:shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
s:shellescape	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
s:shellescape	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^  function! s:shellescape(command) abort$/;"	f
s:shift	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:shift(list) abort$/;"	f
s:short_help	.plugged/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:shortpath	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	.plugged/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:showMenu	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
s:sid2sfuncs	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
s:sign_column	.plugged/gruvbox/colors/gruvbox.vim	/^    let s:sign_column = get(s:gb, g:gruvbox_sign_column)$/;"	v
s:sign_column	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:sign_column = s:number_column$/;"	v
s:sign_column	.plugged/gruvbox/colors/gruvbox.vim	/^let s:sign_column = s:bg1$/;"	v
s:singular_types	.plugged/tagbar/autoload/tagbar.vim	/^let s:singular_types = {$/;"	v
s:skip_next_auto_completion	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! s:skip_next_auto_completion() abort$/;"	f
s:smart_execute_command	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:snippets_expand	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! s:snippets_expand(cur_text, col) abort$/;"	f
s:snippets_expand_or_jump	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! s:snippets_expand_or_jump(cur_text, col) abort$/;"	f
s:snippets_jump_or_expand	.plugged/neosnippet.vim/autoload/neosnippet/mappings.vim	/^function! s:snippets_jump_or_expand(cur_text, col) abort$/;"	f
s:sort	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
s:sortTags	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
s:sort_buffers	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:sort_by	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
s:source	.plugged/neosnippet.vim/autoload/neocomplcache/sources/snippets_complete.vim	/^let s:source = {$/;"	v
s:source	.plugged/neosnippet.vim/autoload/neocomplete/sources/neosnippet.vim	/^let s:source = {$/;"	v
s:source	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^let s:source = {$/;"	v
s:source	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^let s:source.action_table = s:action_table$/;"	v
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source.gather_candidates	.plugged/neosnippet.vim/autoload/neocomplete/sources/neosnippet.vim	/^function! s:source.gather_candidates(context) abort$/;"	f
s:source.gather_candidates	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! s:source.gather_candidates(args, context) abort$/;"	f
s:source.get_complete_words	.plugged/neosnippet.vim/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str) abort$/;"	f
s:source.get_keyword_pos	.plugged/neosnippet.vim/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.get_keyword_pos(cur_text) abort$/;"	f
s:source.hooks.on_init	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! s:source.hooks.on_init(args, context) abort$/;"	f
s:source.hooks.on_post_filter	.plugged/neosnippet.vim/autoload/neocomplete/sources/neosnippet.vim	/^function! s:source.hooks.on_post_filter(context) abort$/;"	f
s:source.initialize	.plugged/neosnippet.vim/autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.initialize() abort$/;"	f
s:source_runtime	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^let s:source_runtime = {$/;"	v
s:source_runtime	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^let s:source_runtime.action_table.unite__new_candidate = {$/;"	v
s:source_runtime.action_table.unite__new_candidate.func	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_runtime.action_table.unite__new_candidate.func(candidate) abort$/;"	f
s:source_runtime.gather_candidates	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_runtime.gather_candidates(args, context) abort$/;"	f
s:source_user	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^let s:source_user = {$/;"	v
s:source_user	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^let s:source_user.action_table.unite__new_candidate = {$/;"	v
s:source_user.action_table.unite__new_candidate.func	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_user.action_table.unite__new_candidate.func(candidate) abort$/;"	f
s:source_user.gather_candidates	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^function! s:source_user.gather_candidates(args, context) abort$/;"	f
s:sp_back	colors/NeoSolarized.vim	/^    let s:sp_back           =   ""$/;"	v
s:sp_base0	colors/NeoSolarized.vim	/^    let s:sp_base0          =   ""$/;"	v
s:sp_base00	colors/NeoSolarized.vim	/^    let s:sp_base00         =   ""$/;"	v
s:sp_base01	colors/NeoSolarized.vim	/^    let s:sp_base01         =   ""$/;"	v
s:sp_base02	colors/NeoSolarized.vim	/^    let s:sp_base02         =   ""$/;"	v
s:sp_base03	colors/NeoSolarized.vim	/^    let s:sp_base03         =   ""$/;"	v
s:sp_base1	colors/NeoSolarized.vim	/^    let s:sp_base1          =   ""$/;"	v
s:sp_base2	colors/NeoSolarized.vim	/^    let s:sp_base2          =   ""$/;"	v
s:sp_base3	colors/NeoSolarized.vim	/^    let s:sp_base3          =   ""$/;"	v
s:sp_blue	colors/NeoSolarized.vim	/^    let s:sp_blue           =   ""$/;"	v
s:sp_cyan	colors/NeoSolarized.vim	/^    let s:sp_cyan           =   ""$/;"	v
s:sp_green	colors/NeoSolarized.vim	/^    let s:sp_green          =   ""$/;"	v
s:sp_magenta	colors/NeoSolarized.vim	/^    let s:sp_magenta        =   ""$/;"	v
s:sp_none	colors/NeoSolarized.vim	/^    let s:sp_none           =   ""$/;"	v
s:sp_orange	colors/NeoSolarized.vim	/^    let s:sp_orange         =   ""$/;"	v
s:sp_red	colors/NeoSolarized.vim	/^    let s:sp_red            =   ""$/;"	v
s:sp_violet	colors/NeoSolarized.vim	/^    let s:sp_violet         =   ""$/;"	v
s:sp_yellow	colors/NeoSolarized.vim	/^    let s:sp_yellow         =   ""$/;"	v
s:span	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
s:spawn	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:special_grey	colors/one.vim	/^    let s:special_grey = ['#3b4048', '59']$/;"	v
s:special_grey	colors/one.vim	/^    let s:special_grey = ['#d3d3d3', '251']$/;"	v
s:split	.plugged/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:split3	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
s:split_by_displaywidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
s:split_leftright	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
s:split_posix_text	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:splittable	.plugged/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:starts_with	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:statusline_in_use	.plugged/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:str	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
s:strchars	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
s:strchars	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
s:strfmt	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strfmt	.plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
s:strip	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:strip_white_space	.plugged/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
s:strwidthpart	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
s:strwidthpart_reverse	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:strwidthpart_reverse	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:substitute_last	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
s:substitute_path_separator	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
s:substitute_placeholder_marker	.plugged/neosnippet.vim/autoload/neosnippet/view.vim	/^function! s:substitute_placeholder_marker(start, end, snippet_holder_cnt) abort$/;"	f
s:suite	.plugged/neosnippet.vim/test/functions.vim	/^let s:suite = themis#suite('toml')$/;"	v
s:suite.get_completed_snippet	.plugged/neosnippet.vim/test/functions.vim	/^function! s:suite.get_completed_snippet() abort$/;"	f
s:suite.get_in_paren	.plugged/neosnippet.vim/test/functions.vim	/^function! s:suite.get_in_paren() abort$/;"	f
s:surroundings	.plugged/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax_accent	colors/one.vim	/^    let s:syntax_accent = ['#526fff', '63']$/;"	v
s:syntax_accent	colors/one.vim	/^    let s:syntax_accent = ['#528bff', '69']$/;"	v
s:syntax_accent_2	colors/one.vim	/^    let s:syntax_accent_2 = ['#0083be', '31']$/;"	v
s:syntax_bg	colors/one.vim	/^    let s:syntax_bg     = ['#282c34', '236']$/;"	v
s:syntax_bg	colors/one.vim	/^    let s:syntax_bg     = ['#fafafa', '255']$/;"	v
s:syntax_bg_2	colors/one.vim	/^    let s:syntax_bg_2     = ['#282c34', '234']$/;"	v
s:syntax_cursor	colors/one.vim	/^    let s:syntax_cursor = ['#2c323c', '236']$/;"	v
s:syntax_cursor	colors/one.vim	/^    let s:syntax_cursor = ['#f0f0f0', '254']$/;"	v
s:syntax_fg	colors/one.vim	/^  let s:syntax_fg = s:mono_1$/;"	v
s:syntax_fold_bg	colors/one.vim	/^  let s:syntax_fold_bg = s:mono_5$/;"	v
s:syntax_gutter	colors/one.vim	/^    let s:syntax_gutter = ['#636d83', '60']$/;"	v
s:syntax_gutter	colors/one.vim	/^    let s:syntax_gutter = ['#9e9e9e', '247']$/;"	v
s:system	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^function! s:system(str, ...) abort$/;"	f
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:tags_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:take_while	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
s:term_back	colors/NeoSolarized.vim	/^        let s:term_back =   s:term_base03$/;"	v
s:term_back	colors/NeoSolarized.vim	/^    let s:term_back        = "NONE"$/;"	v
s:term_back	colors/NeoSolarized.vim	/^    let s:term_back        = s:term_back$/;"	v
s:term_back	colors/NeoSolarized.vim	/^    let s:term_back        = s:term_base02$/;"	v
s:term_back	colors/NeoSolarized.vim	/^    let s:term_back        = s:term_base03$/;"	v
s:term_base0	colors/NeoSolarized.vim	/^    let s:term_base0       = "12"$/;"	v
s:term_base0	colors/NeoSolarized.vim	/^    let s:term_base0       = s:term_base1$/;"	v
s:term_base0	colors/NeoSolarized.vim	/^    let s:term_base0    =   s:term_temp00$/;"	v
s:term_base00	colors/NeoSolarized.vim	/^    let s:term_base00      = "11"$/;"	v
s:term_base00	colors/NeoSolarized.vim	/^    let s:term_base00      = s:term_base0$/;"	v
s:term_base00	colors/NeoSolarized.vim	/^    let s:term_base00   =   s:term_base0$/;"	v
s:term_base01	colors/NeoSolarized.vim	/^    let s:term_base01      = "10"$/;"	v
s:term_base01	colors/NeoSolarized.vim	/^    let s:term_base01      = s:term_base00$/;"	v
s:term_base01	colors/NeoSolarized.vim	/^    let s:term_base01   =   s:term_base1$/;"	v
s:term_base02	colors/NeoSolarized.vim	/^    let s:term_base02      = "0"$/;"	v
s:term_base02	colors/NeoSolarized.vim	/^    let s:term_base02   =   s:term_base2$/;"	v
s:term_base03	colors/NeoSolarized.vim	/^    let s:term_base03      = "8"$/;"	v
s:term_base03	colors/NeoSolarized.vim	/^    let s:term_base03   =   s:term_base3$/;"	v
s:term_base1	colors/NeoSolarized.vim	/^    let s:term_base1       = "14"$/;"	v
s:term_base1	colors/NeoSolarized.vim	/^    let s:term_base1       = s:term_base2$/;"	v
s:term_base1	colors/NeoSolarized.vim	/^    let s:term_base1    =   s:term_temp01$/;"	v
s:term_base2	colors/NeoSolarized.vim	/^    let s:term_base2       = "7"$/;"	v
s:term_base2	colors/NeoSolarized.vim	/^    let s:term_base2       = s:term_base3$/;"	v
s:term_base2	colors/NeoSolarized.vim	/^    let s:term_base2    =   s:term_temp02$/;"	v
s:term_base3	colors/NeoSolarized.vim	/^    let s:term_base3       = "15"$/;"	v
s:term_base3	colors/NeoSolarized.vim	/^    let s:term_base3    =   s:term_temp03$/;"	v
s:term_blue	colors/NeoSolarized.vim	/^    let s:term_blue        = "4"$/;"	v
s:term_cyan	colors/NeoSolarized.vim	/^    let s:term_cyan        = "6"$/;"	v
s:term_green	colors/NeoSolarized.vim	/^    let s:term_green       = "2"$/;"	v
s:term_magenta	colors/NeoSolarized.vim	/^    let s:term_magenta     = "5"$/;"	v
s:term_marker	.plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	.plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:term_mode	colors/NeoSolarized.vim	/^    let s:term_mode       = "cterm"$/;"	v
s:term_none	colors/NeoSolarized.vim	/^    let s:term_none       = "NONE"$/;"	v
s:term_orange	colors/NeoSolarized.vim	/^    let s:term_orange      = "9"$/;"	v
s:term_red	colors/NeoSolarized.vim	/^    let s:term_red         = "1"$/;"	v
s:term_temp00	colors/NeoSolarized.vim	/^    let s:term_temp00   =   s:term_base00$/;"	v
s:term_temp01	colors/NeoSolarized.vim	/^    let s:term_temp01   =   s:term_base01$/;"	v
s:term_temp02	colors/NeoSolarized.vim	/^    let s:term_temp02   =   s:term_base02$/;"	v
s:term_temp03	colors/NeoSolarized.vim	/^    let s:term_temp03   =   s:term_base03$/;"	v
s:term_violet	colors/NeoSolarized.vim	/^    let s:term_violet      = "13"$/;"	v
s:term_yellow	colors/NeoSolarized.vim	/^    let s:term_yellow      = "3"$/;"	v
s:test	.plugged/delimitMate/plugin/delimitMate.vim	/^function! s:test() "{{{$/;"	f
s:test_mappings	.plugged/delimitMate/autoload/delimitMate.vim	/^function! s:test_mappings(list, is_matchpair) "{{{$/;"	f
s:textobject	.plugged/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:tmux_enabled	.plugged/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:toggleFold	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
s:toggleIgnoreFilter	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
s:toggleShowBookmarks	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
s:toggleShowFiles	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
s:toggleShowHidden	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
s:toggleZoom	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
s:tree_up_dir_line	.plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:trim(str) abort$/;"	f
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim_end	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
s:trim_start	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
s:truncate	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
s:truncate_skipping	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:truncate_skipping	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
s:type_init_done	.plugged/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:u	colors/NeoSolarized.vim	/^    let s:u           = ""$/;"	v
s:u	colors/NeoSolarized.vim	/^    let s:u           = ",underline"$/;"	v
s:undercurl	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:undercurl = ''$/;"	v
s:undercurl	.plugged/gruvbox/colors/gruvbox.vim	/^let s:undercurl = 'undercurl,'$/;"	v
s:underline	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:underline = ''$/;"	v
s:underline	.plugged/gruvbox/colors/gruvbox.vim	/^let s:underline = 'underline,'$/;"	v
s:unescape	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
s:unescape_pattern	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
s:uniq	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
s:uniq_by	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
s:unix_redir	.plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	.plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unload	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:unload() abort dict$/;"	f
s:unshift	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
s:upDirCurrentRootClosed	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
s:upDirCurrentRootOpen	.plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_in_progress	.plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	.plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_queue	.plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	.plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_tags	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:use_sh	.plugged/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:validate_layout	.plugged/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:version_requirement	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:versions	.plugged/fzf/plugin/fzf.vim	/^let s:versions = {}$/;"	v
s:vert_split	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:vert_split = get(s:gb, g:gruvbox_vert_split)$/;"	v
s:vert_split	.plugged/gruvbox/colors/gruvbox.vim	/^let s:vert_split = s:bg0$/;"	v
s:vertsplit	colors/one.vim	/^    let s:vertsplit    = ['#181a1f', '233']$/;"	v
s:vertsplit	colors/one.vim	/^    let s:vertsplit    = ['#e7e9e1', '188']$/;"	v
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_bg	.plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_bg = ['bg', 'bg']$/;"	v
s:vim_fg	.plugged/gruvbox/colors/gruvbox.vim	/^let s:vim_fg = ['fg', 'fg']$/;"	v
s:vim_quitting	.plugged/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:visibility_symbols	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^    let s:visibility_symbols = g:tagbar_visibility_symbols$/;"	v
s:visibility_symbols	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:visual_grey	colors/one.vim	/^    let s:visual_grey  = ['#3e4452', '53']$/;"	v
s:visual_grey	colors/one.vim	/^    let s:visual_grey  = ['#d0d0d0', '251']$/;"	v
s:vital_base_dir	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:vital_files	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! s:vital_files() abort$/;"	f
s:warn	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	.plugged/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warned	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:warned	.plugged/fzf/plugin/fzf.vim	/^let s:warned = 0$/;"	v
s:warning	.plugged/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
s:warnings	.plugged/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:wcswidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wcswidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
s:wcswidth	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
s:wide	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wildignores_options_path	.plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:window_expanded	.plugged/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	.plugged/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:windows_sink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winpath	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:winpath(path)$/;"	f
s:winpath	.plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:winpath = {}$/;"	v
s:winrestcmd	.plugged/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
s:with_index	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
s:wrap	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
s:wrap	.plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap_cmds	.plugged/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrapreg	.plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:write_triggered_update_tags	.plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:writefile	.plugged/fzf/plugin/fzf.vim	/^function! s:writefile(...)$/;"	f
s:writefile	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^function! s:writefile(cache_dir, filename, list) abort$/;"	f
s:xterm_launcher	.plugged/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yank_to_register	.plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
s:yellow	.plugged/gruvbox/autoload/lightline/colorscheme/gruvbox.vim	/^  let s:yellow = s:getGruvColor('GruvboxYellow')$/;"	v
s:yellow	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.bright_yellow$/;"	v
s:yellow	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow = s:gb.faded_yellow$/;"	v
s:yellow	.plugged/gruvbox/colors/gruvbox.vim	/^  let s:yellow[1] = 11$/;"	v
s:zip	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:zip(...) abort$/;"	f
s:zip_fill	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
sameContentLayout	.plugged/fzf/src/options.go	/^func (a previewOpts) sameContentLayout(b previewOpts) bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
sameLayout	.plugged/fzf/src/options.go	/^func (a previewOpts) sameLayout(b previewOpts) bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
save_cpo	.plugged/delimitMate/plugin/delimitMate.vim	/^let save_cpo = &cpo$/;"	v
scan	.plugged/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	struct:fzf.Matcher	typeref:typename:(*Merger, bool)
scoreGapExtension	.plugged/fzf/src/algo/algo.go	/^	scoreGapExtension = -1$/;"	c	package:algo
scoreGapStart	.plugged/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	.plugged/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
score_comparison	.plugged/hop.nvim/lua/hop/jump_target.lua	/^    score_comparison = function (a, b) return a.score < b.score end$/;"	f
score_comparison	.plugged/hop.nvim/lua/hop/jump_target.lua	/^    score_comparison = function (a, b) return a.score > b.score end$/;"	f
script_output_fn	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^    $script_output_fn = [System.IO.Path]::GetTempFileName()$/;"	v
script_output_fn	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$script_output_fn = ''$/;"	v
scroll	.plugged/fzf/src/options.go	/^	scroll      string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
scrollOff	.plugged/fzf/src/terminal.go	/^	scrollOff          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
scrollOffset	.plugged/fzf/src/terminal.go	/^	scrollOffset int$/;"	m	struct:fzf.previewRequest	typeref:typename:int
scrollable	.plugged/fzf/src/terminal.go	/^	scrollable bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
scrollbar	.plugged/fzf/src/terminal.go	/^	scrollbar          string$/;"	m	struct:fzf.Terminal	typeref:typename:string
searchRequest	.plugged/fzf/src/terminal.go	/^type searchRequest struct {$/;"	s	package:fzf
selectItem	.plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
selectItemChanged	.plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
select_count	.plugged/fzf/test/test_go.rb	/^          def select_count$/;"	f	method:Tmux.until
selected	.plugged/fzf/src/terminal.go	/^	selected           map[int32]selectedItem$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]selectedItem
selected	.plugged/fzf/src/terminal.go	/^	selected bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
selectedItem	.plugged/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
semi	.plugged/vim-snippets/pythonx/javascript_snippets.py	/^def semi(snip):$/;"	f
send_keys	.plugged/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
separator	.plugged/fzf/src/terminal.go	/^	separator          labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
separatorLen	.plugged/fzf/src/terminal.go	/^	separatorLen       int$/;"	m	struct:fzf.Terminal	typeref:typename:int
serverChan	.plugged/fzf/src/terminal.go	/^	serverChan         chan []*action$/;"	m	struct:fzf.Terminal	typeref:typename:chan []*action
setBg	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() {$/;"	f	struct:tui.LightWindow
set_unmatched_lines	.plugged/hop.nvim/lua/hop/init.lua	/^local function set_unmatched_lines(buf_handle, hl_ns, top_line, bottom_line, cursor_pos, directi/;"	f
set_var	.plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestFish
set_var	.plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
set_version	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^                $set_version = $argv[$idx]$/;"	v
set_version	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$set_version = ''$/;"	v
setup	.plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	.plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	module:TestShell
setupTerminal	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f	unknown:tui.LightRenderer
setupTerminal	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
shape	.plugged/fzf/src/tui/tui.go	/^	shape       BorderShape$/;"	m	struct:tui.BorderStyle	typeref:typename:BorderShape
shell	.plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBash
shell	.plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestFish
shell	.plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestZsh
shellPath	.plugged/fzf/src/util/util_windows.go	/^var shellPath atomic.Value$/;"	v	package:util	typeref:typename:atomic.Value
sigstop	.plugged/fzf/src/terminal.go	/^	sigstop            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
size	.plugged/fzf/src/options.go	/^	size        sizeSpec$/;"	m	struct:fzf.previewOpts	typeref:typename:sizeSpec
size	.plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.heightSpec	typeref:typename:float64
size	.plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec	typeref:typename:float64
sizeSpec	.plugged/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
slab	.plugged/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher	typeref:typename:[]*util.Slab
slab	.plugged/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf	typeref:typename:*util.Slab
slab	.plugged/fzf/src/terminal.go	/^	slab               *util.Slab$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Slab
slab16Size	.plugged/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf	typeref:typename:int
slab32Size	.plugged/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf	typeref:typename:int
slice	.plugged/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars	typeref:typename:[]byte
sliceChunks	.plugged/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	struct:fzf.Matcher	typeref:typename:[][]*Chunk
smcup	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	struct:tui.LightRenderer
snipMate & UltiSnip Snippets	.plugged/vim-snippets/README.md	/^snipMate & UltiSnip Snippets$/;"	c
snippets	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^    const snippets = await args.denops.call($/;"	C	method:Source.gather
sort	.plugged/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
sort	.plugged/fzf/src/matcher.go	/^	sort       bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
sort	.plugged/fzf/src/terminal.go	/^	sort               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sort	.plugged/fzf/src/terminal.go	/^	sort    bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
sortCriteria	.plugged/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf	typeref:typename:[]criterion
sortSelected	.plugged/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	struct:fzf.Terminal	typeref:typename:[]selectedItem
sortable	.plugged/fzf/src/pattern.go	/^	sortable      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
sorted	.plugged/fzf/src/merger.go	/^	sorted  bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
space	.plugged/delimitMate/Makefile	/^space    := $(empty) $(empty)$/;"	m
space_before_function_paren	.plugged/vim-snippets/pythonx/javascript_snippets.py	/^def space_before_function_paren(snip):$/;"	f
spinner	.plugged/fzf/src/terminal.go	/^	spinner            []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
spinner	.plugged/fzf/src/terminal.go	/^	spinner    string$/;"	m	struct:fzf.previewer	typeref:typename:string
spinner	.plugged/fzf/src/terminal.go	/^	spinner string$/;"	m	struct:fzf.previewResult	typeref:typename:string
spinnerDuration	.plugged/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c	package:fzf
splitNth	.plugged/fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f	package:fzf	typeref:typename:[]Range
splitRegexp	.plugged/fzf/src/options.go	/^	splitRegexp      *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
startChan	.plugged/fzf/src/terminal.go	/^	startChan          chan fitpad$/;"	m	struct:fzf.Terminal	typeref:typename:chan fitpad
startEventPoller	.plugged/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	struct:fzf.Reader
startHttpServer	.plugged/fzf/src/server.go	/^func startHttpServer(port int, channel chan []*action) error {$/;"	f	package:fzf	typeref:typename:error
starts_with_uppercase	.plugged/hop.nvim/lua/hop/jump_target.lua	/^local function starts_with_uppercase(s)$/;"	f
state	.plugged/fzf/src/util/atomicbool.go	/^	state int32 \/\/ "1" is true, "0" is false$/;"	m	struct:util.AtomicBool	typeref:typename:int32
stderr	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	.plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	.plugged/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool) {$/;"	f	struct:tui.LightWindow
str	.plugged/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter	typeref:typename:*string
strLines	.plugged/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf	typeref:typename:[]string
strong	.plugged/fzf/src/terminal.go	/^	strong             tui.Attr$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Attr
style	.plugged/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair	typeref:typename:tcell.Style
suppress	.plugged/fzf/src/terminal.go	/^	suppress           bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
surround.vim	.plugged/vim-surround/README.markdown	/^# surround.vim$/;"	c
sync	.plugged/fzf/src/terminal.go	/^	sync    bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
t	.plugged/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action	typeref:typename:actionType
tabstop	.plugged/fzf/src/terminal.go	/^	tabstop            int$/;"	m	struct:fzf.Terminal	typeref:typename:int
tabstop	.plugged/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
tabstop	.plugged/fzf/src/tui/light.go	/^	tabstop  int$/;"	m	struct:tui.LightWindow	typeref:typename:int
tac	.plugged/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
tac	.plugged/fzf/src/merger.go	/^	tac     bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
tagbar#CloseWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#ForceUpdate	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ForceUpdate() abort$/;"	f
tagbar#GetTagNearLine	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#GetTagNearLine(lnum, ...) abort$/;"	f
tagbar#IsOpen	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#IsOpen() abort$/;"	f
tagbar#OpenWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StopAutoUpdate	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#ToggleWindow	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#Update	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#Update() abort$/;"	f
tagbar#autoopen	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#currenttagtype	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttagtype(fmt, default) abort$/;"	f
tagbar#debug#enabled	.plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	.plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	.plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	.plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	.plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#jump	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#jump() abort$/;"	f
tagbar#jumpToNearbyTag	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#jumpToNearbyTag(direction, ...) abort$/;"	f
tagbar#printfileinfo	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#printfileinfo() abort$/;"	f
tagbar#prototypes#basetag#new	.plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	.plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	.plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	.plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	.plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	.plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	.plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	.plugged/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	.plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	.plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	.plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	.plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	.plugged/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	.plugged/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
target/$(BINARY32)	.plugged/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES)$/;"	t
target/$(BINARY64)	.plugged/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES)$/;"	t
target/$(BINARYARM5)	.plugged/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES)$/;"	t
target/$(BINARYARM6)	.plugged/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES)$/;"	t
target/$(BINARYARM7)	.plugged/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES)$/;"	t
target/$(BINARYARM8)	.plugged/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES)$/;"	t
target/$(BINARYLOONG64)	.plugged/fzf/Makefile	/^target\/$(BINARYLOONG64): $(SOURCES)$/;"	t
target/$(BINARYPPC64LE)	.plugged/fzf/Makefile	/^target\/$(BINARYPPC64LE): $(SOURCES)$/;"	t
target/$(BINARYRISCV64)	.plugged/fzf/Makefile	/^target\/$(BINARYRISCV64): $(SOURCES)$/;"	t
target/$(BINARYS390)	.plugged/fzf/Makefile	/^target\/$(BINARYS390): $(SOURCES)$/;"	t
tbl_to_str	.plugged/hop.nvim/lua/hop/hint.lua	/^local function tbl_to_str(label)$/;"	f
tcount	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let tcount += 1$/;"	v
tcount	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^let tcount = 1$/;"	v
tcount	.plugged/delimitMate/test/autoclose_quotes.vim	/^      let tcount += 1$/;"	v
tcount	.plugged/delimitMate/test/autoclose_quotes.vim	/^    let tcount += 1$/;"	v
tcount	.plugged/delimitMate/test/autoclose_quotes.vim	/^let tcount = 1$/;"	v
tcount	.plugged/delimitMate/test/expand_cr.vim	/^  let tcount += 1$/;"	v
tcount	.plugged/delimitMate/test/expand_cr.vim	/^let tcount = 1$/;"	v
tcount	.plugged/delimitMate/test/expand_space.vim	/^  let tcount += 1$/;"	v
tcount	.plugged/delimitMate/test/expand_space.vim	/^let tcount = 1$/;"	v
teardown	.plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	.plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	module:TestShell
template	.plugged/fzf/src/terminal.go	/^	template     string$/;"	m	struct:fzf.previewRequest	typeref:typename:string
template	.plugged/fzf/src/terminal_test.go	/^	template string$/;"	m	struct:fzf.give	typeref:typename:string
templateToString	.plugged/fzf/src/terminal_test.go	/^func templateToString(format string, data interface{}) string {$/;"	f	package:fzf	typeref:typename:string
tempname	.plugged/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	.plugged/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	.plugged/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	.plugged/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termFuzzy	.plugged/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf	typeref:type:termType
termPrefix	.plugged/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	.plugged/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf	typeref:typename:[]term
termSets	.plugged/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern	typeref:typename:[]termSet
termSuffix	.plugged/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	.plugged/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf	typeref:typename:int
terminate	.plugged/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f	struct:fzf.Reader
test	.plugged/delimitMate/Makefile	/^test:$/;"	t
test	.plugged/fzf/Makefile	/^test: $(SOURCES)$/;"	t
test	.plugged/neosnippet.vim/Makefile	/^test:$/;"	t
testCase	.plugged/fzf/src/terminal_test.go	/^type testCase struct {$/;"	s	package:fzf
testCommands	.plugged/fzf/src/terminal_test.go	/^func testCommands(t *testing.T, tests []testCase) {$/;"	f	package:fzf
testParserReference	.plugged/fzf/src/ansi_test.go	/^func testParserReference(t testing.TB, str string) {$/;"	f	package:fzf
test_accept_non_empty	.plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestGoFZF
test_accept_non_empty_with_empty_list	.plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestGoFZF
test_accept_non_empty_with_multi_selection	.plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestGoFZF
test_alt_c	.plugged/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	.plugged/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_backward_delete_char_eof	.plugged/fzf/test/test_go.rb	/^  def test_backward_delete_char_eof$/;"	f	class:TestGoFZF
test_backward_eof	.plugged/fzf/test/test_go.rb	/^  def test_backward_eof$/;"	f	class:TestGoFZF
test_become	.plugged/fzf/test/test_go.rb	/^  def test_become$/;"	f	class:TestGoFZF
test_bind	.plugged/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	.plugged/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_bind_replace_query	.plugged/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestGoFZF
test_cancel	.plugged/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_change_first_last	.plugged/fzf/test/test_go.rb	/^  def test_change_first_last$/;"	f	class:TestGoFZF
test_change_preview_window	.plugged/fzf/test/test_go.rb	/^  def test_change_preview_window$/;"	f	class:TestGoFZF
test_change_preview_window_rotate	.plugged/fzf/test/test_go.rb	/^  def test_change_preview_window_rotate$/;"	f	class:TestGoFZF
test_change_prompt	.plugged/fzf/test/test_go.rb	/^  def test_change_prompt$/;"	f	class:TestGoFZF
test_change_query	.plugged/fzf/test/test_go.rb	/^  def test_change_query$/;"	f	class:TestGoFZF
test_clear_list_when_header_lines_changed_due_to_reload	.plugged/fzf/test/test_go.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestGoFZF
test_clear_query	.plugged/fzf/test/test_go.rb	/^  def test_clear_query$/;"	f	class:TestGoFZF
test_clear_selection	.plugged/fzf/test/test_go.rb	/^  def test_clear_selection$/;"	f	class:TestGoFZF
test_close	.plugged/fzf/test/test_go.rb	/^  def test_close$/;"	f	class:TestGoFZF
test_complete_quoted_command	.plugged/fzf/test/test_go.rb	/^  def test_complete_quoted_command$/;"	f	class:TestZsh
test_ctrl_r	.plugged/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_r_abort	.plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_abort$/;"	f	module:TestShell
test_ctrl_r_multiline	.plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_multiline$/;"	f	module:TestShell
test_ctrl_t	.plugged/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	.plugged/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	.plugged/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	module:CompletionTest
test_custom_completion_api	.plugged/fzf/test/test_go.rb	/^  def test_custom_completion_api$/;"	f	module:CompletionTest
test_cycle	.plugged/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	.plugged/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestGoFZF
test_dir_completion	.plugged/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	module:CompletionTest
test_disabled	.plugged/fzf/test/test_go.rb	/^  def test_disabled$/;"	f	class:TestGoFZF
test_dynamic_completion_loader	.plugged/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_editorconfig	.plugged/editorconfig-vim/tests/plugin/spec/editorconfig_spec.rb	/^def test_editorconfig(vim, file_name, expected_values)$/;"	f
test_ellipsis	.plugged/fzf/test/test_go.rb	/^  def test_ellipsis$/;"	f	class:TestGoFZF
test_escaped_meta_characters	.plugged/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestGoFZF
test_exact	.plugged/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestGoFZF
test_execute	.plugged/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	.plugged/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_plus_flag	.plugged/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestGoFZF
test_execute_shell	.plugged/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	.plugged/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	.plugged/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	.plugged/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestGoFZF
test_expect	.plugged/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	.plugged/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	.plugged/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_expect_printable_character_print_query	.plugged/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestGoFZF
test_file_completion	.plugged/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	module:CompletionTest
test_file_completion_root	.plugged/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	module:CompletionTest
test_file_completion_unicode	.plugged/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	module:CompletionTest
test_file_word	.plugged/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestGoFZF
test_filter_exitstatus	.plugged/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_focus_event	.plugged/fzf/test/test_go.rb	/^  def test_focus_event$/;"	f	class:TestGoFZF
test_fzf_default_command	.plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_fzf_default_command_failure	.plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestGoFZF
test_header	.plugged/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	.plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	.plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse_list	.plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_first	.plugged/fzf/test/test_go.rb	/^  def test_header_first$/;"	f	class:TestGoFZF
test_header_first_reverse	.plugged/fzf/test/test_go.rb	/^  def test_header_first_reverse$/;"	f	class:TestGoFZF
test_header_lines	.plugged/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	.plugged/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	.plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_reverse_list	.plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines_with_nth	.plugged/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	.plugged/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_header_reverse_list	.plugged/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestGoFZF
test_height_range_fit	.plugged/fzf/test/test_go.rb	/^  def test_height_range_fit$/;"	f	class:TestGoFZF
test_height_range_fit_preview_above	.plugged/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_above$/;"	f	class:TestGoFZF
test_height_range_fit_preview_above_alternative	.plugged/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_above_alternative$/;"	f	class:TestGoFZF
test_height_range_fit_preview_left	.plugged/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_left$/;"	f	class:TestGoFZF
test_height_range_overflow	.plugged/fzf/test/test_go.rb	/^  def test_height_range_overflow$/;"	f	class:TestGoFZF
test_history	.plugged/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	.plugged/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestGoFZF
test_info_hidden	.plugged/fzf/test/test_go.rb	/^  def test_info_hidden$/;"	f	class:TestGoFZF
test_info_inline_separator	.plugged/fzf/test/test_go.rb	/^  def test_info_inline_separator$/;"	f	class:TestGoFZF
test_info_no_separator	.plugged/fzf/test/test_go.rb	/^  def test_info_no_separator$/;"	f	class:TestGoFZF
test_info_separator_ansi_colors_and_tabs	.plugged/fzf/test/test_go.rb	/^  def test_info_separator_ansi_colors_and_tabs$/;"	f	class:TestGoFZF
test_info_separator_no_unicode	.plugged/fzf/test/test_go.rb	/^  def test_info_separator_no_unicode$/;"	f	class:TestGoFZF
test_info_separator_repeat	.plugged/fzf/test/test_go.rb	/^  def test_info_separator_repeat$/;"	f	class:TestGoFZF
test_info_separator_unicode	.plugged/fzf/test/test_go.rb	/^  def test_info_separator_unicode$/;"	f	class:TestGoFZF
test_instance	.plugged/editorconfig-vim/tests/plugin/spec/editorconfig_spec.rb	/^def test_instance(vim)$/;"	f
test_interrupt_execute	.plugged/fzf/test/test_go.rb	/^  def test_interrupt_execute$/;"	f	class:TestGoFZF
test_invalid_cache	.plugged/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_cache_query_type	.plugged/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestGoFZF
test_invalid_option	.plugged/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_inverse_only_search_should_not_sort_the_result	.plugged/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestGoFZF
test_item_index_reset_on_reload	.plugged/fzf/test/test_go.rb	/^  def test_item_index_reset_on_reload$/;"	f	class:TestGoFZF
test_jump	.plugged/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestGoFZF
test_jump_accept	.plugged/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestGoFZF
test_keep_right	.plugged/fzf/test/test_go.rb	/^  def test_keep_right$/;"	f	class:TestGoFZF
test_key_bindings	.plugged/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_kill_default_command_on_abort	.plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_abort$/;"	f	class:TestGoFZF
test_kill_default_command_on_accept	.plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_accept$/;"	f	class:TestGoFZF
test_kill_reload_command_on_abort	.plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_abort$/;"	f	class:TestGoFZF
test_kill_reload_command_on_accept	.plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_accept$/;"	f	class:TestGoFZF
test_labels_bottom	.plugged/fzf/test/test_go.rb	/^  def test_labels_bottom$/;"	f	class:TestGoFZF
test_labels_center	.plugged/fzf/test/test_go.rb	/^  def test_labels_center$/;"	f	class:TestGoFZF
test_labels_left	.plugged/fzf/test/test_go.rb	/^  def test_labels_left$/;"	f	class:TestGoFZF
test_labels_right	.plugged/fzf/test/test_go.rb	/^  def test_labels_right$/;"	f	class:TestGoFZF
test_listen	.plugged/fzf/test/test_go.rb	/^  def test_listen$/;"	f	class:TestGoFZF
test_long_line	.plugged/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_margin	.plugged/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	.plugged/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_margin_reverse_list	.plugged/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestGoFZF
test_marker	.plugged/fzf/test/test_go.rb	/^  def test_marker$/;"	f	class:TestGoFZF
test_multi_max	.plugged/fzf/test/test_go.rb	/^  def test_multi_max$/;"	f	class:TestGoFZF
test_multi_order	.plugged/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_no_clear	.plugged/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestGoFZF
test_normalized_match	.plugged/fzf/test/test_go.rb	/^  def test_normalized_match$/;"	f	class:TestGoFZF
test_or_operator	.plugged/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestGoFZF
test_partial_caching	.plugged/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestGoFZF
test_pointer	.plugged/fzf/test/test_go.rb	/^  def test_pointer$/;"	f	class:TestGoFZF
test_pointer_with_jump	.plugged/fzf/test/test_go.rb	/^  def test_pointer_with_jump$/;"	f	class:TestGoFZF
test_pos	.plugged/fzf/test/test_go.rb	/^  def test_pos$/;"	f	class:TestGoFZF
test_prev_next_selected	.plugged/fzf/test/test_go.rb	/^  def test_prev_next_selected$/;"	f	class:TestGoFZF
test_preview	.plugged/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestGoFZF
test_preview_bindings_with_default_preview	.plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestGoFZF
test_preview_bindings_without_default_preview	.plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestGoFZF
test_preview_clear_screen	.plugged/fzf/test/test_go.rb	/^  def test_preview_clear_screen$/;"	f	class:TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	.plugged/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestGoFZF
test_preview_file	.plugged/fzf/test/test_go.rb	/^  def test_preview_file$/;"	f	class:TestGoFZF
test_preview_flags	.plugged/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestGoFZF
test_preview_header	.plugged/fzf/test/test_go.rb	/^  def test_preview_header$/;"	f	class:TestGoFZF
test_preview_hidden	.plugged/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestGoFZF
test_preview_q_no_match	.plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestGoFZF
test_preview_q_no_match_with_initial_query	.plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestGoFZF
test_preview_scroll_begin_and_offset	.plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestGoFZF
test_preview_scroll_begin_constant	.plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestGoFZF
test_preview_scroll_begin_expr	.plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestGoFZF
test_preview_size_0	.plugged/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestGoFZF
test_preview_size_0_hidden	.plugged/fzf/test/test_go.rb	/^  def test_preview_size_0_hidden$/;"	f	class:TestGoFZF
test_preview_update_on_select	.plugged/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestGoFZF
test_preview_window_follow	.plugged/fzf/test/test_go.rb	/^  def test_preview_window_follow$/;"	f	class:TestGoFZF
test_process_completion	.plugged/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	module:CompletionTest
test_put	.plugged/fzf/test/test_go.rb	/^  def test_put$/;"	f	class:TestGoFZF
test_query_unicode	.plugged/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_read0	.plugged/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_reload	.plugged/fzf/test/test_go.rb	/^  def test_reload$/;"	f	class:TestGoFZF
test_reload_and_change_preview_should_update_preview	.plugged/fzf/test/test_go.rb	/^  def test_reload_and_change_preview_should_update_preview$/;"	f	class:TestGoFZF
test_reload_even_when_theres_no_match	.plugged/fzf/test/test_go.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestGoFZF
test_reload_should_update_preview	.plugged/fzf/test/test_go.rb	/^  def test_reload_should_update_preview$/;"	f	class:TestGoFZF
test_reload_sync	.plugged/fzf/test/test_go.rb	/^  def test_reload_sync$/;"	f	class:TestGoFZF
test_scroll	.plugged/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_scroll_off	.plugged/fzf/test/test_go.rb	/^  def test_scroll_off$/;"	f	class:TestGoFZF
test_scroll_off_large	.plugged/fzf/test/test_go.rb	/^  def test_scroll_off_large$/;"	f	class:TestGoFZF
test_select_1	.plugged/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	.plugged/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	.plugged/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_select_deselect	.plugged/fzf/test/test_go.rb	/^  def test_select_deselect$/;"	f	class:TestGoFZF
test_show_and_hide_preview	.plugged/fzf/test/test_go.rb	/^  def test_show_and_hide_preview$/;"	f	class:TestGoFZF
test_smart_case_for_each_term	.plugged/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_snipmate_format	.plugged/vim-snippets/tests.sh	/^function test_snipmate_format {$/;"	f
test_space_indented	.plugged/vim-snippets/tests.sh	/^function test_space_indented {$/;"	f
test_start_event	.plugged/fzf/test/test_go.rb	/^  def test_start_event$/;"	f	class:TestGoFZF
test_strip_xterm_osc_sequence	.plugged/fzf/test/test_go.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	class:TestGoFZF
test_sync	.plugged/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	.plugged/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	.plugged/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	.plugged/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	.plugged/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	.plugged/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_begin_algo_v2	.plugged/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestGoFZF
test_tiebreak_chunk	.plugged/fzf/test/test_go.rb	/^  def test_tiebreak_chunk$/;"	f	class:TestGoFZF
test_tiebreak_end	.plugged/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestGoFZF
test_tiebreak_index_begin	.plugged/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	.plugged/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_toggle_alternative_preview_window	.plugged/fzf/test/test_go.rb	/^  def test_toggle_alternative_preview_window$/;"	f	class:TestGoFZF
test_toggle_preview_without_default_preview_command	.plugged/fzf/test/test_go.rb	/^  def test_toggle_preview_without_default_preview_command$/;"	f	class:TestGoFZF
test_toggle_preview_wrap	.plugged/fzf/test/test_go.rb	/^  def test_toggle_preview_wrap$/;"	f	class:TestGoFZF
test_toggle_sort	.plugged/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_transform_prompt	.plugged/fzf/test/test_go.rb	/^  def test_transform_prompt$/;"	f	class:TestGoFZF
test_transform_query	.plugged/fzf/test/test_go.rb	/^  def test_transform_query$/;"	f	class:TestGoFZF
test_unbind_rebind	.plugged/fzf/test/test_go.rb	/^  def test_unbind_rebind$/;"	f	class:TestGoFZF
test_unicode_case	.plugged/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	.plugged/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	module:CompletionTest
test_vanilla	.plugged/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_with_nth	.plugged/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	.plugged/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_basic	.plugged/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	.plugged/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
tests_cmake_ec_sort_dir	.plugged/editorconfig-vim/tests/core/tests/cmake/ec_sort.cmake	/^set(tests_cmake_ec_sort_dir "${CMAKE_CURRENT_LIST_DIR}")$/;"	v
tests_cmakelists_dir	.plugged/editorconfig-vim/tests/core/tests/CMakeLists.txt	/^set(tests_cmakelists_dir "${CMAKE_CURRENT_LIST_DIR}")$/;"	v
tests_meta_cmakelists_dir	.plugged/editorconfig-vim/tests/core/tests/meta/CMakeLists.txt	/^set(tests_meta_cmakelists_dir "${CMAKE_CURRENT_LIST_DIR}")$/;"	v
tests_meta_sample_dir	.plugged/editorconfig-vim/tests/core/tests/meta/sample.cmake	/^set( tests_meta_sample_dir "${CMAKE_CURRENT_LIST_DIR}" )$/;"	v
testsnumber	.plugged/delimitMate/test/autoclose_matchpairs.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
testsnumber	.plugged/delimitMate/test/autoclose_quotes.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
testsnumber	.plugged/delimitMate/test/expand_cr.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
testsnumber	.plugged/delimitMate/test/expand_space.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
text	.plugged/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item	typeref:typename:util.Chars
text	.plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern	typeref:typename:[]rune
text	.plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term	typeref:typename:[]rune
text	.plugged/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token	typeref:typename:*util.Chars
text	.plugged/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine	typeref:typename:string
theme	.plugged/fzf/src/terminal.go	/^	theme              *tui.ColorTheme$/;"	m	struct:fzf.Terminal	typeref:typename:*tui.ColorTheme
theme	.plugged/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer	typeref:typename:*ColorTheme
theme	.plugged/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:*ColorTheme
threshold	.plugged/fzf/src/options.go	/^	threshold   int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
timeoutInterval	.plugged/fzf/src/tui/light_windows.go	/^	timeoutInterval = 10$/;"	c	package:tui
tmux	.plugged/fzf/test/test_go.rb	/^  attr_reader :tmux$/;"	A	class:TestBase
toActions	.plugged/fzf/src/terminal.go	/^func toActions(types ...actionType) []*action {$/;"	f	package:fzf	typeref:typename:[]*action
toAnsiString	.plugged/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f	package:fzf	typeref:typename:string
toggleItem	.plugged/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
toggleSort	.plugged/fzf/src/terminal.go	/^	toggleSort         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
top	.plugged/fzf/src/tui/light.go	/^	top      int$/;"	m	struct:tui.LightWindow	typeref:typename:int
top	.plugged/fzf/src/tui/tcell.go	/^	top         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
topLeft	.plugged/fzf/src/tui/tui.go	/^	topLeft     rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topRight	.plugged/fzf/src/tui/tui.go	/^	topRight    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
trans	.plugged/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList	typeref:typename:ItemBuilder
transformInput	.plugged/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Token
transformed	.plugged/fzf/src/item.go	/^	transformed *[]Token      \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]Token
transparent	.plugged/vim-transparent/plugin/background.vim	/^augroup transparent$/;"	a
triggerLoad	.plugged/fzf/src/terminal.go	/^	triggerLoad        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
trimLeft	.plugged/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int32)
trimLength	.plugged/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars	typeref:typename:uint16
trimLengthKnown	.plugged/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars	typeref:typename:bool
trimMessage	.plugged/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
trimQuery	.plugged/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
trimRight	.plugged/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, bool)
truncateQuery	.plugged/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	struct:fzf.Terminal
trySkip	.plugged/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo	typeref:typename:int
try_curl	.plugged/fzf/install	/^try_curl() {$/;"	f
try_wget	.plugged/fzf/install	/^try_wget() {$/;"	f
ttyin	.plugged/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
ttyinChannel	.plugged/fzf/src/tui/light.go	/^	ttyinChannel    chan byte$/;"	m	struct:tui.LightRenderer	typeref:typename:chan byte
ttyname	.plugged/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyname	.plugged/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
tui	.plugged/fzf/src/terminal.go	/^	tui                tui.Renderer$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Renderer
tui	.plugged/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/light.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/tcell_test.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	.plugged/fzf/src/tui/tui_test.go	/^package tui$/;"	p
typ	.plugged/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term	typeref:typename:termType
type	.plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/vim-snippets.git"},$/;"	s	object:repository
undo	.plugged/delimitMate/Makefile	/^undo:$/;"	t
unicode	.plugged/fzf/src/terminal.go	/^	unicode            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
uninstall	.plugged/delimitMate/Makefile	/^uninstall:$/;"	t
unite#sources#neosnippet#define	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! unite#sources#neosnippet#define() abort$/;"	f
unite#sources#neosnippet#start_complete	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet.vim	/^function! unite#sources#neosnippet#start_complete() abort$/;"	f
unite#sources#neosnippet_file#define	.plugged/neosnippet.vim/autoload/unite/sources/neosnippet_file.vim	/^function! unite#sources#neosnippet_file#define() abort$/;"	f
unset_var	.plugged/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	module:TestShell
until	.plugged/fzf/test/test_go.rb	/^  def until(refresh = false)$/;"	f	class:Tmux
upOneLine	.plugged/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
update	.plugged/fzf/Makefile	/^update:$/;"	t
updatePromptOffset	.plugged/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, []rune)
updateTerminalSize	.plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
updateTerminalSize	.plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
url	.plugged/vim-snippets/addon-info.json	/^  "repository" : {"type": "git", "url": "git:\/\/github.com\/honza\/vim-snippets.git"},$/;"	s	object:repository
usage	.plugged/fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c	package:fzf
use_raw_list	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	.plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
util	.plugged/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	.plugged/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	.plugged/fzf/src/util/chars.go	/^package util$/;"	p
util	.plugged/fzf/src/util/chars_test.go	/^package util$/;"	p
util	.plugged/fzf/src/util/eventbox.go	/^package util$/;"	p
util	.plugged/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	.plugged/fzf/src/util/slab.go	/^package util$/;"	p
util	.plugged/fzf/src/util/util.go	/^package util$/;"	p
util	.plugged/fzf/src/util/util_test.go	/^package util$/;"	p
util	.plugged/fzf/src/util/util_unix.go	/^package util$/;"	p
util	.plugged/fzf/src/util/util_windows.go	/^package util$/;"	p
val	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^      const val = snippets[key];$/;"	C	method:Source.gather
validateSign	.plugged/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f	package:fzf	typeref:typename:error
version	.plugged/delimitMate/Makefile	/^version:$/;"	t
version	.plugged/fzf/install.ps1	/^$version="0.38.0"$/;"	v
version	.plugged/fzf/main.go	/^var version string = "0.38"$/;"	v	package:main	typeref:typename:string
version	.plugged/fzf/src/terminal.go	/^	version            int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
version	.plugged/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.previewer	typeref:typename:int64
version	.plugged/fzf/src/terminal.go	/^	version  int64$/;"	m	struct:fzf.previewed	typeref:typename:int64
version	.plugged/fzf/src/terminal.go	/^	version int64$/;"	m	struct:fzf.previewResult	typeref:typename:int64
version	.plugged/gruvbox/package.json	/^  "version": "2.0.0",$/;"	s
vertical	.plugged/fzf/src/tui/tui.go	/^	vertical    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
vesc	.plugged/editorconfig-vim/tests/core/ecvimlib.ps1	/^function global:vesc($str) {$/;"	f
vim	.plugged/gruvbox/package.json	/^  "vim": {$/;"	o
vim-plug	.plugged/neosnippet.vim/README.md	/^### vim-plug$/;"	S	section:Neosnippet""Installation
vim-ripgrep	.plugged/vim-ripgrep/README.md	/^# vim-ripgrep$/;"	c
vim-themis	.plugged/neosnippet.vim/Makefile	/^vim-themis:$/;"	t
vimTAP	.plugged/delimitMate/test/_setup.vim	/^let vimTAP = expand('<sfile>:p:h').'\/build\/VimTAP'$/;"	v
vim_args	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$vim_args = @($/;"	v
vim_snippets#Filename	.plugged/neosnippet.vim/autoload/vim_snippets.vim	/^function! vim_snippets#Filename(...) abort$/;"	f
vim_snippets#Filename	.plugged/vim-snippets/autoload/vim_snippets.vim	/^fun! vim_snippets#Filename(...)$/;"	f
vimball	.plugged/delimitMate/Makefile	/^vimball: $(FILENAME).vmb$/;"	t
vimstatus	.plugged/editorconfig-vim/tests/core/editorconfig2.ps1	/^$vimstatus = run_process $VIM -stdout $debug -stderr $debug `$/;"	v
vital#	.plugged/neosnippet.vim/autoload/vital/_neosnippet.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	.plugged/neosnippet.vim/autoload/vital/neosnippet.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#_neosnippet#Data#List#import	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/List.vim	/^  function! vital#_neosnippet#Data#List#import() abort$/;"	f
vital#_neosnippet#Data#String#import	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Data/String.vim	/^  function! vital#_neosnippet#Data#String#import() abort$/;"	f
vital#_neosnippet#Prelude#import	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Prelude.vim	/^  function! vital#_neosnippet#Prelude#import() abort$/;"	f
vital#_neosnippet#Process#import	.plugged/neosnippet.vim/autoload/vital/_neosnippet/Process.vim	/^  function! vital#_neosnippet#Process#import() abort$/;"	f
vital#_neosnippet#System#Cache#Deprecated#import	.plugged/neosnippet.vim/autoload/vital/_neosnippet/System/Cache/Deprecated.vim	/^  function! vital#_neosnippet#System#Cache#Deprecated#import() abort$/;"	f
vital#of	.plugged/neosnippet.vim/autoload/vital.vim	/^function! vital#of(name) abort$/;"	f
vmove	.plugged/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	struct:fzf.Terminal
vset	.plugged/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
wait	.plugged/fzf/src/reader.go	/^	wait     bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
wait	.plugged/fzf/test/test_go.rb	/^def wait$/;"	f
want	.plugged/fzf/src/terminal_test.go	/^	want$/;"	M	struct:fzf.testCase	typeref:typename:want
want	.plugged/fzf/src/terminal_test.go	/^type want struct {$/;"	s	package:fzf
whiteChars	.plugged/fzf/src/algo/algo.go	/^const whiteChars = " \\t\\n\\v\\f\\r\\x85\\xA0"$/;"	c	package:algo
whiteSuffix	.plugged/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
width	.plugged/fzf/src/terminal.go	/^	width    int$/;"	m	struct:fzf.itemLine	typeref:typename:int
width	.plugged/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
width	.plugged/fzf/src/tui/light.go	/^	width    int$/;"	m	struct:tui.LightWindow	typeref:typename:int
width	.plugged/fzf/src/tui/tcell.go	/^	width       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
win	.plugged/fzf/test/test_go.rb	/^  attr_reader :win$/;"	A	class:Tmux
window	.plugged/fzf/src/terminal.go	/^	window             tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
windowPosition	.plugged/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf	typeref:typename:int
window_context	.plugged/hop.nvim/lua/hop/window.lua	/^local function window_context(win_handle, cursor_pos)$/;"	f
withIndex	.plugged/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf	typeref:typename:*Item
withPos	.plugged/fzf/src/pattern.go	/^	withPos       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
withPrefixLengths	.plugged/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
word	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^        const word = val.word as string;$/;"	C	method:Source.gather
wordMatch	.plugged/neosnippet.vim/denops/@ddc-sources/neosnippet.ts	/^    const wordMatch = \/\\w+$\/.exec(args.context.input);$/;"	C	method:Source.gather
wordNext	.plugged/fzf/src/terminal.go	/^	wordNext           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wordRubout	.plugged/fzf/src/terminal.go	/^	wordRubout         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wrap	.plugged/fzf/src/options.go	/^	wrap        bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
wrapLine	.plugged/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f	package:tui	typeref:typename:[]wrappedLine
wrapped.newsink	.plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	.plugged/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
writeTemporaryFile	.plugged/fzf/src/terminal.go	/^func writeTemporaryFile(data []string, printSep string) string {$/;"	f	package:fzf	typeref:typename:string
writelines	.plugged/fzf/test/test_go.rb	/^  def writelines(path, lines)$/;"	f	class:TestBase
x	.plugged/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
xoffset	.plugged/fzf/src/terminal.go	/^	xoffset            int$/;"	m	struct:fzf.Terminal	typeref:typename:int
y	.plugged/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
yS	.plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	.plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	.plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
yanked	.plugged/fzf/src/terminal.go	/^	yanked             []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
yoffset	.plugged/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
ys	.plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	.plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
zh	init.vim	/^nnoremap zh <nop>$/;"	m
zh	init.vim	/^nnoremap zh zH$/;"	m
zip	.plugged/delimitMate/Makefile	/^zip: $(FILENAME).zip $(FILENAME).vmb.zip$/;"	t
zl	init.vim	/^nnoremap zl <nop>$/;"	m
zl	init.vim	/^nnoremap zl zL$/;"	m
zsh	.plugged/fzf/test/test_go.rb	/^    def zsh$/;"	S	class:Shell
